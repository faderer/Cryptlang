# Generated from Cryptlang.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,135,1116,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,1,
        0,1,0,1,0,5,0,200,8,0,10,0,12,0,203,9,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,2,1,2,1,3,1,3,3,3,216,8,3,1,4,1,4,3,4,220,8,4,1,5,1,5,1,6,
        3,6,225,8,6,1,6,1,6,1,7,1,7,1,7,3,7,232,8,7,1,8,1,8,1,8,1,8,3,8,
        238,8,8,1,8,1,8,1,8,1,8,3,8,244,8,8,1,8,1,8,3,8,248,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,5,8,258,8,8,10,8,12,8,261,9,8,1,8,1,8,1,
        8,1,8,1,8,3,8,268,8,8,1,9,1,9,1,10,3,10,273,8,10,1,10,1,10,1,10,
        1,10,1,10,1,10,5,10,281,8,10,10,10,12,10,284,9,10,3,10,286,8,10,
        1,10,1,10,5,10,290,8,10,10,10,12,10,293,9,10,1,10,1,10,1,11,1,11,
        1,11,3,11,300,8,11,1,11,3,11,303,8,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,3,12,313,8,12,1,13,1,13,5,13,317,8,13,10,13,12,13,320,
        9,13,1,13,1,13,1,13,3,13,325,8,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,3,14,334,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,5,15,346,8,15,10,15,12,15,349,9,15,3,15,351,8,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,363,8,17,1,17,1,17,
        1,18,1,18,1,18,3,18,370,8,18,1,18,3,18,373,8,18,1,19,3,19,376,8,
        19,1,19,1,19,3,19,380,8,19,1,19,1,19,1,19,3,19,385,8,19,1,19,1,19,
        3,19,389,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,
        400,8,21,10,21,12,21,403,9,21,1,22,3,22,406,8,22,1,22,1,22,1,22,
        1,22,3,22,412,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,
        422,8,24,1,24,1,24,5,24,426,8,24,10,24,12,24,429,9,24,1,24,1,24,
        1,25,1,25,1,25,1,25,5,25,437,8,25,10,25,12,25,440,9,25,3,25,442,
        8,25,1,25,1,25,1,26,1,26,3,26,448,8,26,1,26,3,26,451,8,26,1,27,1,
        27,1,27,1,27,5,27,457,8,27,10,27,12,27,460,9,27,3,27,462,8,27,1,
        27,1,27,1,28,1,28,3,28,468,8,28,1,28,3,28,471,8,28,1,29,1,29,1,29,
        1,29,5,29,477,8,29,10,29,12,29,480,9,29,3,29,482,8,29,1,29,1,29,
        1,30,1,30,3,30,488,8,30,1,31,1,31,3,31,492,8,31,1,31,1,31,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,3,32,503,8,32,1,32,1,32,1,32,3,32,508,
        8,32,1,32,5,32,511,8,32,10,32,12,32,514,9,32,1,33,1,33,1,33,5,33,
        519,8,33,10,33,12,33,522,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,35,1,35,1,35,1,35,1,35,5,35,536,8,35,10,35,12,35,539,9,35,1,35,
        1,35,3,35,543,8,35,1,36,1,36,1,37,1,37,1,38,1,38,5,38,551,8,38,10,
        38,12,38,554,9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,573,8,39,1,40,1,40,1,
        40,1,41,1,41,1,42,1,42,1,43,3,43,583,8,43,1,43,1,43,1,44,3,44,588,
        8,44,1,44,5,44,591,8,44,10,44,12,44,594,9,44,1,44,3,44,597,8,44,
        1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,3,49,
        611,8,49,1,49,1,49,3,49,615,8,49,1,49,5,49,618,8,49,10,49,12,49,
        621,9,49,1,49,3,49,624,8,49,1,49,1,49,3,49,628,8,49,1,49,1,49,1,
        50,1,50,1,50,1,50,3,50,636,8,50,1,50,1,50,3,50,640,8,50,1,50,5,50,
        643,8,50,10,50,12,50,646,9,50,1,50,3,50,649,8,50,1,50,1,50,1,51,
        1,51,1,51,1,51,3,51,657,8,51,1,51,1,51,3,51,661,8,51,1,51,5,51,664,
        8,51,10,51,12,51,667,9,51,1,51,3,51,670,8,51,1,51,1,51,3,51,674,
        8,51,1,51,1,51,1,52,1,52,1,52,3,52,681,8,52,1,52,1,52,1,53,4,53,
        686,8,53,11,53,12,53,687,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,3,54,699,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,3,56,
        709,8,56,1,57,1,57,1,57,1,57,3,57,715,8,57,1,57,1,57,3,57,719,8,
        57,1,57,3,57,722,8,57,1,57,1,57,1,57,1,58,1,58,3,58,729,8,58,1,58,
        1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,61,
        1,61,1,61,1,62,1,62,3,62,749,8,62,1,62,1,62,1,63,1,63,1,63,1,64,
        1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,767,8,65,
        1,65,1,65,3,65,771,8,65,1,65,1,65,1,66,3,66,776,8,66,1,66,1,66,3,
        66,780,8,66,5,66,782,8,66,10,66,12,66,785,9,66,1,67,1,67,3,67,789,
        8,67,1,67,5,67,792,8,67,10,67,12,67,795,9,67,1,67,3,67,798,8,67,
        1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,822,8,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,5,69,881,8,69,10,69,12,69,884,9,69,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,3,70,893,8,70,1,70,1,70,1,70,1,70,1,70,
        3,70,900,8,70,3,70,902,8,70,1,71,1,71,1,71,5,71,907,8,71,10,71,12,
        71,910,9,71,1,72,1,72,1,72,5,72,915,8,72,10,72,12,72,918,9,72,1,
        72,3,72,921,8,72,1,73,1,73,1,73,1,73,1,74,1,74,3,74,929,8,74,1,74,
        1,74,3,74,933,8,74,3,74,935,8,74,1,75,1,75,1,75,1,75,1,75,1,76,1,
        76,5,76,944,8,76,10,76,12,76,947,9,76,1,76,1,76,1,77,1,77,1,77,1,
        77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
        77,3,77,968,8,77,1,78,1,78,3,78,972,8,78,1,79,1,79,1,79,1,79,3,79,
        978,8,79,1,79,1,79,3,79,982,8,79,1,79,1,79,5,79,986,8,79,10,79,12,
        79,989,9,79,1,79,3,79,992,8,79,1,80,1,80,1,80,1,80,3,80,998,8,80,
        1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,3,82,1009,8,82,1,83,
        1,83,1,83,5,83,1014,8,83,10,83,12,83,1017,9,83,1,84,1,84,1,84,1,
        85,1,85,1,85,1,86,1,86,1,86,5,86,1028,8,86,10,86,12,86,1031,9,86,
        1,87,1,87,1,87,1,87,1,87,1,87,3,87,1039,8,87,1,88,1,88,1,88,1,88,
        3,88,1045,8,88,1,88,1,88,3,88,1049,8,88,1,88,1,88,1,89,1,89,1,89,
        1,90,1,90,1,90,3,90,1059,8,90,1,90,1,90,1,90,3,90,1064,8,90,1,90,
        1,90,1,91,1,91,1,91,1,91,1,92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,
        3,94,1080,8,94,1,94,1,94,3,94,1084,8,94,5,94,1086,8,94,10,94,12,
        94,1089,9,94,1,94,1,94,1,94,1,94,1,94,5,94,1096,8,94,10,94,12,94,
        1099,9,94,3,94,1101,8,94,1,94,3,94,1104,8,94,1,95,1,95,3,95,1108,
        8,95,1,96,1,96,3,96,1112,8,96,1,97,1,97,1,97,1,687,2,64,138,98,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,0,22,1,0,4,10,1,0,104,105,1,0,18,20,3,0,120,120,124,
        124,126,127,1,0,39,41,4,0,120,120,125,125,128,128,130,130,1,0,44,
        46,1,0,47,48,1,0,49,50,1,0,51,52,3,0,35,35,62,65,106,110,1,0,66,
        67,1,0,69,70,1,0,71,72,2,0,13,13,75,76,1,0,77,78,1,0,6,9,1,0,81,
        82,2,0,10,10,87,96,3,0,113,114,116,116,132,132,1,0,113,114,3,0,14,
        14,41,41,131,131,1220,0,201,1,0,0,0,2,206,1,0,0,0,4,211,1,0,0,0,
        6,215,1,0,0,0,8,217,1,0,0,0,10,221,1,0,0,0,12,224,1,0,0,0,14,228,
        1,0,0,0,16,267,1,0,0,0,18,269,1,0,0,0,20,272,1,0,0,0,22,296,1,0,
        0,0,24,312,1,0,0,0,26,314,1,0,0,0,28,328,1,0,0,0,30,337,1,0,0,0,
        32,354,1,0,0,0,34,359,1,0,0,0,36,366,1,0,0,0,38,375,1,0,0,0,40,390,
        1,0,0,0,42,401,1,0,0,0,44,405,1,0,0,0,46,415,1,0,0,0,48,417,1,0,
        0,0,50,432,1,0,0,0,52,445,1,0,0,0,54,452,1,0,0,0,56,465,1,0,0,0,
        58,472,1,0,0,0,60,485,1,0,0,0,62,489,1,0,0,0,64,502,1,0,0,0,66,515,
        1,0,0,0,68,523,1,0,0,0,70,530,1,0,0,0,72,544,1,0,0,0,74,546,1,0,
        0,0,76,548,1,0,0,0,78,572,1,0,0,0,80,574,1,0,0,0,82,577,1,0,0,0,
        84,579,1,0,0,0,86,582,1,0,0,0,88,592,1,0,0,0,90,598,1,0,0,0,92,600,
        1,0,0,0,94,602,1,0,0,0,96,604,1,0,0,0,98,606,1,0,0,0,100,631,1,0,
        0,0,102,652,1,0,0,0,104,680,1,0,0,0,106,685,1,0,0,0,108,691,1,0,
        0,0,110,700,1,0,0,0,112,708,1,0,0,0,114,710,1,0,0,0,116,726,1,0,
        0,0,118,732,1,0,0,0,120,740,1,0,0,0,122,743,1,0,0,0,124,746,1,0,
        0,0,126,752,1,0,0,0,128,755,1,0,0,0,130,766,1,0,0,0,132,775,1,0,
        0,0,134,786,1,0,0,0,136,801,1,0,0,0,138,821,1,0,0,0,140,901,1,0,
        0,0,142,903,1,0,0,0,144,911,1,0,0,0,146,922,1,0,0,0,148,934,1,0,
        0,0,150,936,1,0,0,0,152,941,1,0,0,0,154,967,1,0,0,0,156,971,1,0,
        0,0,158,977,1,0,0,0,160,993,1,0,0,0,162,999,1,0,0,0,164,1008,1,0,
        0,0,166,1010,1,0,0,0,168,1018,1,0,0,0,170,1021,1,0,0,0,172,1024,
        1,0,0,0,174,1038,1,0,0,0,176,1040,1,0,0,0,178,1052,1,0,0,0,180,1055,
        1,0,0,0,182,1067,1,0,0,0,184,1071,1,0,0,0,186,1073,1,0,0,0,188,1103,
        1,0,0,0,190,1107,1,0,0,0,192,1109,1,0,0,0,194,1113,1,0,0,0,196,200,
        3,2,1,0,197,200,3,16,8,0,198,200,3,20,10,0,199,196,1,0,0,0,199,197,
        1,0,0,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,
        1,0,0,0,202,204,1,0,0,0,203,201,1,0,0,0,204,205,5,0,0,1,205,1,1,
        0,0,0,206,207,5,1,0,0,207,208,3,4,2,0,208,209,3,6,3,0,209,210,5,
        2,0,0,210,3,1,0,0,0,211,212,5,3,0,0,212,5,1,0,0,0,213,216,3,8,4,
        0,214,216,3,138,69,0,215,213,1,0,0,0,215,214,1,0,0,0,216,7,1,0,0,
        0,217,219,3,12,6,0,218,220,3,12,6,0,219,218,1,0,0,0,219,220,1,0,
        0,0,220,9,1,0,0,0,221,222,7,0,0,0,222,11,1,0,0,0,223,225,3,10,5,
        0,224,223,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,111,
        0,0,227,13,1,0,0,0,228,231,3,194,97,0,229,230,5,11,0,0,230,232,3,
        194,97,0,231,229,1,0,0,0,231,232,1,0,0,0,232,15,1,0,0,0,233,234,
        5,12,0,0,234,237,5,132,0,0,235,236,5,11,0,0,236,238,3,194,97,0,237,
        235,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,268,5,2,0,0,240,
        243,5,12,0,0,241,244,5,13,0,0,242,244,3,194,97,0,243,241,1,0,0,0,
        243,242,1,0,0,0,244,247,1,0,0,0,245,246,5,11,0,0,246,248,3,194,97,
        0,247,245,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,250,5,14,0,
        0,250,251,5,132,0,0,251,268,5,2,0,0,252,253,5,12,0,0,253,254,5,15,
        0,0,254,259,3,14,7,0,255,256,5,16,0,0,256,258,3,14,7,0,257,255,1,
        0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,1,
        0,0,0,261,259,1,0,0,0,262,263,5,17,0,0,263,264,5,14,0,0,264,265,
        5,132,0,0,265,266,5,2,0,0,266,268,1,0,0,0,267,233,1,0,0,0,267,240,
        1,0,0,0,267,252,1,0,0,0,268,17,1,0,0,0,269,270,7,1,0,0,270,19,1,
        0,0,0,271,273,3,18,9,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,1,
        0,0,0,274,275,7,2,0,0,275,285,3,194,97,0,276,277,5,21,0,0,277,282,
        3,22,11,0,278,279,5,16,0,0,279,281,3,22,11,0,280,278,1,0,0,0,281,
        284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,286,1,0,0,0,284,
        282,1,0,0,0,285,276,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,
        291,5,15,0,0,288,290,3,24,12,0,289,288,1,0,0,0,290,293,1,0,0,0,291,
        289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,
        295,5,17,0,0,295,21,1,0,0,0,296,302,3,66,33,0,297,299,5,22,0,0,298,
        300,3,142,71,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,
        303,5,23,0,0,302,297,1,0,0,0,302,303,1,0,0,0,303,23,1,0,0,0,304,
        313,3,26,13,0,305,313,3,28,14,0,306,313,3,30,15,0,307,313,3,32,16,
        0,308,313,3,34,17,0,309,313,3,38,19,0,310,313,3,44,22,0,311,313,
        3,48,24,0,312,304,1,0,0,0,312,305,1,0,0,0,312,306,1,0,0,0,312,307,
        1,0,0,0,312,308,1,0,0,0,312,309,1,0,0,0,312,310,1,0,0,0,312,311,
        1,0,0,0,313,25,1,0,0,0,314,318,3,64,32,0,315,317,7,3,0,0,316,315,
        1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,321,
        1,0,0,0,320,318,1,0,0,0,321,324,3,194,97,0,322,323,5,10,0,0,323,
        325,3,138,69,0,324,322,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,
        327,5,2,0,0,327,27,1,0,0,0,328,329,5,24,0,0,329,330,3,194,97,0,330,
        333,5,25,0,0,331,334,5,13,0,0,332,334,3,64,32,0,333,331,1,0,0,0,
        333,332,1,0,0,0,334,335,1,0,0,0,335,336,5,2,0,0,336,29,1,0,0,0,337,
        338,5,26,0,0,338,339,3,194,97,0,339,350,5,15,0,0,340,341,3,62,31,
        0,341,347,5,2,0,0,342,343,3,62,31,0,343,344,5,2,0,0,344,346,1,0,
        0,0,345,342,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,
        0,0,348,351,1,0,0,0,349,347,1,0,0,0,350,340,1,0,0,0,350,351,1,0,
        0,0,351,352,1,0,0,0,352,353,5,17,0,0,353,31,1,0,0,0,354,355,5,27,
        0,0,355,356,3,50,25,0,356,357,3,42,21,0,357,358,3,76,38,0,358,33,
        1,0,0,0,359,360,5,28,0,0,360,362,3,194,97,0,361,363,3,50,25,0,362,
        361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,3,76,38,0,365,
        35,1,0,0,0,366,372,3,194,97,0,367,369,5,22,0,0,368,370,3,142,71,
        0,369,368,1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,373,5,23,0,
        0,372,367,1,0,0,0,372,373,1,0,0,0,373,37,1,0,0,0,374,376,3,18,9,
        0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,379,5,29,0,
        0,378,380,3,194,97,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,
        0,0,381,382,3,50,25,0,382,384,3,42,21,0,383,385,3,40,20,0,384,383,
        1,0,0,0,384,385,1,0,0,0,385,388,1,0,0,0,386,389,5,2,0,0,387,389,
        3,76,38,0,388,386,1,0,0,0,388,387,1,0,0,0,389,39,1,0,0,0,390,391,
        5,30,0,0,391,392,3,50,25,0,392,41,1,0,0,0,393,400,3,36,18,0,394,
        400,3,74,37,0,395,400,5,122,0,0,396,400,5,127,0,0,397,400,5,124,
        0,0,398,400,5,126,0,0,399,393,1,0,0,0,399,394,1,0,0,0,399,395,1,
        0,0,0,399,396,1,0,0,0,399,397,1,0,0,0,399,398,1,0,0,0,400,403,1,
        0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,43,1,0,0,0,403,401,1,0,
        0,0,404,406,3,18,9,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,0,
        0,0,407,408,5,31,0,0,408,409,3,194,97,0,409,411,3,54,27,0,410,412,
        5,118,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,414,
        5,2,0,0,414,45,1,0,0,0,415,416,3,194,97,0,416,47,1,0,0,0,417,418,
        5,32,0,0,418,419,3,194,97,0,419,421,5,15,0,0,420,422,3,46,23,0,421,
        420,1,0,0,0,421,422,1,0,0,0,422,427,1,0,0,0,423,424,5,16,0,0,424,
        426,3,46,23,0,425,423,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,
        428,1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,430,431,5,17,0,0,431,
        49,1,0,0,0,432,441,5,22,0,0,433,438,3,52,26,0,434,435,5,16,0,0,435,
        437,3,52,26,0,436,434,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,
        439,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,441,433,1,0,0,0,441,
        442,1,0,0,0,442,443,1,0,0,0,443,444,5,23,0,0,444,51,1,0,0,0,445,
        447,3,64,32,0,446,448,3,72,36,0,447,446,1,0,0,0,447,448,1,0,0,0,
        448,450,1,0,0,0,449,451,3,194,97,0,450,449,1,0,0,0,450,451,1,0,0,
        0,451,53,1,0,0,0,452,461,5,22,0,0,453,458,3,56,28,0,454,455,5,16,
        0,0,455,457,3,56,28,0,456,454,1,0,0,0,457,460,1,0,0,0,458,456,1,
        0,0,0,458,459,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,461,453,1,
        0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,23,0,0,464,55,1,
        0,0,0,465,467,3,64,32,0,466,468,5,123,0,0,467,466,1,0,0,0,467,468,
        1,0,0,0,468,470,1,0,0,0,469,471,3,194,97,0,470,469,1,0,0,0,470,471,
        1,0,0,0,471,57,1,0,0,0,472,481,5,22,0,0,473,478,3,60,30,0,474,475,
        5,16,0,0,475,477,3,60,30,0,476,474,1,0,0,0,477,480,1,0,0,0,478,476,
        1,0,0,0,478,479,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,481,473,
        1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,484,5,23,0,0,484,59,
        1,0,0,0,485,487,3,64,32,0,486,488,3,72,36,0,487,486,1,0,0,0,487,
        488,1,0,0,0,488,61,1,0,0,0,489,491,3,64,32,0,490,492,3,72,36,0,491,
        490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,494,3,194,97,0,494,
        63,1,0,0,0,495,496,6,32,-1,0,496,503,3,136,68,0,497,503,3,66,33,
        0,498,503,3,68,34,0,499,503,3,70,35,0,500,501,5,35,0,0,501,503,5,
        125,0,0,502,495,1,0,0,0,502,497,1,0,0,0,502,498,1,0,0,0,502,499,
        1,0,0,0,502,500,1,0,0,0,503,512,1,0,0,0,504,505,10,3,0,0,505,507,
        5,33,0,0,506,508,3,138,69,0,507,506,1,0,0,0,507,508,1,0,0,0,508,
        509,1,0,0,0,509,511,5,34,0,0,510,504,1,0,0,0,511,514,1,0,0,0,512,
        510,1,0,0,0,512,513,1,0,0,0,513,65,1,0,0,0,514,512,1,0,0,0,515,520,
        3,194,97,0,516,517,5,36,0,0,517,519,3,194,97,0,518,516,1,0,0,0,519,
        522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,67,1,0,0,0,522,520,
        1,0,0,0,523,524,5,37,0,0,524,525,5,22,0,0,525,526,3,136,68,0,526,
        527,5,38,0,0,527,528,3,64,32,0,528,529,5,23,0,0,529,69,1,0,0,0,530,
        531,5,29,0,0,531,537,3,58,29,0,532,536,5,124,0,0,533,536,5,122,0,
        0,534,536,3,74,37,0,535,532,1,0,0,0,535,533,1,0,0,0,535,534,1,0,
        0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,542,1,0,
        0,0,539,537,1,0,0,0,540,541,5,30,0,0,541,543,3,58,29,0,542,540,1,
        0,0,0,542,543,1,0,0,0,543,71,1,0,0,0,544,545,7,4,0,0,545,73,1,0,
        0,0,546,547,7,5,0,0,547,75,1,0,0,0,548,552,5,15,0,0,549,551,3,78,
        39,0,550,549,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,
        0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,556,5,17,0,0,556,77,1,0,
        0,0,557,573,3,104,52,0,558,573,3,106,53,0,559,573,3,108,54,0,560,
        573,3,110,55,0,561,573,3,114,57,0,562,573,3,76,38,0,563,573,3,116,
        58,0,564,573,3,118,59,0,565,573,3,120,60,0,566,573,3,122,61,0,567,
        573,3,124,62,0,568,573,3,126,63,0,569,573,3,128,64,0,570,573,3,112,
        56,0,571,573,3,104,52,0,572,557,1,0,0,0,572,558,1,0,0,0,572,559,
        1,0,0,0,572,560,1,0,0,0,572,561,1,0,0,0,572,562,1,0,0,0,572,563,
        1,0,0,0,572,564,1,0,0,0,572,565,1,0,0,0,572,566,1,0,0,0,572,567,
        1,0,0,0,572,568,1,0,0,0,572,569,1,0,0,0,572,570,1,0,0,0,572,571,
        1,0,0,0,573,79,1,0,0,0,574,575,3,138,69,0,575,576,5,2,0,0,576,81,
        1,0,0,0,577,578,5,42,0,0,578,83,1,0,0,0,579,580,5,43,0,0,580,85,
        1,0,0,0,581,583,3,84,42,0,582,581,1,0,0,0,582,583,1,0,0,0,583,584,
        1,0,0,0,584,585,3,194,97,0,585,87,1,0,0,0,586,588,3,86,43,0,587,
        586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,591,5,16,0,0,590,
        587,1,0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,
        596,1,0,0,0,594,592,1,0,0,0,595,597,3,86,43,0,596,595,1,0,0,0,596,
        597,1,0,0,0,597,89,1,0,0,0,598,599,7,6,0,0,599,91,1,0,0,0,600,601,
        7,7,0,0,601,93,1,0,0,0,602,603,7,8,0,0,603,95,1,0,0,0,604,605,7,
        9,0,0,605,97,1,0,0,0,606,607,3,82,41,0,607,610,3,92,46,0,608,609,
        5,53,0,0,609,611,3,90,45,0,610,608,1,0,0,0,610,611,1,0,0,0,611,612,
        1,0,0,0,612,619,5,22,0,0,613,615,3,194,97,0,614,613,1,0,0,0,614,
        615,1,0,0,0,615,616,1,0,0,0,616,618,5,16,0,0,617,614,1,0,0,0,618,
        621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,623,1,0,0,0,621,
        619,1,0,0,0,622,624,3,194,97,0,623,622,1,0,0,0,623,624,1,0,0,0,624,
        625,1,0,0,0,625,627,5,16,0,0,626,628,3,140,70,0,627,626,1,0,0,0,
        627,628,1,0,0,0,628,629,1,0,0,0,629,630,5,23,0,0,630,99,1,0,0,0,
        631,632,3,82,41,0,632,635,3,94,47,0,633,634,5,53,0,0,634,636,3,90,
        45,0,635,633,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,644,5,22,
        0,0,638,640,3,194,97,0,639,638,1,0,0,0,639,640,1,0,0,0,640,641,1,
        0,0,0,641,643,5,16,0,0,642,639,1,0,0,0,643,646,1,0,0,0,644,642,1,
        0,0,0,644,645,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,647,649,3,
        194,97,0,648,647,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,651,
        5,23,0,0,651,101,1,0,0,0,652,653,3,82,41,0,653,656,3,96,48,0,654,
        655,5,53,0,0,655,657,3,90,45,0,656,654,1,0,0,0,656,657,1,0,0,0,657,
        658,1,0,0,0,658,665,5,22,0,0,659,661,3,194,97,0,660,659,1,0,0,0,
        660,661,1,0,0,0,661,662,1,0,0,0,662,664,5,16,0,0,663,660,1,0,0,0,
        664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,669,1,0,0,0,
        667,665,1,0,0,0,668,670,3,194,97,0,669,668,1,0,0,0,669,670,1,0,0,
        0,670,671,1,0,0,0,671,673,5,16,0,0,672,674,3,140,70,0,673,672,1,
        0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,5,23,0,0,676,103,1,
        0,0,0,677,681,3,98,49,0,678,681,3,100,50,0,679,681,3,102,51,0,680,
        677,1,0,0,0,680,678,1,0,0,0,680,679,1,0,0,0,681,682,1,0,0,0,682,
        683,5,2,0,0,683,105,1,0,0,0,684,686,9,0,0,0,685,684,1,0,0,0,686,
        687,1,0,0,0,687,688,1,0,0,0,687,685,1,0,0,0,688,689,1,0,0,0,689,
        690,5,2,0,0,690,107,1,0,0,0,691,692,5,54,0,0,692,693,5,22,0,0,693,
        694,3,138,69,0,694,695,5,23,0,0,695,698,3,78,39,0,696,697,5,55,0,
        0,697,699,3,78,39,0,698,696,1,0,0,0,698,699,1,0,0,0,699,109,1,0,
        0,0,700,701,5,56,0,0,701,702,5,22,0,0,702,703,3,138,69,0,703,704,
        5,23,0,0,704,705,3,78,39,0,705,111,1,0,0,0,706,709,3,130,65,0,707,
        709,3,80,40,0,708,706,1,0,0,0,708,707,1,0,0,0,709,113,1,0,0,0,710,
        711,5,25,0,0,711,714,5,22,0,0,712,715,3,112,56,0,713,715,5,2,0,0,
        714,712,1,0,0,0,714,713,1,0,0,0,715,718,1,0,0,0,716,719,3,80,40,
        0,717,719,5,2,0,0,718,716,1,0,0,0,718,717,1,0,0,0,719,721,1,0,0,
        0,720,722,3,138,69,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,
        0,0,723,724,5,23,0,0,724,725,3,78,39,0,725,115,1,0,0,0,726,728,5,
        57,0,0,727,729,5,132,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,
        1,0,0,0,730,731,3,152,76,0,731,117,1,0,0,0,732,733,5,58,0,0,733,
        734,3,78,39,0,734,735,5,56,0,0,735,736,5,22,0,0,736,737,3,138,69,
        0,737,738,5,23,0,0,738,739,5,2,0,0,739,119,1,0,0,0,740,741,5,121,
        0,0,741,742,5,2,0,0,742,121,1,0,0,0,743,744,5,119,0,0,744,745,5,
        2,0,0,745,123,1,0,0,0,746,748,5,59,0,0,747,749,3,138,69,0,748,747,
        1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,5,2,0,0,751,125,
        1,0,0,0,752,753,5,60,0,0,753,754,5,2,0,0,754,127,1,0,0,0,755,756,
        5,61,0,0,756,757,3,150,75,0,757,758,5,2,0,0,758,129,1,0,0,0,759,
        760,5,62,0,0,760,767,3,134,67,0,761,767,3,62,31,0,762,763,5,22,0,
        0,763,764,3,132,66,0,764,765,5,23,0,0,765,767,1,0,0,0,766,759,1,
        0,0,0,766,761,1,0,0,0,766,762,1,0,0,0,767,770,1,0,0,0,768,769,5,
        10,0,0,769,771,3,138,69,0,770,768,1,0,0,0,770,771,1,0,0,0,771,772,
        1,0,0,0,772,773,5,2,0,0,773,131,1,0,0,0,774,776,3,62,31,0,775,774,
        1,0,0,0,775,776,1,0,0,0,776,783,1,0,0,0,777,779,5,16,0,0,778,780,
        3,62,31,0,779,778,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,777,
        1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,133,
        1,0,0,0,785,783,1,0,0,0,786,793,5,22,0,0,787,789,3,194,97,0,788,
        787,1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,792,5,16,0,0,791,
        788,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,793,794,1,0,0,0,794,
        797,1,0,0,0,795,793,1,0,0,0,796,798,3,194,97,0,797,796,1,0,0,0,797,
        798,1,0,0,0,798,799,1,0,0,0,799,800,5,23,0,0,800,135,1,0,0,0,801,
        802,7,10,0,0,802,137,1,0,0,0,803,804,6,69,-1,0,804,805,5,68,0,0,
        805,822,3,64,32,0,806,807,5,22,0,0,807,808,3,138,69,0,808,809,5,
        23,0,0,809,822,1,0,0,0,810,811,7,11,0,0,811,822,3,138,69,19,812,
        813,7,12,0,0,813,822,3,138,69,18,814,815,7,13,0,0,815,822,3,138,
        69,17,816,817,5,73,0,0,817,822,3,138,69,16,818,819,5,5,0,0,819,822,
        3,138,69,15,820,822,3,140,70,0,821,803,1,0,0,0,821,806,1,0,0,0,821,
        810,1,0,0,0,821,812,1,0,0,0,821,814,1,0,0,0,821,816,1,0,0,0,821,
        818,1,0,0,0,821,820,1,0,0,0,822,882,1,0,0,0,823,824,10,14,0,0,824,
        825,5,74,0,0,825,881,3,138,69,15,826,827,10,13,0,0,827,828,7,14,
        0,0,828,881,3,138,69,14,829,830,10,12,0,0,830,831,7,12,0,0,831,881,
        3,138,69,13,832,833,10,11,0,0,833,834,7,15,0,0,834,881,3,138,69,
        12,835,836,10,10,0,0,836,837,5,79,0,0,837,881,3,138,69,11,838,839,
        10,9,0,0,839,840,5,4,0,0,840,881,3,138,69,10,841,842,10,8,0,0,842,
        843,5,80,0,0,843,881,3,138,69,9,844,845,10,7,0,0,845,846,7,16,0,
        0,846,881,3,138,69,8,847,848,10,6,0,0,848,849,7,17,0,0,849,881,3,
        138,69,7,850,851,10,5,0,0,851,852,5,83,0,0,852,881,3,138,69,6,853,
        854,10,4,0,0,854,855,5,84,0,0,855,881,3,138,69,5,856,857,10,3,0,
        0,857,858,5,85,0,0,858,859,3,138,69,0,859,860,5,86,0,0,860,861,3,
        138,69,4,861,881,1,0,0,0,862,863,10,2,0,0,863,864,7,18,0,0,864,881,
        3,138,69,3,865,866,10,25,0,0,866,881,7,11,0,0,867,868,10,23,0,0,
        868,869,5,33,0,0,869,870,3,138,69,0,870,871,5,34,0,0,871,881,1,0,
        0,0,872,873,10,22,0,0,873,874,5,22,0,0,874,875,3,148,74,0,875,876,
        5,23,0,0,876,881,1,0,0,0,877,878,10,21,0,0,878,879,5,36,0,0,879,
        881,3,194,97,0,880,823,1,0,0,0,880,826,1,0,0,0,880,829,1,0,0,0,880,
        832,1,0,0,0,880,835,1,0,0,0,880,838,1,0,0,0,880,841,1,0,0,0,880,
        844,1,0,0,0,880,847,1,0,0,0,880,850,1,0,0,0,880,853,1,0,0,0,880,
        856,1,0,0,0,880,862,1,0,0,0,880,865,1,0,0,0,880,867,1,0,0,0,880,
        872,1,0,0,0,880,877,1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,0,882,
        883,1,0,0,0,883,139,1,0,0,0,884,882,1,0,0,0,885,902,5,112,0,0,886,
        902,3,192,96,0,887,902,5,116,0,0,888,902,5,132,0,0,889,892,3,194,
        97,0,890,891,5,33,0,0,891,893,5,34,0,0,892,890,1,0,0,0,892,893,1,
        0,0,0,893,902,1,0,0,0,894,902,5,129,0,0,895,902,3,188,94,0,896,899,
        3,190,95,0,897,898,5,33,0,0,898,900,5,34,0,0,899,897,1,0,0,0,899,
        900,1,0,0,0,900,902,1,0,0,0,901,885,1,0,0,0,901,886,1,0,0,0,901,
        887,1,0,0,0,901,888,1,0,0,0,901,889,1,0,0,0,901,894,1,0,0,0,901,
        895,1,0,0,0,901,896,1,0,0,0,902,141,1,0,0,0,903,908,3,138,69,0,904,
        905,5,16,0,0,905,907,3,138,69,0,906,904,1,0,0,0,907,910,1,0,0,0,
        908,906,1,0,0,0,908,909,1,0,0,0,909,143,1,0,0,0,910,908,1,0,0,0,
        911,916,3,146,73,0,912,913,5,16,0,0,913,915,3,146,73,0,914,912,1,
        0,0,0,915,918,1,0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,920,1,
        0,0,0,918,916,1,0,0,0,919,921,5,16,0,0,920,919,1,0,0,0,920,921,1,
        0,0,0,921,145,1,0,0,0,922,923,3,194,97,0,923,924,5,86,0,0,924,925,
        3,138,69,0,925,147,1,0,0,0,926,928,5,15,0,0,927,929,3,144,72,0,928,
        927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,935,5,17,0,0,931,
        933,3,142,71,0,932,931,1,0,0,0,932,933,1,0,0,0,933,935,1,0,0,0,934,
        926,1,0,0,0,934,932,1,0,0,0,935,149,1,0,0,0,936,937,3,138,69,0,937,
        938,5,22,0,0,938,939,3,148,74,0,939,940,5,23,0,0,940,151,1,0,0,0,
        941,945,5,15,0,0,942,944,3,154,77,0,943,942,1,0,0,0,944,947,1,0,
        0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,948,1,0,0,0,947,945,1,0,
        0,0,948,949,5,17,0,0,949,153,1,0,0,0,950,968,3,194,97,0,951,968,
        3,152,76,0,952,968,3,156,78,0,953,968,3,160,80,0,954,968,3,162,81,
        0,955,968,3,168,84,0,956,968,3,170,85,0,957,968,3,172,86,0,958,968,
        3,176,88,0,959,968,3,180,90,0,960,968,3,182,91,0,961,968,5,119,0,
        0,962,968,5,121,0,0,963,968,3,186,93,0,964,968,3,192,96,0,965,968,
        5,132,0,0,966,968,5,116,0,0,967,950,1,0,0,0,967,951,1,0,0,0,967,
        952,1,0,0,0,967,953,1,0,0,0,967,954,1,0,0,0,967,955,1,0,0,0,967,
        956,1,0,0,0,967,957,1,0,0,0,967,958,1,0,0,0,967,959,1,0,0,0,967,
        960,1,0,0,0,967,961,1,0,0,0,967,962,1,0,0,0,967,963,1,0,0,0,967,
        964,1,0,0,0,967,965,1,0,0,0,967,966,1,0,0,0,968,155,1,0,0,0,969,
        972,3,158,79,0,970,972,3,184,92,0,971,969,1,0,0,0,971,970,1,0,0,
        0,972,157,1,0,0,0,973,978,5,59,0,0,974,978,5,35,0,0,975,978,5,65,
        0,0,976,978,3,194,97,0,977,973,1,0,0,0,977,974,1,0,0,0,977,975,1,
        0,0,0,977,976,1,0,0,0,978,991,1,0,0,0,979,981,5,22,0,0,980,982,3,
        156,78,0,981,980,1,0,0,0,981,982,1,0,0,0,982,987,1,0,0,0,983,984,
        5,16,0,0,984,986,3,156,78,0,985,983,1,0,0,0,986,989,1,0,0,0,987,
        985,1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,987,1,0,0,0,990,
        992,5,23,0,0,991,979,1,0,0,0,991,992,1,0,0,0,992,159,1,0,0,0,993,
        994,5,97,0,0,994,997,3,164,82,0,995,996,5,98,0,0,996,998,3,156,78,
        0,997,995,1,0,0,0,997,998,1,0,0,0,998,161,1,0,0,0,999,1000,3,164,
        82,0,1000,1001,5,98,0,0,1001,1002,3,156,78,0,1002,163,1,0,0,0,1003,
        1009,3,194,97,0,1004,1005,5,22,0,0,1005,1006,3,166,83,0,1006,1007,
        5,23,0,0,1007,1009,1,0,0,0,1008,1003,1,0,0,0,1008,1004,1,0,0,0,1009,
        165,1,0,0,0,1010,1015,3,194,97,0,1011,1012,5,16,0,0,1012,1014,3,
        194,97,0,1013,1011,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,
        1016,1,0,0,0,1016,167,1,0,0,0,1017,1015,1,0,0,0,1018,1019,5,99,0,
        0,1019,1020,3,194,97,0,1020,169,1,0,0,0,1021,1022,3,194,97,0,1022,
        1023,5,86,0,0,1023,171,1,0,0,0,1024,1025,5,100,0,0,1025,1029,3,156,
        78,0,1026,1028,3,174,87,0,1027,1026,1,0,0,0,1028,1031,1,0,0,0,1029,
        1027,1,0,0,0,1029,1030,1,0,0,0,1030,173,1,0,0,0,1031,1029,1,0,0,
        0,1032,1033,5,101,0,0,1033,1034,3,184,92,0,1034,1035,3,152,76,0,
        1035,1039,1,0,0,0,1036,1037,5,102,0,0,1037,1039,3,152,76,0,1038,
        1032,1,0,0,0,1038,1036,1,0,0,0,1039,175,1,0,0,0,1040,1041,5,29,0,
        0,1041,1042,3,194,97,0,1042,1044,5,22,0,0,1043,1045,3,166,83,0,1044,
        1043,1,0,0,0,1044,1045,1,0,0,0,1045,1046,1,0,0,0,1046,1048,5,23,
        0,0,1047,1049,3,178,89,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,
        1050,1,0,0,0,1050,1051,3,152,76,0,1051,177,1,0,0,0,1052,1053,5,103,
        0,0,1053,1054,3,166,83,0,1054,179,1,0,0,0,1055,1058,5,25,0,0,1056,
        1059,3,152,76,0,1057,1059,3,156,78,0,1058,1056,1,0,0,0,1058,1057,
        1,0,0,0,1059,1060,1,0,0,0,1060,1063,3,156,78,0,1061,1064,3,152,76,
        0,1062,1064,3,156,78,0,1063,1061,1,0,0,0,1063,1062,1,0,0,0,1064,
        1065,1,0,0,0,1065,1066,3,152,76,0,1066,181,1,0,0,0,1067,1068,5,54,
        0,0,1068,1069,3,156,78,0,1069,1070,3,152,76,0,1070,183,1,0,0,0,1071,
        1072,7,19,0,0,1072,185,1,0,0,0,1073,1074,5,57,0,0,1074,1075,3,194,
        97,0,1075,1076,3,152,76,0,1076,187,1,0,0,0,1077,1079,5,22,0,0,1078,
        1080,3,138,69,0,1079,1078,1,0,0,0,1079,1080,1,0,0,0,1080,1087,1,
        0,0,0,1081,1083,5,16,0,0,1082,1084,3,138,69,0,1083,1082,1,0,0,0,
        1083,1084,1,0,0,0,1084,1086,1,0,0,0,1085,1081,1,0,0,0,1086,1089,
        1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1090,1,0,0,0,1089,
        1087,1,0,0,0,1090,1104,5,23,0,0,1091,1100,5,33,0,0,1092,1097,3,138,
        69,0,1093,1094,5,16,0,0,1094,1096,3,138,69,0,1095,1093,1,0,0,0,1096,
        1099,1,0,0,0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1101,1,0,0,
        0,1099,1097,1,0,0,0,1100,1092,1,0,0,0,1100,1101,1,0,0,0,1101,1102,
        1,0,0,0,1102,1104,5,34,0,0,1103,1077,1,0,0,0,1103,1091,1,0,0,0,1104,
        189,1,0,0,0,1105,1108,3,136,68,0,1106,1108,3,66,33,0,1107,1105,1,
        0,0,0,1107,1106,1,0,0,0,1108,191,1,0,0,0,1109,1111,7,20,0,0,1110,
        1112,5,115,0,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,193,1,0,
        0,0,1113,1114,7,21,0,0,1114,195,1,0,0,0,128,199,201,215,219,224,
        231,237,243,247,259,267,272,282,285,291,299,302,312,318,324,333,
        347,350,362,369,372,375,379,384,388,399,401,405,411,421,427,438,
        441,447,450,458,461,467,470,478,481,487,491,502,507,512,520,535,
        537,542,552,572,582,587,592,596,610,614,619,623,627,635,639,644,
        648,656,660,665,669,673,680,687,698,708,714,718,721,728,748,766,
        770,775,779,783,788,793,797,821,880,882,892,899,901,908,916,920,
        928,932,934,945,967,971,977,981,987,991,997,1008,1015,1029,1038,
        1044,1048,1058,1063,1079,1083,1087,1097,1100,1103,1107,1111
    ]

class CryptlangParser ( Parser ):

    grammarFileName = "Cryptlang.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'Cryptlang'", "'^'", 
                     "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                     "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'using'", 
                     "'for'", "'struct'", "'constructor'", "'modifier'", 
                     "'function'", "'returns'", "'event'", "'enum'", "'['", 
                     "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", 
                     "'storage'", "'calldata'", "'@'", "'#'", "'SHA3'", 
                     "'SHA2'", "'RIPEMD'", "'ECDSA'", "'BLS'", "'Pedersen'", 
                     "'Merkle'", "'Groth16'", "'PLONK'", "'with'", "'if'", 
                     "'else'", "'while'", "'assembly'", "'do'", "'return'", 
                     "'throw'", "'emit'", "'var'", "'bool'", "'string'", 
                     "'byte'", "'++'", "'--'", "'new'", "'+'", "'-'", "'after'", 
                     "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", 
                     "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", 
                     "':'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", 
                     "'switch'", "'case'", "'default'", "'->'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'anonymous'", "'break'", "'constant'", 
                     "'continue'", "'external'", "'indexed'", "'internal'", 
                     "'payable'", "'private'", "'public'", "'pure'", "'type'", 
                     "'view'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "NatSpecSingleLine", "NatSpecMultiLine", "Int", "Uint", 
                      "Byte", "Fixed", "Ufixed", "VersionLiteral", "BooleanLiteral", 
                      "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", 
                      "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", 
                      "ConstantKeyword", "ContinueKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "PureKeyword", 
                      "TypeKeyword", "ViewKeyword", "Identifier", "StringLiteral", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_natSpec = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_usingForDeclaration = 14
    RULE_structDefinition = 15
    RULE_constructorDefinition = 16
    RULE_modifierDefinition = 17
    RULE_modifierInvocation = 18
    RULE_functionDefinition = 19
    RULE_returnParameters = 20
    RULE_modifierList = 21
    RULE_eventDefinition = 22
    RULE_enumValue = 23
    RULE_enumDefinition = 24
    RULE_parameterList = 25
    RULE_parameter = 26
    RULE_eventParameterList = 27
    RULE_eventParameter = 28
    RULE_functionTypeParameterList = 29
    RULE_functionTypeParameter = 30
    RULE_variableDeclaration = 31
    RULE_typeName = 32
    RULE_userDefinedTypeName = 33
    RULE_mapping = 34
    RULE_functionTypeName = 35
    RULE_storageLocation = 36
    RULE_stateMutability = 37
    RULE_block = 38
    RULE_statement = 39
    RULE_expressionStatement = 40
    RULE_statementSymbol = 41
    RULE_privateSymbol = 42
    RULE_privateIdentifier = 43
    RULE_privateIdentifierList = 44
    RULE_hashMethod = 45
    RULE_signatureMethod = 46
    RULE_commitmentMethod = 47
    RULE_proofMethod = 48
    RULE_signatureStatement = 49
    RULE_commitmentStatement = 50
    RULE_proofStatement = 51
    RULE_taskStatement = 52
    RULE_otherStatement = 53
    RULE_ifStatement = 54
    RULE_whileStatement = 55
    RULE_simpleStatement = 56
    RULE_forStatement = 57
    RULE_inlineAssemblyStatement = 58
    RULE_doWhileStatement = 59
    RULE_continueStatement = 60
    RULE_breakStatement = 61
    RULE_returnStatement = 62
    RULE_throwStatement = 63
    RULE_emitStatement = 64
    RULE_variableDeclarationStatement = 65
    RULE_variableDeclarationList = 66
    RULE_identifierList = 67
    RULE_elementaryTypeName = 68
    RULE_expression = 69
    RULE_primaryExpression = 70
    RULE_expressionList = 71
    RULE_nameValueList = 72
    RULE_nameValue = 73
    RULE_functionCallArguments = 74
    RULE_functionCall = 75
    RULE_assemblyBlock = 76
    RULE_assemblyItem = 77
    RULE_assemblyExpression = 78
    RULE_assemblyCall = 79
    RULE_assemblyLocalDefinition = 80
    RULE_assemblyAssignment = 81
    RULE_assemblyIdentifierOrList = 82
    RULE_assemblyIdentifierList = 83
    RULE_assemblyStackAssignment = 84
    RULE_labelDefinition = 85
    RULE_assemblySwitch = 86
    RULE_assemblyCase = 87
    RULE_assemblyFunctionDefinition = 88
    RULE_assemblyFunctionReturns = 89
    RULE_assemblyFor = 90
    RULE_assemblyIf = 91
    RULE_assemblyLiteral = 92
    RULE_subAssembly = 93
    RULE_tupleExpression = 94
    RULE_typeNameExpression = 95
    RULE_numberLiteral = 96
    RULE_identifier = 97

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "natSpec", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "constructorDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mapping", "functionTypeName", "storageLocation", "stateMutability", 
                   "block", "statement", "expressionStatement", "statementSymbol", 
                   "privateSymbol", "privateIdentifier", "privateIdentifierList", 
                   "hashMethod", "signatureMethod", "commitmentMethod", 
                   "proofMethod", "signatureStatement", "commitmentStatement", 
                   "proofStatement", "taskStatement", "otherStatement", 
                   "ifStatement", "whileStatement", "simpleStatement", "forStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    NatSpecSingleLine=104
    NatSpecMultiLine=105
    Int=106
    Uint=107
    Byte=108
    Fixed=109
    Ufixed=110
    VersionLiteral=111
    BooleanLiteral=112
    DecimalNumber=113
    HexNumber=114
    NumberUnit=115
    HexLiteral=116
    ReservedKeyword=117
    AnonymousKeyword=118
    BreakKeyword=119
    ConstantKeyword=120
    ContinueKeyword=121
    ExternalKeyword=122
    IndexedKeyword=123
    InternalKeyword=124
    PayableKeyword=125
    PrivateKeyword=126
    PublicKeyword=127
    PureKeyword=128
    TypeKeyword=129
    ViewKeyword=130
    Identifier=131
    StringLiteral=132
    WS=133
    COMMENT=134
    LINE_COMMENT=135

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CryptlangParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = CryptlangParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1839106) != 0) or _la==104 or _la==105:
                self.state = 199
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 196
                    self.pragmaDirective()
                    pass
                elif token in [12]:
                    self.state = 197
                    self.importDirective()
                    pass
                elif token in [18, 19, 20, 104, 105]:
                    self.state = 198
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 204
            self.match(CryptlangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(CryptlangParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(CryptlangParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = CryptlangParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(CryptlangParser.T__0)
            self.state = 207
            self.pragmaName()
            self.state = 208
            self.pragmaValue()
            self.state = 209
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = CryptlangParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(CryptlangParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(CryptlangParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = CryptlangParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = CryptlangParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.versionConstraint()
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0) or _la==111:
                self.state = 218
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = CryptlangParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(CryptlangParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(CryptlangParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = CryptlangParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0):
                self.state = 223
                self.versionOperator()


            self.state = 226
            self.match(CryptlangParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = CryptlangParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.identifier()
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 229
                self.match(CryptlangParser.T__10)
                self.state = 230
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = CryptlangParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 233
                self.match(CryptlangParser.T__11)
                self.state = 234
                self.match(CryptlangParser.StringLiteral)
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 235
                    self.match(CryptlangParser.T__10)
                    self.state = 236
                    self.identifier()


                self.state = 239
                self.match(CryptlangParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 240
                self.match(CryptlangParser.T__11)
                self.state = 243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 241
                    self.match(CryptlangParser.T__12)
                    pass
                elif token in [14, 41, 131]:
                    self.state = 242
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 245
                    self.match(CryptlangParser.T__10)
                    self.state = 246
                    self.identifier()


                self.state = 249
                self.match(CryptlangParser.T__13)
                self.state = 250
                self.match(CryptlangParser.StringLiteral)
                self.state = 251
                self.match(CryptlangParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 252
                self.match(CryptlangParser.T__11)
                self.state = 253
                self.match(CryptlangParser.T__14)
                self.state = 254
                self.importDeclaration()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 255
                    self.match(CryptlangParser.T__15)
                    self.state = 256
                    self.importDeclaration()
                    self.state = 261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 262
                self.match(CryptlangParser.T__16)
                self.state = 263
                self.match(CryptlangParser.T__13)
                self.state = 264
                self.match(CryptlangParser.StringLiteral)
                self.state = 265
                self.match(CryptlangParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NatSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NatSpecSingleLine(self):
            return self.getToken(CryptlangParser.NatSpecSingleLine, 0)

        def NatSpecMultiLine(self):
            return self.getToken(CryptlangParser.NatSpecMultiLine, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_natSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatSpec" ):
                listener.enterNatSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatSpec" ):
                listener.exitNatSpec(self)




    def natSpec(self):

        localctx = CryptlangParser.NatSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_natSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            _la = self._input.LA(1)
            if not(_la==104 or _la==105):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ContractPartContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = CryptlangParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==105:
                self.state = 271
                self.natSpec()


            self.state = 274
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 275
            self.identifier()
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 276
                self.match(CryptlangParser.T__20)
                self.state = 277
                self.inheritanceSpecifier()
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 278
                    self.match(CryptlangParser.T__15)
                    self.state = 279
                    self.inheritanceSpecifier()
                    self.state = 284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 287
            self.match(CryptlangParser.T__14)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124795819009) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 134217855) != 0):
                self.state = 288
                self.contractPart()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 294
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = CryptlangParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.userDefinedTypeName()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 297
                self.match(CryptlangParser.T__21)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                    self.state = 298
                    self.expressionList()


                self.state = 301
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.StructDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = CryptlangParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 307
                self.constructorDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 308
                self.modifierDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 309
                self.functionDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 310
                self.eventDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 311
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PublicKeyword)
            else:
                return self.getToken(CryptlangParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PrivateKeyword)
            else:
                return self.getToken(CryptlangParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ConstantKeyword)
            else:
                return self.getToken(CryptlangParser.ConstantKeyword, i)

        def getRuleIndex(self):
            return CryptlangParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = CryptlangParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.typeName(0)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 209) != 0):
                self.state = 315
                _la = self._input.LA(1)
                if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 209) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self.identifier()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 322
                self.match(CryptlangParser.T__9)
                self.state = 323
                self.expression(0)


            self.state = 326
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = CryptlangParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(CryptlangParser.T__23)
            self.state = 329
            self.identifier()
            self.state = 330
            self.match(CryptlangParser.T__24)
            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 331
                self.match(CryptlangParser.T__12)
                pass
            elif token in [14, 29, 35, 37, 41, 62, 63, 64, 65, 106, 107, 108, 109, 110, 131]:
                self.state = 332
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 335
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = CryptlangParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(CryptlangParser.T__25)
            self.state = 338
            self.identifier()
            self.state = 339
            self.match(CryptlangParser.T__14)
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124795396097) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 33554463) != 0):
                self.state = 340
                self.variableDeclaration()
                self.state = 341
                self.match(CryptlangParser.T__1)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124795396097) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 33554463) != 0):
                    self.state = 342
                    self.variableDeclaration()
                    self.state = 343
                    self.match(CryptlangParser.T__1)
                    self.state = 349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 352
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)




    def constructorDefinition(self):

        localctx = CryptlangParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(CryptlangParser.T__26)
            self.state = 355
            self.parameterList()
            self.state = 356
            self.modifierList()
            self.state = 357
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = CryptlangParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(CryptlangParser.T__27)
            self.state = 360
            self.identifier()
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 361
                self.parameterList()


            self.state = 364
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = CryptlangParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.identifier()
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 367
                self.match(CryptlangParser.T__21)
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                    self.state = 368
                    self.expressionList()


                self.state = 371
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(CryptlangParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = CryptlangParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==105:
                self.state = 374
                self.natSpec()


            self.state = 377
            self.match(CryptlangParser.T__28)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 378
                self.identifier()


            self.state = 381
            self.parameterList()
            self.state = 382
            self.modifierList()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 383
                self.returnParameters()


            self.state = 388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 386
                self.match(CryptlangParser.T__1)
                pass
            elif token in [15]:
                self.state = 387
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = CryptlangParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(CryptlangParser.T__29)
            self.state = 391
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ExternalKeyword)
            else:
                return self.getToken(CryptlangParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PublicKeyword)
            else:
                return self.getToken(CryptlangParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PrivateKeyword)
            else:
                return self.getToken(CryptlangParser.PrivateKeyword, i)

        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = CryptlangParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14 or _la==41 or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 3573) != 0):
                self.state = 399
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 41, 131]:
                    self.state = 393
                    self.modifierInvocation()
                    pass
                elif token in [120, 125, 128, 130]:
                    self.state = 394
                    self.stateMutability()
                    pass
                elif token in [122]:
                    self.state = 395
                    self.match(CryptlangParser.ExternalKeyword)
                    pass
                elif token in [127]:
                    self.state = 396
                    self.match(CryptlangParser.PublicKeyword)
                    pass
                elif token in [124]:
                    self.state = 397
                    self.match(CryptlangParser.InternalKeyword)
                    pass
                elif token in [126]:
                    self.state = 398
                    self.match(CryptlangParser.PrivateKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(CryptlangParser.EventParameterListContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def AnonymousKeyword(self):
            return self.getToken(CryptlangParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = CryptlangParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==105:
                self.state = 404
                self.natSpec()


            self.state = 407
            self.match(CryptlangParser.T__30)
            self.state = 408
            self.identifier()
            self.state = 409
            self.eventParameterList()
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 410
                self.match(CryptlangParser.AnonymousKeyword)


            self.state = 413
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = CryptlangParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.EnumValueContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = CryptlangParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(CryptlangParser.T__31)
            self.state = 418
            self.identifier()
            self.state = 419
            self.match(CryptlangParser.T__14)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 420
                self.enumValue()


            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 423
                self.match(CryptlangParser.T__15)
                self.state = 424
                self.enumValue()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = CryptlangParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(CryptlangParser.T__21)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124795396097) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 33554463) != 0):
                self.state = 433
                self.parameter()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 434
                    self.match(CryptlangParser.T__15)
                    self.state = 435
                    self.parameter()
                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 443
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = CryptlangParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.typeName(0)
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 446
                self.storageLocation()


            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 449
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.EventParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = CryptlangParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(CryptlangParser.T__21)
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124795396097) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 33554463) != 0):
                self.state = 453
                self.eventParameter()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 454
                    self.match(CryptlangParser.T__15)
                    self.state = 455
                    self.eventParameter()
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 463
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(CryptlangParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = CryptlangParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.typeName(0)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 466
                self.match(CryptlangParser.IndexedKeyword)


            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 469
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = CryptlangParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(CryptlangParser.T__21)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124795396097) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 33554463) != 0):
                self.state = 473
                self.functionTypeParameter()
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 474
                    self.match(CryptlangParser.T__15)
                    self.state = 475
                    self.functionTypeParameter()
                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 483
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = CryptlangParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.typeName(0)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0):
                self.state = 486
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = CryptlangParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.typeName(0)
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 490
                self.storageLocation()


            self.state = 493
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(CryptlangParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(CryptlangParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CryptlangParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 496
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 497
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 498
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 499
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 500
                self.match(CryptlangParser.T__34)
                self.state = 501
                self.match(CryptlangParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 512
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CryptlangParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 504
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 505
                    self.match(CryptlangParser.T__32)
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                        self.state = 506
                        self.expression(0)


                    self.state = 509
                    self.match(CryptlangParser.T__33) 
                self.state = 514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = CryptlangParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.identifier()
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 516
                    self.match(CryptlangParser.T__35)
                    self.state = 517
                    self.identifier() 
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = CryptlangParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(CryptlangParser.T__36)
            self.state = 524
            self.match(CryptlangParser.T__21)
            self.state = 525
            self.elementaryTypeName()
            self.state = 526
            self.match(CryptlangParser.T__37)
            self.state = 527
            self.typeName(0)
            self.state = 528
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ExternalKeyword)
            else:
                return self.getToken(CryptlangParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = CryptlangParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(CryptlangParser.T__28)
            self.state = 531
            self.functionTypeParameterList()
            self.state = 537
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 535
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [124]:
                        self.state = 532
                        self.match(CryptlangParser.InternalKeyword)
                        pass
                    elif token in [122]:
                        self.state = 533
                        self.match(CryptlangParser.ExternalKeyword)
                        pass
                    elif token in [120, 125, 128, 130]:
                        self.state = 534
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 540
                self.match(CryptlangParser.T__29)
                self.state = 541
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = CryptlangParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(CryptlangParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(CryptlangParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(CryptlangParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(CryptlangParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = CryptlangParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            _la = self._input.LA(1)
            if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 1313) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StatementContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StatementContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CryptlangParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(CryptlangParser.T__14)
            self.state = 552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 549
                    self.statement() 
                self.state = 554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 555
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def taskStatement(self):
            return self.getTypedRuleContext(CryptlangParser.TaskStatementContext,0)


        def otherStatement(self):
            return self.getTypedRuleContext(CryptlangParser.OtherStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(CryptlangParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(CryptlangParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(CryptlangParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(CryptlangParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(CryptlangParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(CryptlangParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SimpleStatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CryptlangParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statement)
        try:
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.taskStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.otherStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 559
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 560
                self.whileStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 561
                self.forStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 562
                self.block()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 563
                self.inlineAssemblyStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 564
                self.doWhileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 565
                self.continueStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 566
                self.breakStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 567
                self.returnStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 568
                self.throwStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 569
                self.emitStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 570
                self.simpleStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 571
                self.taskStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = CryptlangParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.expression(0)
            self.state = 575
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_statementSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementSymbol" ):
                listener.enterStatementSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementSymbol" ):
                listener.exitStatementSymbol(self)




    def statementSymbol(self):

        localctx = CryptlangParser.StatementSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_statementSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(CryptlangParser.T__41)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateSymbol" ):
                listener.enterPrivateSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateSymbol" ):
                listener.exitPrivateSymbol(self)




    def privateSymbol(self):

        localctx = CryptlangParser.PrivateSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_privateSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(CryptlangParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def privateSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.PrivateSymbolContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifier" ):
                listener.enterPrivateIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifier" ):
                listener.exitPrivateIdentifier(self)




    def privateIdentifier(self):

        localctx = CryptlangParser.PrivateIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_privateIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 581
                self.privateSymbol()


            self.state = 584
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privateIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.PrivateIdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.PrivateIdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifierList" ):
                listener.enterPrivateIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifierList" ):
                listener.exitPrivateIdentifierList(self)




    def privateIdentifierList(self):

        localctx = CryptlangParser.PrivateIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_privateIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 10995116294144) != 0) or _la==131:
                        self.state = 586
                        self.privateIdentifier()


                    self.state = 589
                    self.match(CryptlangParser.T__15) 
                self.state = 594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 10995116294144) != 0) or _la==131:
                self.state = 595
                self.privateIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HashMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_hashMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashMethod" ):
                listener.enterHashMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashMethod" ):
                listener.exitHashMethod(self)




    def hashMethod(self):

        localctx = CryptlangParser.HashMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_hashMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 123145302310912) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_signatureMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatureMethod" ):
                listener.enterSignatureMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatureMethod" ):
                listener.exitSignatureMethod(self)




    def signatureMethod(self):

        localctx = CryptlangParser.SignatureMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_signatureMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            _la = self._input.LA(1)
            if not(_la==47 or _la==48):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitmentMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_commitmentMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitmentMethod" ):
                listener.enterCommitmentMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitmentMethod" ):
                listener.exitCommitmentMethod(self)




    def commitmentMethod(self):

        localctx = CryptlangParser.CommitmentMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_commitmentMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            _la = self._input.LA(1)
            if not(_la==49 or _la==50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProofMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_proofMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProofMethod" ):
                listener.enterProofMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProofMethod" ):
                listener.exitProofMethod(self)




    def proofMethod(self):

        localctx = CryptlangParser.ProofMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_proofMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            _la = self._input.LA(1)
            if not(_la==51 or _la==52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.StatementSymbolContext,0)


        def signatureMethod(self):
            return self.getTypedRuleContext(CryptlangParser.SignatureMethodContext,0)


        def hashMethod(self):
            return self.getTypedRuleContext(CryptlangParser.HashMethodContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryptlangParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_signatureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatureStatement" ):
                listener.enterSignatureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatureStatement" ):
                listener.exitSignatureStatement(self)




    def signatureStatement(self):

        localctx = CryptlangParser.SignatureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_signatureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.statementSymbol()
            self.state = 607
            self.signatureMethod()
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 608
                self.match(CryptlangParser.T__52)
                self.state = 609
                self.hashMethod()


            self.state = 612
            self.match(CryptlangParser.T__21)
            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==131:
                        self.state = 613
                        self.identifier()


                    self.state = 616
                    self.match(CryptlangParser.T__15) 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 622
                self.identifier()


            self.state = 625
            self.match(CryptlangParser.T__15)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124787499265) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 109053407) != 0):
                self.state = 626
                self.primaryExpression()


            self.state = 629
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.StatementSymbolContext,0)


        def commitmentMethod(self):
            return self.getTypedRuleContext(CryptlangParser.CommitmentMethodContext,0)


        def hashMethod(self):
            return self.getTypedRuleContext(CryptlangParser.HashMethodContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_commitmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitmentStatement" ):
                listener.enterCommitmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitmentStatement" ):
                listener.exitCommitmentStatement(self)




    def commitmentStatement(self):

        localctx = CryptlangParser.CommitmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_commitmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.statementSymbol()
            self.state = 632
            self.commitmentMethod()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 633
                self.match(CryptlangParser.T__52)
                self.state = 634
                self.hashMethod()


            self.state = 637
            self.match(CryptlangParser.T__21)
            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==131:
                        self.state = 638
                        self.identifier()


                    self.state = 641
                    self.match(CryptlangParser.T__15) 
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 647
                self.identifier()


            self.state = 650
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProofStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.StatementSymbolContext,0)


        def proofMethod(self):
            return self.getTypedRuleContext(CryptlangParser.ProofMethodContext,0)


        def hashMethod(self):
            return self.getTypedRuleContext(CryptlangParser.HashMethodContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryptlangParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_proofStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProofStatement" ):
                listener.enterProofStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProofStatement" ):
                listener.exitProofStatement(self)




    def proofStatement(self):

        localctx = CryptlangParser.ProofStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_proofStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.statementSymbol()
            self.state = 653
            self.proofMethod()
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 654
                self.match(CryptlangParser.T__52)
                self.state = 655
                self.hashMethod()


            self.state = 658
            self.match(CryptlangParser.T__21)
            self.state = 665
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==131:
                        self.state = 659
                        self.identifier()


                    self.state = 662
                    self.match(CryptlangParser.T__15) 
                self.state = 667
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 668
                self.identifier()


            self.state = 671
            self.match(CryptlangParser.T__15)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124787499265) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 109053407) != 0):
                self.state = 672
                self.primaryExpression()


            self.state = 675
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signatureStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SignatureStatementContext,0)


        def commitmentStatement(self):
            return self.getTypedRuleContext(CryptlangParser.CommitmentStatementContext,0)


        def proofStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ProofStatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_taskStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTaskStatement" ):
                listener.enterTaskStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTaskStatement" ):
                listener.exitTaskStatement(self)




    def taskStatement(self):

        localctx = CryptlangParser.TaskStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_taskStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 677
                self.signatureStatement()
                pass

            elif la_ == 2:
                self.state = 678
                self.commitmentStatement()
                pass

            elif la_ == 3:
                self.state = 679
                self.proofStatement()
                pass


            self.state = 682
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_otherStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherStatement" ):
                listener.enterOtherStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherStatement" ):
                listener.exitOtherStatement(self)




    def otherStatement(self):

        localctx = CryptlangParser.OtherStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_otherStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 684
                    self.matchWildcard()

                else:
                    raise NoViableAltException(self)
                self.state = 687 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 689
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StatementContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StatementContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = CryptlangParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(CryptlangParser.T__53)
            self.state = 692
            self.match(CryptlangParser.T__21)
            self.state = 693
            self.expression(0)
            self.state = 694
            self.match(CryptlangParser.T__22)
            self.state = 695
            self.statement()
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 696
                self.match(CryptlangParser.T__54)
                self.state = 697
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = CryptlangParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(CryptlangParser.T__55)
            self.state = 701
            self.match(CryptlangParser.T__21)
            self.state = 702
            self.expression(0)
            self.state = 703
            self.match(CryptlangParser.T__22)
            self.state = 704
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = CryptlangParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 706
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 707
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = CryptlangParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(CryptlangParser.T__24)
            self.state = 711
            self.match(CryptlangParser.T__21)
            self.state = 714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 22, 29, 33, 35, 37, 41, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 106, 107, 108, 109, 110, 112, 113, 114, 116, 129, 131, 132]:
                self.state = 712
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 713
                self.match(CryptlangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 22, 33, 35, 41, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 106, 107, 108, 109, 110, 112, 113, 114, 116, 129, 131, 132]:
                self.state = 716
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 717
                self.match(CryptlangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                self.state = 720
                self.expression(0)


            self.state = 723
            self.match(CryptlangParser.T__22)
            self.state = 724
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = CryptlangParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(CryptlangParser.T__56)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 727
                self.match(CryptlangParser.StringLiteral)


            self.state = 730
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = CryptlangParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(CryptlangParser.T__57)
            self.state = 733
            self.statement()
            self.state = 734
            self.match(CryptlangParser.T__55)
            self.state = 735
            self.match(CryptlangParser.T__21)
            self.state = 736
            self.expression(0)
            self.state = 737
            self.match(CryptlangParser.T__22)
            self.state = 738
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(CryptlangParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = CryptlangParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(CryptlangParser.ContinueKeyword)
            self.state = 741
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(CryptlangParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = CryptlangParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(CryptlangParser.BreakKeyword)
            self.state = 744
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = CryptlangParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(CryptlangParser.T__58)
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                self.state = 747
                self.expression(0)


            self.state = 750
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = CryptlangParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(CryptlangParser.T__59)
            self.state = 753
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = CryptlangParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(CryptlangParser.T__60)
            self.state = 756
            self.functionCall()
            self.state = 757
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = CryptlangParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 759
                self.match(CryptlangParser.T__61)
                self.state = 760
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 761
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 762
                self.match(CryptlangParser.T__21)
                self.state = 763
                self.variableDeclarationList()
                self.state = 764
                self.match(CryptlangParser.T__22)
                pass


            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 768
                self.match(CryptlangParser.T__9)
                self.state = 769
                self.expression(0)


            self.state = 772
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = CryptlangParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124795396097) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 33554463) != 0):
                self.state = 774
                self.variableDeclaration()


            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 777
                self.match(CryptlangParser.T__15)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4222124795396097) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 33554463) != 0):
                    self.state = 778
                    self.variableDeclaration()


                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = CryptlangParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(CryptlangParser.T__21)
            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==131:
                        self.state = 787
                        self.identifier()


                    self.state = 790
                    self.match(CryptlangParser.T__15) 
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 796
                self.identifier()


            self.state = 799
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(CryptlangParser.Int, 0)

        def Uint(self):
            return self.getToken(CryptlangParser.Uint, 0)

        def Byte(self):
            return self.getToken(CryptlangParser.Byte, 0)

        def Fixed(self):
            return self.getToken(CryptlangParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(CryptlangParser.Ufixed, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = CryptlangParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611685984067649536) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 136339441844227) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryptlangParser.PrimaryExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CryptlangParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 804
                self.match(CryptlangParser.T__67)
                self.state = 805
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 806
                self.match(CryptlangParser.T__21)
                self.state = 807
                self.expression(0)
                self.state = 808
                self.match(CryptlangParser.T__22)
                pass

            elif la_ == 3:
                self.state = 810
                _la = self._input.LA(1)
                if not(_la==66 or _la==67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 811
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 812
                _la = self._input.LA(1)
                if not(_la==69 or _la==70):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 813
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 814
                _la = self._input.LA(1)
                if not(_la==71 or _la==72):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 815
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 816
                self.match(CryptlangParser.T__72)
                self.state = 817
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 818
                self.match(CryptlangParser.T__4)
                self.state = 819
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 820
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 882
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 880
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                    if la_ == 1:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 823
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 824
                        self.match(CryptlangParser.T__73)
                        self.state = 825
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 826
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 827
                        _la = self._input.LA(1)
                        if not(((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & -4611686018427387903) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 828
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 829
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 830
                        _la = self._input.LA(1)
                        if not(_la==69 or _la==70):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 831
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 832
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 833
                        _la = self._input.LA(1)
                        if not(_la==77 or _la==78):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 834
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 835
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 836
                        self.match(CryptlangParser.T__78)
                        self.state = 837
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 838
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 839
                        self.match(CryptlangParser.T__3)
                        self.state = 840
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 841
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 842
                        self.match(CryptlangParser.T__79)
                        self.state = 843
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 844
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 845
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 846
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 847
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 848
                        _la = self._input.LA(1)
                        if not(_la==81 or _la==82):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 849
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 850
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 851
                        self.match(CryptlangParser.T__82)
                        self.state = 852
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 853
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 854
                        self.match(CryptlangParser.T__83)
                        self.state = 855
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 856
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 857
                        self.match(CryptlangParser.T__84)
                        self.state = 858
                        self.expression(0)
                        self.state = 859
                        self.match(CryptlangParser.T__85)
                        self.state = 860
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 862
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 863
                        _la = self._input.LA(1)
                        if not(_la==10 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 1023) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 864
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 865
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 866
                        _la = self._input.LA(1)
                        if not(_la==66 or _la==67):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 867
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 868
                        self.match(CryptlangParser.T__32)
                        self.state = 869
                        self.expression(0)
                        self.state = 870
                        self.match(CryptlangParser.T__33)
                        pass

                    elif la_ == 16:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 872
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 873
                        self.match(CryptlangParser.T__21)
                        self.state = 874
                        self.functionCallArguments()
                        self.state = 875
                        self.match(CryptlangParser.T__22)
                        pass

                    elif la_ == 17:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 877
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 878
                        self.match(CryptlangParser.T__35)
                        self.state = 879
                        self.identifier()
                        pass

             
                self.state = 884
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(CryptlangParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.NumberLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(CryptlangParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(CryptlangParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = CryptlangParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_primaryExpression)
        try:
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.match(CryptlangParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 887
                self.match(CryptlangParser.HexLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 888
                self.match(CryptlangParser.StringLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 889
                self.identifier()
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.match(CryptlangParser.T__32)
                    self.state = 891
                    self.match(CryptlangParser.T__33)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 894
                self.match(CryptlangParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 895
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 896
                self.typeNameExpression()
                self.state = 899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 897
                    self.match(CryptlangParser.T__32)
                    self.state = 898
                    self.match(CryptlangParser.T__33)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = CryptlangParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.expression(0)
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 904
                self.match(CryptlangParser.T__15)
                self.state = 905
                self.expression(0)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.NameValueContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.NameValueContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = CryptlangParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.nameValue()
            self.state = 916
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 912
                    self.match(CryptlangParser.T__15)
                    self.state = 913
                    self.nameValue() 
                self.state = 918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 919
                self.match(CryptlangParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = CryptlangParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.identifier()
            self.state = 923
            self.match(CryptlangParser.T__85)
            self.state = 924
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(CryptlangParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = CryptlangParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.match(CryptlangParser.T__14)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14 or _la==41 or _la==131:
                    self.state = 927
                    self.nameValueList()


                self.state = 930
                self.match(CryptlangParser.T__16)
                pass
            elif token in [5, 14, 22, 23, 33, 35, 41, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 106, 107, 108, 109, 110, 112, 113, 114, 116, 129, 131, 132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                    self.state = 931
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = CryptlangParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.expression(0)
            self.state = 937
            self.match(CryptlangParser.T__21)
            self.state = 938
            self.functionCallArguments()
            self.state = 939
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = CryptlangParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(CryptlangParser.T__14)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 2296879926774019) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 51561299981) != 0):
                self.state = 942
                self.assemblyItem()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 948
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(CryptlangParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(CryptlangParser.ContinueKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(CryptlangParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = CryptlangParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyItem)
        try:
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 951
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 952
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 953
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 954
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 955
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 956
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 957
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 958
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 959
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 960
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 961
                self.match(CryptlangParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 962
                self.match(CryptlangParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 963
                self.subAssembly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 964
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 965
                self.match(CryptlangParser.StringLiteral)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 966
                self.match(CryptlangParser.HexLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = CryptlangParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyExpression)
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 35, 41, 59, 65, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 969
                self.assemblyCall()
                pass
            elif token in [113, 114, 116, 132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 970
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = CryptlangParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.state = 973
                self.match(CryptlangParser.T__58)
                pass
            elif token in [35]:
                self.state = 974
                self.match(CryptlangParser.T__34)
                pass
            elif token in [65]:
                self.state = 975
                self.match(CryptlangParser.T__64)
                pass
            elif token in [14, 41, 131]:
                self.state = 976
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 979
                self.match(CryptlangParser.T__21)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 2286984322088961) != 0) or ((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 786443) != 0):
                    self.state = 980
                    self.assemblyExpression()


                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 983
                    self.match(CryptlangParser.T__15)
                    self.state = 984
                    self.assemblyExpression()
                    self.state = 989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 990
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = CryptlangParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(CryptlangParser.T__96)
            self.state = 994
            self.assemblyIdentifierOrList()
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 995
                self.match(CryptlangParser.T__97)
                self.state = 996
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = CryptlangParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.assemblyIdentifierOrList()
            self.state = 1000
            self.match(CryptlangParser.T__97)
            self.state = 1001
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = CryptlangParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 41, 131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.identifier()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.match(CryptlangParser.T__21)
                self.state = 1005
                self.assemblyIdentifierList()
                self.state = 1006
                self.match(CryptlangParser.T__22)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = CryptlangParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.identifier()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 1011
                self.match(CryptlangParser.T__15)
                self.state = 1012
                self.identifier()
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = CryptlangParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(CryptlangParser.T__98)
            self.state = 1019
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = CryptlangParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.identifier()
            self.state = 1022
            self.match(CryptlangParser.T__85)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = CryptlangParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(CryptlangParser.T__99)
            self.state = 1025
            self.assemblyExpression()
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101 or _la==102:
                self.state = 1026
                self.assemblyCase()
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = CryptlangParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyCase)
        try:
            self.state = 1038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.match(CryptlangParser.T__100)
                self.state = 1033
                self.assemblyLiteral()
                self.state = 1034
                self.assemblyBlock()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.match(CryptlangParser.T__101)
                self.state = 1037
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = CryptlangParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(CryptlangParser.T__28)
            self.state = 1041
            self.identifier()
            self.state = 1042
            self.match(CryptlangParser.T__21)
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==131:
                self.state = 1043
                self.assemblyIdentifierList()


            self.state = 1046
            self.match(CryptlangParser.T__22)
            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1047
                self.assemblyFunctionReturns()


            self.state = 1050
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = CryptlangParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(CryptlangParser.T__102)
            self.state = 1053
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = CryptlangParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(CryptlangParser.T__24)
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1056
                self.assemblyBlock()
                pass
            elif token in [14, 35, 41, 59, 65, 113, 114, 116, 131, 132]:
                self.state = 1057
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1060
            self.assemblyExpression()
            self.state = 1063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1061
                self.assemblyBlock()
                pass
            elif token in [14, 35, 41, 59, 65, 113, 114, 116, 131, 132]:
                self.state = 1062
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1065
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = CryptlangParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(CryptlangParser.T__53)
            self.state = 1068
            self.assemblyExpression()
            self.state = 1069
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def DecimalNumber(self):
            return self.getToken(CryptlangParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(CryptlangParser.HexNumber, 0)

        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = CryptlangParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            _la = self._input.LA(1)
            if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 524299) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = CryptlangParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(CryptlangParser.T__56)
            self.state = 1074
            self.identifier()
            self.state = 1075
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = CryptlangParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.match(CryptlangParser.T__21)

                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                    self.state = 1078
                    self.expression(0)


                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1081
                    self.match(CryptlangParser.T__15)
                    self.state = 1083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                        self.state = 1082
                        self.expression(0)


                    self.state = 1089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1090
                self.match(CryptlangParser.T__22)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1091
                self.match(CryptlangParser.T__32)
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -144115118014070271) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -3458557943073472481) != 0):
                    self.state = 1092
                    self.expression(0)
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==16:
                        self.state = 1093
                        self.match(CryptlangParser.T__15)
                        self.state = 1094
                        self.expression(0)
                        self.state = 1099
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1102
                self.match(CryptlangParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = CryptlangParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_typeNameExpression)
        try:
            self.state = 1107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 62, 63, 64, 65, 106, 107, 108, 109, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.elementaryTypeName()
                pass
            elif token in [14, 41, 131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(CryptlangParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(CryptlangParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(CryptlangParser.NumberUnit, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = CryptlangParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            _la = self._input.LA(1)
            if not(_la==113 or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1110
                self.match(CryptlangParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CryptlangParser.Identifier, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CryptlangParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            _la = self._input.LA(1)
            if not(_la==14 or _la==41 or _la==131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.typeName_sempred
        self._predicates[69] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         




