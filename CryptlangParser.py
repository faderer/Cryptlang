# Generated from Cryptlang.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,139,1087,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,1,0,1,0,
        5,0,198,8,0,10,0,12,0,201,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,3,1,3,3,3,214,8,3,1,4,1,4,3,4,218,8,4,1,5,1,5,1,6,3,6,223,8,
        6,1,6,1,6,1,7,1,7,1,7,3,7,230,8,7,1,8,1,8,1,8,1,8,3,8,236,8,8,1,
        8,1,8,1,8,1,8,3,8,242,8,8,1,8,1,8,3,8,246,8,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,5,8,256,8,8,10,8,12,8,259,9,8,1,8,1,8,1,8,1,8,1,8,
        3,8,266,8,8,1,9,1,9,1,10,3,10,271,8,10,1,10,1,10,1,10,1,10,1,10,
        1,10,5,10,279,8,10,10,10,12,10,282,9,10,3,10,284,8,10,1,10,1,10,
        5,10,288,8,10,10,10,12,10,291,9,10,1,10,1,10,1,11,1,11,1,11,3,11,
        298,8,11,1,11,3,11,301,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,3,12,311,8,12,1,13,1,13,5,13,315,8,13,10,13,12,13,318,9,13,1,
        13,1,13,1,13,3,13,323,8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,3,
        14,332,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,
        15,344,8,15,10,15,12,15,347,9,15,3,15,349,8,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,361,8,17,1,17,1,17,1,18,1,
        18,1,18,3,18,368,8,18,1,18,3,18,371,8,18,1,19,3,19,374,8,19,1,19,
        1,19,3,19,378,8,19,1,19,1,19,1,19,3,19,383,8,19,1,19,1,19,3,19,387,
        8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,398,8,21,
        10,21,12,21,401,9,21,1,22,3,22,404,8,22,1,22,1,22,1,22,1,22,3,22,
        410,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,420,8,24,1,
        24,1,24,5,24,424,8,24,10,24,12,24,427,9,24,1,24,1,24,1,25,1,25,1,
        25,1,25,5,25,435,8,25,10,25,12,25,438,9,25,3,25,440,8,25,1,25,1,
        25,1,26,1,26,3,26,446,8,26,1,26,3,26,449,8,26,1,27,1,27,1,27,1,27,
        5,27,455,8,27,10,27,12,27,458,9,27,3,27,460,8,27,1,27,1,27,1,28,
        1,28,3,28,466,8,28,1,28,3,28,469,8,28,1,29,1,29,1,29,1,29,5,29,475,
        8,29,10,29,12,29,478,9,29,3,29,480,8,29,1,29,1,29,1,30,1,30,3,30,
        486,8,30,1,31,1,31,3,31,490,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,3,32,501,8,32,1,32,1,32,1,32,3,32,506,8,32,1,32,5,32,
        509,8,32,10,32,12,32,512,9,32,1,33,1,33,1,33,5,33,517,8,33,10,33,
        12,33,520,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,5,35,534,8,35,10,35,12,35,537,9,35,1,35,1,35,3,35,541,
        8,35,1,36,1,36,1,37,1,37,1,38,1,38,5,38,549,8,38,10,38,12,38,552,
        9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,3,39,569,8,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,
        1,43,3,43,579,8,43,1,43,1,43,1,44,3,44,584,8,44,1,44,5,44,587,8,
        44,10,44,12,44,590,9,44,1,44,3,44,593,8,44,1,45,1,45,1,46,1,46,1,
        47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,3,49,608,8,49,1,49,5,
        49,611,8,49,10,49,12,49,614,9,49,1,49,3,49,617,8,49,1,49,1,49,3,
        49,621,8,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,3,50,630,8,50,1,50,
        5,50,633,8,50,10,50,12,50,636,9,50,1,50,3,50,639,8,50,1,50,1,50,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,3,52,
        655,8,52,1,52,1,52,3,52,659,8,52,1,52,1,52,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,3,53,670,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,
        55,3,55,680,8,55,1,56,1,56,1,56,1,56,3,56,686,8,56,1,56,1,56,3,56,
        690,8,56,1,56,3,56,693,8,56,1,56,1,56,1,56,1,57,1,57,3,57,700,8,
        57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,
        59,1,60,1,60,1,60,1,61,1,61,3,61,720,8,61,1,61,1,61,1,62,1,62,1,
        62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,738,
        8,64,1,64,1,64,3,64,742,8,64,1,64,1,64,1,65,3,65,747,8,65,1,65,1,
        65,3,65,751,8,65,5,65,753,8,65,10,65,12,65,756,9,65,1,66,1,66,3,
        66,760,8,66,1,66,5,66,763,8,66,10,66,12,66,766,9,66,1,66,3,66,769,
        8,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,793,8,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,5,68,852,8,68,10,68,12,68,855,9,68,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,3,69,864,8,69,1,69,1,69,1,69,1,69,
        1,69,3,69,871,8,69,3,69,873,8,69,1,70,1,70,1,70,5,70,878,8,70,10,
        70,12,70,881,9,70,1,71,1,71,1,71,5,71,886,8,71,10,71,12,71,889,9,
        71,1,71,3,71,892,8,71,1,72,1,72,1,72,1,72,1,73,1,73,3,73,900,8,73,
        1,73,1,73,3,73,904,8,73,3,73,906,8,73,1,74,1,74,1,74,1,74,1,74,1,
        75,1,75,5,75,915,8,75,10,75,12,75,918,9,75,1,75,1,75,1,76,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
        76,1,76,3,76,939,8,76,1,77,1,77,3,77,943,8,77,1,78,1,78,1,78,1,78,
        3,78,949,8,78,1,78,1,78,3,78,953,8,78,1,78,1,78,5,78,957,8,78,10,
        78,12,78,960,9,78,1,78,3,78,963,8,78,1,79,1,79,1,79,1,79,3,79,969,
        8,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,3,81,980,8,81,
        1,82,1,82,1,82,5,82,985,8,82,10,82,12,82,988,9,82,1,83,1,83,1,83,
        1,84,1,84,1,84,1,85,1,85,1,85,5,85,999,8,85,10,85,12,85,1002,9,85,
        1,86,1,86,1,86,1,86,1,86,1,86,3,86,1010,8,86,1,87,1,87,1,87,1,87,
        3,87,1016,8,87,1,87,1,87,3,87,1020,8,87,1,87,1,87,1,88,1,88,1,88,
        1,89,1,89,1,89,3,89,1030,8,89,1,89,1,89,1,89,3,89,1035,8,89,1,89,
        1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,
        3,93,1051,8,93,1,93,1,93,3,93,1055,8,93,5,93,1057,8,93,10,93,12,
        93,1060,9,93,1,93,1,93,1,93,1,93,1,93,5,93,1067,8,93,10,93,12,93,
        1070,9,93,3,93,1072,8,93,1,93,3,93,1075,8,93,1,94,1,94,3,94,1079,
        8,94,1,95,1,95,3,95,1083,8,95,1,96,1,96,1,96,0,2,64,136,97,0,2,4,
        6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,0,22,1,0,4,10,1,0,108,109,1,0,18,20,3,0,124,124,128,128,130,
        131,1,0,39,41,4,0,124,124,129,129,132,132,134,134,1,0,44,47,1,0,
        48,51,1,0,52,53,1,0,54,56,3,0,35,35,66,69,110,114,1,0,70,71,1,0,
        73,74,1,0,75,76,2,0,13,13,79,80,1,0,81,82,1,0,6,9,1,0,85,86,2,0,
        10,10,91,100,3,0,117,118,120,120,136,136,1,0,117,118,3,0,14,14,41,
        41,135,135,1183,0,199,1,0,0,0,2,204,1,0,0,0,4,209,1,0,0,0,6,213,
        1,0,0,0,8,215,1,0,0,0,10,219,1,0,0,0,12,222,1,0,0,0,14,226,1,0,0,
        0,16,265,1,0,0,0,18,267,1,0,0,0,20,270,1,0,0,0,22,294,1,0,0,0,24,
        310,1,0,0,0,26,312,1,0,0,0,28,326,1,0,0,0,30,335,1,0,0,0,32,352,
        1,0,0,0,34,357,1,0,0,0,36,364,1,0,0,0,38,373,1,0,0,0,40,388,1,0,
        0,0,42,399,1,0,0,0,44,403,1,0,0,0,46,413,1,0,0,0,48,415,1,0,0,0,
        50,430,1,0,0,0,52,443,1,0,0,0,54,450,1,0,0,0,56,463,1,0,0,0,58,470,
        1,0,0,0,60,483,1,0,0,0,62,487,1,0,0,0,64,500,1,0,0,0,66,513,1,0,
        0,0,68,521,1,0,0,0,70,528,1,0,0,0,72,542,1,0,0,0,74,544,1,0,0,0,
        76,546,1,0,0,0,78,568,1,0,0,0,80,570,1,0,0,0,82,573,1,0,0,0,84,575,
        1,0,0,0,86,578,1,0,0,0,88,588,1,0,0,0,90,594,1,0,0,0,92,596,1,0,
        0,0,94,598,1,0,0,0,96,600,1,0,0,0,98,602,1,0,0,0,100,624,1,0,0,0,
        102,642,1,0,0,0,104,654,1,0,0,0,106,662,1,0,0,0,108,671,1,0,0,0,
        110,679,1,0,0,0,112,681,1,0,0,0,114,697,1,0,0,0,116,703,1,0,0,0,
        118,711,1,0,0,0,120,714,1,0,0,0,122,717,1,0,0,0,124,723,1,0,0,0,
        126,726,1,0,0,0,128,737,1,0,0,0,130,746,1,0,0,0,132,757,1,0,0,0,
        134,772,1,0,0,0,136,792,1,0,0,0,138,872,1,0,0,0,140,874,1,0,0,0,
        142,882,1,0,0,0,144,893,1,0,0,0,146,905,1,0,0,0,148,907,1,0,0,0,
        150,912,1,0,0,0,152,938,1,0,0,0,154,942,1,0,0,0,156,948,1,0,0,0,
        158,964,1,0,0,0,160,970,1,0,0,0,162,979,1,0,0,0,164,981,1,0,0,0,
        166,989,1,0,0,0,168,992,1,0,0,0,170,995,1,0,0,0,172,1009,1,0,0,0,
        174,1011,1,0,0,0,176,1023,1,0,0,0,178,1026,1,0,0,0,180,1038,1,0,
        0,0,182,1042,1,0,0,0,184,1044,1,0,0,0,186,1074,1,0,0,0,188,1078,
        1,0,0,0,190,1080,1,0,0,0,192,1084,1,0,0,0,194,198,3,2,1,0,195,198,
        3,16,8,0,196,198,3,20,10,0,197,194,1,0,0,0,197,195,1,0,0,0,197,196,
        1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,
        1,0,0,0,201,199,1,0,0,0,202,203,5,0,0,1,203,1,1,0,0,0,204,205,5,
        1,0,0,205,206,3,4,2,0,206,207,3,6,3,0,207,208,5,2,0,0,208,3,1,0,
        0,0,209,210,5,3,0,0,210,5,1,0,0,0,211,214,3,8,4,0,212,214,3,136,
        68,0,213,211,1,0,0,0,213,212,1,0,0,0,214,7,1,0,0,0,215,217,3,12,
        6,0,216,218,3,12,6,0,217,216,1,0,0,0,217,218,1,0,0,0,218,9,1,0,0,
        0,219,220,7,0,0,0,220,11,1,0,0,0,221,223,3,10,5,0,222,221,1,0,0,
        0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,5,115,0,0,225,13,1,0,0,
        0,226,229,3,192,96,0,227,228,5,11,0,0,228,230,3,192,96,0,229,227,
        1,0,0,0,229,230,1,0,0,0,230,15,1,0,0,0,231,232,5,12,0,0,232,235,
        5,136,0,0,233,234,5,11,0,0,234,236,3,192,96,0,235,233,1,0,0,0,235,
        236,1,0,0,0,236,237,1,0,0,0,237,266,5,2,0,0,238,241,5,12,0,0,239,
        242,5,13,0,0,240,242,3,192,96,0,241,239,1,0,0,0,241,240,1,0,0,0,
        242,245,1,0,0,0,243,244,5,11,0,0,244,246,3,192,96,0,245,243,1,0,
        0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,5,14,0,0,248,249,5,136,
        0,0,249,266,5,2,0,0,250,251,5,12,0,0,251,252,5,15,0,0,252,257,3,
        14,7,0,253,254,5,16,0,0,254,256,3,14,7,0,255,253,1,0,0,0,256,259,
        1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,257,
        1,0,0,0,260,261,5,17,0,0,261,262,5,14,0,0,262,263,5,136,0,0,263,
        264,5,2,0,0,264,266,1,0,0,0,265,231,1,0,0,0,265,238,1,0,0,0,265,
        250,1,0,0,0,266,17,1,0,0,0,267,268,7,1,0,0,268,19,1,0,0,0,269,271,
        3,18,9,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,
        7,2,0,0,273,283,3,192,96,0,274,275,5,21,0,0,275,280,3,22,11,0,276,
        277,5,16,0,0,277,279,3,22,11,0,278,276,1,0,0,0,279,282,1,0,0,0,280,
        278,1,0,0,0,280,281,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,283,
        274,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,289,5,15,0,0,286,
        288,3,24,12,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,
        290,1,0,0,0,290,292,1,0,0,0,291,289,1,0,0,0,292,293,5,17,0,0,293,
        21,1,0,0,0,294,300,3,66,33,0,295,297,5,22,0,0,296,298,3,140,70,0,
        297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,5,23,0,0,
        300,295,1,0,0,0,300,301,1,0,0,0,301,23,1,0,0,0,302,311,3,26,13,0,
        303,311,3,28,14,0,304,311,3,30,15,0,305,311,3,32,16,0,306,311,3,
        34,17,0,307,311,3,38,19,0,308,311,3,44,22,0,309,311,3,48,24,0,310,
        302,1,0,0,0,310,303,1,0,0,0,310,304,1,0,0,0,310,305,1,0,0,0,310,
        306,1,0,0,0,310,307,1,0,0,0,310,308,1,0,0,0,310,309,1,0,0,0,311,
        25,1,0,0,0,312,316,3,64,32,0,313,315,7,3,0,0,314,313,1,0,0,0,315,
        318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,
        316,1,0,0,0,319,322,3,192,96,0,320,321,5,10,0,0,321,323,3,136,68,
        0,322,320,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,325,5,2,0,
        0,325,27,1,0,0,0,326,327,5,24,0,0,327,328,3,192,96,0,328,331,5,25,
        0,0,329,332,5,13,0,0,330,332,3,64,32,0,331,329,1,0,0,0,331,330,1,
        0,0,0,332,333,1,0,0,0,333,334,5,2,0,0,334,29,1,0,0,0,335,336,5,26,
        0,0,336,337,3,192,96,0,337,348,5,15,0,0,338,339,3,62,31,0,339,345,
        5,2,0,0,340,341,3,62,31,0,341,342,5,2,0,0,342,344,1,0,0,0,343,340,
        1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,349,
        1,0,0,0,347,345,1,0,0,0,348,338,1,0,0,0,348,349,1,0,0,0,349,350,
        1,0,0,0,350,351,5,17,0,0,351,31,1,0,0,0,352,353,5,27,0,0,353,354,
        3,50,25,0,354,355,3,42,21,0,355,356,3,76,38,0,356,33,1,0,0,0,357,
        358,5,28,0,0,358,360,3,192,96,0,359,361,3,50,25,0,360,359,1,0,0,
        0,360,361,1,0,0,0,361,362,1,0,0,0,362,363,3,76,38,0,363,35,1,0,0,
        0,364,370,3,192,96,0,365,367,5,22,0,0,366,368,3,140,70,0,367,366,
        1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,371,5,23,0,0,370,365,
        1,0,0,0,370,371,1,0,0,0,371,37,1,0,0,0,372,374,3,18,9,0,373,372,
        1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,5,29,0,0,376,378,
        3,192,96,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,
        3,50,25,0,380,382,3,42,21,0,381,383,3,40,20,0,382,381,1,0,0,0,382,
        383,1,0,0,0,383,386,1,0,0,0,384,387,5,2,0,0,385,387,3,76,38,0,386,
        384,1,0,0,0,386,385,1,0,0,0,387,39,1,0,0,0,388,389,5,30,0,0,389,
        390,3,50,25,0,390,41,1,0,0,0,391,398,3,36,18,0,392,398,3,74,37,0,
        393,398,5,126,0,0,394,398,5,131,0,0,395,398,5,128,0,0,396,398,5,
        130,0,0,397,391,1,0,0,0,397,392,1,0,0,0,397,393,1,0,0,0,397,394,
        1,0,0,0,397,395,1,0,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,
        1,0,0,0,399,400,1,0,0,0,400,43,1,0,0,0,401,399,1,0,0,0,402,404,3,
        18,9,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,
        31,0,0,406,407,3,192,96,0,407,409,3,54,27,0,408,410,5,122,0,0,409,
        408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,5,2,0,0,412,
        45,1,0,0,0,413,414,3,192,96,0,414,47,1,0,0,0,415,416,5,32,0,0,416,
        417,3,192,96,0,417,419,5,15,0,0,418,420,3,46,23,0,419,418,1,0,0,
        0,419,420,1,0,0,0,420,425,1,0,0,0,421,422,5,16,0,0,422,424,3,46,
        23,0,423,421,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,
        0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,429,5,17,0,0,429,49,1,0,
        0,0,430,439,5,22,0,0,431,436,3,52,26,0,432,433,5,16,0,0,433,435,
        3,52,26,0,434,432,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,
        1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,439,431,1,0,0,0,439,440,
        1,0,0,0,440,441,1,0,0,0,441,442,5,23,0,0,442,51,1,0,0,0,443,445,
        3,64,32,0,444,446,3,72,36,0,445,444,1,0,0,0,445,446,1,0,0,0,446,
        448,1,0,0,0,447,449,3,192,96,0,448,447,1,0,0,0,448,449,1,0,0,0,449,
        53,1,0,0,0,450,459,5,22,0,0,451,456,3,56,28,0,452,453,5,16,0,0,453,
        455,3,56,28,0,454,452,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,
        457,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,459,451,1,0,0,0,459,
        460,1,0,0,0,460,461,1,0,0,0,461,462,5,23,0,0,462,55,1,0,0,0,463,
        465,3,64,32,0,464,466,5,127,0,0,465,464,1,0,0,0,465,466,1,0,0,0,
        466,468,1,0,0,0,467,469,3,192,96,0,468,467,1,0,0,0,468,469,1,0,0,
        0,469,57,1,0,0,0,470,479,5,22,0,0,471,476,3,60,30,0,472,473,5,16,
        0,0,473,475,3,60,30,0,474,472,1,0,0,0,475,478,1,0,0,0,476,474,1,
        0,0,0,476,477,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,479,471,1,
        0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,482,5,23,0,0,482,59,1,
        0,0,0,483,485,3,64,32,0,484,486,3,72,36,0,485,484,1,0,0,0,485,486,
        1,0,0,0,486,61,1,0,0,0,487,489,3,64,32,0,488,490,3,72,36,0,489,488,
        1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,492,3,192,96,0,492,63,
        1,0,0,0,493,494,6,32,-1,0,494,501,3,134,67,0,495,501,3,66,33,0,496,
        501,3,68,34,0,497,501,3,70,35,0,498,499,5,35,0,0,499,501,5,129,0,
        0,500,493,1,0,0,0,500,495,1,0,0,0,500,496,1,0,0,0,500,497,1,0,0,
        0,500,498,1,0,0,0,501,510,1,0,0,0,502,503,10,3,0,0,503,505,5,33,
        0,0,504,506,3,136,68,0,505,504,1,0,0,0,505,506,1,0,0,0,506,507,1,
        0,0,0,507,509,5,34,0,0,508,502,1,0,0,0,509,512,1,0,0,0,510,508,1,
        0,0,0,510,511,1,0,0,0,511,65,1,0,0,0,512,510,1,0,0,0,513,518,3,192,
        96,0,514,515,5,36,0,0,515,517,3,192,96,0,516,514,1,0,0,0,517,520,
        1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,67,1,0,0,0,520,518,1,
        0,0,0,521,522,5,37,0,0,522,523,5,22,0,0,523,524,3,134,67,0,524,525,
        5,38,0,0,525,526,3,64,32,0,526,527,5,23,0,0,527,69,1,0,0,0,528,529,
        5,29,0,0,529,535,3,58,29,0,530,534,5,128,0,0,531,534,5,126,0,0,532,
        534,3,74,37,0,533,530,1,0,0,0,533,531,1,0,0,0,533,532,1,0,0,0,534,
        537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,540,1,0,0,0,537,
        535,1,0,0,0,538,539,5,30,0,0,539,541,3,58,29,0,540,538,1,0,0,0,540,
        541,1,0,0,0,541,71,1,0,0,0,542,543,7,4,0,0,543,73,1,0,0,0,544,545,
        7,5,0,0,545,75,1,0,0,0,546,550,5,15,0,0,547,549,3,78,39,0,548,547,
        1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,
        1,0,0,0,552,550,1,0,0,0,553,554,5,17,0,0,554,77,1,0,0,0,555,569,
        3,106,53,0,556,569,3,108,54,0,557,569,3,112,56,0,558,569,3,76,38,
        0,559,569,3,114,57,0,560,569,3,116,58,0,561,569,3,118,59,0,562,569,
        3,120,60,0,563,569,3,122,61,0,564,569,3,124,62,0,565,569,3,126,63,
        0,566,569,3,110,55,0,567,569,3,104,52,0,568,555,1,0,0,0,568,556,
        1,0,0,0,568,557,1,0,0,0,568,558,1,0,0,0,568,559,1,0,0,0,568,560,
        1,0,0,0,568,561,1,0,0,0,568,562,1,0,0,0,568,563,1,0,0,0,568,564,
        1,0,0,0,568,565,1,0,0,0,568,566,1,0,0,0,568,567,1,0,0,0,569,79,1,
        0,0,0,570,571,3,136,68,0,571,572,5,2,0,0,572,81,1,0,0,0,573,574,
        5,42,0,0,574,83,1,0,0,0,575,576,5,43,0,0,576,85,1,0,0,0,577,579,
        3,84,42,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,
        3,192,96,0,581,87,1,0,0,0,582,584,3,86,43,0,583,582,1,0,0,0,583,
        584,1,0,0,0,584,585,1,0,0,0,585,587,5,16,0,0,586,583,1,0,0,0,587,
        590,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,592,1,0,0,0,590,
        588,1,0,0,0,591,593,3,86,43,0,592,591,1,0,0,0,592,593,1,0,0,0,593,
        89,1,0,0,0,594,595,7,6,0,0,595,91,1,0,0,0,596,597,7,7,0,0,597,93,
        1,0,0,0,598,599,7,8,0,0,599,95,1,0,0,0,600,601,7,9,0,0,601,97,1,
        0,0,0,602,603,3,82,41,0,603,604,5,22,0,0,604,605,3,92,46,0,605,612,
        5,16,0,0,606,608,3,192,96,0,607,606,1,0,0,0,607,608,1,0,0,0,608,
        609,1,0,0,0,609,611,5,16,0,0,610,607,1,0,0,0,611,614,1,0,0,0,612,
        610,1,0,0,0,612,613,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,615,
        617,3,192,96,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,
        620,5,16,0,0,619,621,3,138,69,0,620,619,1,0,0,0,620,621,1,0,0,0,
        621,622,1,0,0,0,622,623,5,23,0,0,623,99,1,0,0,0,624,625,3,82,41,
        0,625,626,5,22,0,0,626,627,3,94,47,0,627,634,5,16,0,0,628,630,3,
        192,96,0,629,628,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,633,
        5,16,0,0,632,629,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,
        1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,637,639,3,192,96,0,638,637,
        1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,5,23,0,0,641,101,
        1,0,0,0,642,643,3,82,41,0,643,644,5,22,0,0,644,645,3,96,48,0,645,
        646,5,16,0,0,646,647,3,88,44,0,647,648,5,16,0,0,648,649,3,138,69,
        0,649,650,5,23,0,0,650,103,1,0,0,0,651,655,3,98,49,0,652,655,3,100,
        50,0,653,655,3,102,51,0,654,651,1,0,0,0,654,652,1,0,0,0,654,653,
        1,0,0,0,655,658,1,0,0,0,656,657,5,57,0,0,657,659,3,90,45,0,658,656,
        1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,661,5,2,0,0,661,105,
        1,0,0,0,662,663,5,58,0,0,663,664,5,22,0,0,664,665,3,136,68,0,665,
        666,5,23,0,0,666,669,3,78,39,0,667,668,5,59,0,0,668,670,3,78,39,
        0,669,667,1,0,0,0,669,670,1,0,0,0,670,107,1,0,0,0,671,672,5,60,0,
        0,672,673,5,22,0,0,673,674,3,136,68,0,674,675,5,23,0,0,675,676,3,
        78,39,0,676,109,1,0,0,0,677,680,3,128,64,0,678,680,3,80,40,0,679,
        677,1,0,0,0,679,678,1,0,0,0,680,111,1,0,0,0,681,682,5,25,0,0,682,
        685,5,22,0,0,683,686,3,110,55,0,684,686,5,2,0,0,685,683,1,0,0,0,
        685,684,1,0,0,0,686,689,1,0,0,0,687,690,3,80,40,0,688,690,5,2,0,
        0,689,687,1,0,0,0,689,688,1,0,0,0,690,692,1,0,0,0,691,693,3,136,
        68,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,1,0,0,0,694,695,5,23,
        0,0,695,696,3,78,39,0,696,113,1,0,0,0,697,699,5,61,0,0,698,700,5,
        136,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,702,
        3,150,75,0,702,115,1,0,0,0,703,704,5,62,0,0,704,705,3,78,39,0,705,
        706,5,60,0,0,706,707,5,22,0,0,707,708,3,136,68,0,708,709,5,23,0,
        0,709,710,5,2,0,0,710,117,1,0,0,0,711,712,5,125,0,0,712,713,5,2,
        0,0,713,119,1,0,0,0,714,715,5,123,0,0,715,716,5,2,0,0,716,121,1,
        0,0,0,717,719,5,63,0,0,718,720,3,136,68,0,719,718,1,0,0,0,719,720,
        1,0,0,0,720,721,1,0,0,0,721,722,5,2,0,0,722,123,1,0,0,0,723,724,
        5,64,0,0,724,725,5,2,0,0,725,125,1,0,0,0,726,727,5,65,0,0,727,728,
        3,148,74,0,728,729,5,2,0,0,729,127,1,0,0,0,730,731,5,66,0,0,731,
        738,3,132,66,0,732,738,3,62,31,0,733,734,5,22,0,0,734,735,3,130,
        65,0,735,736,5,23,0,0,736,738,1,0,0,0,737,730,1,0,0,0,737,732,1,
        0,0,0,737,733,1,0,0,0,738,741,1,0,0,0,739,740,5,10,0,0,740,742,3,
        136,68,0,741,739,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,744,
        5,2,0,0,744,129,1,0,0,0,745,747,3,62,31,0,746,745,1,0,0,0,746,747,
        1,0,0,0,747,754,1,0,0,0,748,750,5,16,0,0,749,751,3,62,31,0,750,749,
        1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,748,1,0,0,0,753,756,
        1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,131,1,0,0,0,756,754,
        1,0,0,0,757,764,5,22,0,0,758,760,3,192,96,0,759,758,1,0,0,0,759,
        760,1,0,0,0,760,761,1,0,0,0,761,763,5,16,0,0,762,759,1,0,0,0,763,
        766,1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,768,1,0,0,0,766,
        764,1,0,0,0,767,769,3,192,96,0,768,767,1,0,0,0,768,769,1,0,0,0,769,
        770,1,0,0,0,770,771,5,23,0,0,771,133,1,0,0,0,772,773,7,10,0,0,773,
        135,1,0,0,0,774,775,6,68,-1,0,775,776,5,72,0,0,776,793,3,64,32,0,
        777,778,5,22,0,0,778,779,3,136,68,0,779,780,5,23,0,0,780,793,1,0,
        0,0,781,782,7,11,0,0,782,793,3,136,68,19,783,784,7,12,0,0,784,793,
        3,136,68,18,785,786,7,13,0,0,786,793,3,136,68,17,787,788,5,77,0,
        0,788,793,3,136,68,16,789,790,5,5,0,0,790,793,3,136,68,15,791,793,
        3,138,69,0,792,774,1,0,0,0,792,777,1,0,0,0,792,781,1,0,0,0,792,783,
        1,0,0,0,792,785,1,0,0,0,792,787,1,0,0,0,792,789,1,0,0,0,792,791,
        1,0,0,0,793,853,1,0,0,0,794,795,10,14,0,0,795,796,5,78,0,0,796,852,
        3,136,68,15,797,798,10,13,0,0,798,799,7,14,0,0,799,852,3,136,68,
        14,800,801,10,12,0,0,801,802,7,12,0,0,802,852,3,136,68,13,803,804,
        10,11,0,0,804,805,7,15,0,0,805,852,3,136,68,12,806,807,10,10,0,0,
        807,808,5,83,0,0,808,852,3,136,68,11,809,810,10,9,0,0,810,811,5,
        4,0,0,811,852,3,136,68,10,812,813,10,8,0,0,813,814,5,84,0,0,814,
        852,3,136,68,9,815,816,10,7,0,0,816,817,7,16,0,0,817,852,3,136,68,
        8,818,819,10,6,0,0,819,820,7,17,0,0,820,852,3,136,68,7,821,822,10,
        5,0,0,822,823,5,87,0,0,823,852,3,136,68,6,824,825,10,4,0,0,825,826,
        5,88,0,0,826,852,3,136,68,5,827,828,10,3,0,0,828,829,5,89,0,0,829,
        830,3,136,68,0,830,831,5,90,0,0,831,832,3,136,68,4,832,852,1,0,0,
        0,833,834,10,2,0,0,834,835,7,18,0,0,835,852,3,136,68,3,836,837,10,
        25,0,0,837,852,7,11,0,0,838,839,10,23,0,0,839,840,5,33,0,0,840,841,
        3,136,68,0,841,842,5,34,0,0,842,852,1,0,0,0,843,844,10,22,0,0,844,
        845,5,22,0,0,845,846,3,146,73,0,846,847,5,23,0,0,847,852,1,0,0,0,
        848,849,10,21,0,0,849,850,5,36,0,0,850,852,3,192,96,0,851,794,1,
        0,0,0,851,797,1,0,0,0,851,800,1,0,0,0,851,803,1,0,0,0,851,806,1,
        0,0,0,851,809,1,0,0,0,851,812,1,0,0,0,851,815,1,0,0,0,851,818,1,
        0,0,0,851,821,1,0,0,0,851,824,1,0,0,0,851,827,1,0,0,0,851,833,1,
        0,0,0,851,836,1,0,0,0,851,838,1,0,0,0,851,843,1,0,0,0,851,848,1,
        0,0,0,852,855,1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,137,1,
        0,0,0,855,853,1,0,0,0,856,873,5,116,0,0,857,873,3,190,95,0,858,873,
        5,120,0,0,859,873,5,136,0,0,860,863,3,192,96,0,861,862,5,33,0,0,
        862,864,5,34,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,873,1,0,0,0,
        865,873,5,133,0,0,866,873,3,186,93,0,867,870,3,188,94,0,868,869,
        5,33,0,0,869,871,5,34,0,0,870,868,1,0,0,0,870,871,1,0,0,0,871,873,
        1,0,0,0,872,856,1,0,0,0,872,857,1,0,0,0,872,858,1,0,0,0,872,859,
        1,0,0,0,872,860,1,0,0,0,872,865,1,0,0,0,872,866,1,0,0,0,872,867,
        1,0,0,0,873,139,1,0,0,0,874,879,3,136,68,0,875,876,5,16,0,0,876,
        878,3,136,68,0,877,875,1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,
        880,1,0,0,0,880,141,1,0,0,0,881,879,1,0,0,0,882,887,3,144,72,0,883,
        884,5,16,0,0,884,886,3,144,72,0,885,883,1,0,0,0,886,889,1,0,0,0,
        887,885,1,0,0,0,887,888,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,
        890,892,5,16,0,0,891,890,1,0,0,0,891,892,1,0,0,0,892,143,1,0,0,0,
        893,894,3,192,96,0,894,895,5,90,0,0,895,896,3,136,68,0,896,145,1,
        0,0,0,897,899,5,15,0,0,898,900,3,142,71,0,899,898,1,0,0,0,899,900,
        1,0,0,0,900,901,1,0,0,0,901,906,5,17,0,0,902,904,3,140,70,0,903,
        902,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,897,1,0,0,0,905,
        903,1,0,0,0,906,147,1,0,0,0,907,908,3,136,68,0,908,909,5,22,0,0,
        909,910,3,146,73,0,910,911,5,23,0,0,911,149,1,0,0,0,912,916,5,15,
        0,0,913,915,3,152,76,0,914,913,1,0,0,0,915,918,1,0,0,0,916,914,1,
        0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,916,1,0,0,0,919,920,5,
        17,0,0,920,151,1,0,0,0,921,939,3,192,96,0,922,939,3,150,75,0,923,
        939,3,154,77,0,924,939,3,158,79,0,925,939,3,160,80,0,926,939,3,166,
        83,0,927,939,3,168,84,0,928,939,3,170,85,0,929,939,3,174,87,0,930,
        939,3,178,89,0,931,939,3,180,90,0,932,939,5,123,0,0,933,939,5,125,
        0,0,934,939,3,184,92,0,935,939,3,190,95,0,936,939,5,136,0,0,937,
        939,5,120,0,0,938,921,1,0,0,0,938,922,1,0,0,0,938,923,1,0,0,0,938,
        924,1,0,0,0,938,925,1,0,0,0,938,926,1,0,0,0,938,927,1,0,0,0,938,
        928,1,0,0,0,938,929,1,0,0,0,938,930,1,0,0,0,938,931,1,0,0,0,938,
        932,1,0,0,0,938,933,1,0,0,0,938,934,1,0,0,0,938,935,1,0,0,0,938,
        936,1,0,0,0,938,937,1,0,0,0,939,153,1,0,0,0,940,943,3,156,78,0,941,
        943,3,182,91,0,942,940,1,0,0,0,942,941,1,0,0,0,943,155,1,0,0,0,944,
        949,5,63,0,0,945,949,5,35,0,0,946,949,5,69,0,0,947,949,3,192,96,
        0,948,944,1,0,0,0,948,945,1,0,0,0,948,946,1,0,0,0,948,947,1,0,0,
        0,949,962,1,0,0,0,950,952,5,22,0,0,951,953,3,154,77,0,952,951,1,
        0,0,0,952,953,1,0,0,0,953,958,1,0,0,0,954,955,5,16,0,0,955,957,3,
        154,77,0,956,954,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,
        1,0,0,0,959,961,1,0,0,0,960,958,1,0,0,0,961,963,5,23,0,0,962,950,
        1,0,0,0,962,963,1,0,0,0,963,157,1,0,0,0,964,965,5,101,0,0,965,968,
        3,162,81,0,966,967,5,102,0,0,967,969,3,154,77,0,968,966,1,0,0,0,
        968,969,1,0,0,0,969,159,1,0,0,0,970,971,3,162,81,0,971,972,5,102,
        0,0,972,973,3,154,77,0,973,161,1,0,0,0,974,980,3,192,96,0,975,976,
        5,22,0,0,976,977,3,164,82,0,977,978,5,23,0,0,978,980,1,0,0,0,979,
        974,1,0,0,0,979,975,1,0,0,0,980,163,1,0,0,0,981,986,3,192,96,0,982,
        983,5,16,0,0,983,985,3,192,96,0,984,982,1,0,0,0,985,988,1,0,0,0,
        986,984,1,0,0,0,986,987,1,0,0,0,987,165,1,0,0,0,988,986,1,0,0,0,
        989,990,5,103,0,0,990,991,3,192,96,0,991,167,1,0,0,0,992,993,3,192,
        96,0,993,994,5,90,0,0,994,169,1,0,0,0,995,996,5,104,0,0,996,1000,
        3,154,77,0,997,999,3,172,86,0,998,997,1,0,0,0,999,1002,1,0,0,0,1000,
        998,1,0,0,0,1000,1001,1,0,0,0,1001,171,1,0,0,0,1002,1000,1,0,0,0,
        1003,1004,5,105,0,0,1004,1005,3,182,91,0,1005,1006,3,150,75,0,1006,
        1010,1,0,0,0,1007,1008,5,106,0,0,1008,1010,3,150,75,0,1009,1003,
        1,0,0,0,1009,1007,1,0,0,0,1010,173,1,0,0,0,1011,1012,5,29,0,0,1012,
        1013,3,192,96,0,1013,1015,5,22,0,0,1014,1016,3,164,82,0,1015,1014,
        1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1019,5,23,0,0,1018,
        1020,3,176,88,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,1021,1,
        0,0,0,1021,1022,3,150,75,0,1022,175,1,0,0,0,1023,1024,5,107,0,0,
        1024,1025,3,164,82,0,1025,177,1,0,0,0,1026,1029,5,25,0,0,1027,1030,
        3,150,75,0,1028,1030,3,154,77,0,1029,1027,1,0,0,0,1029,1028,1,0,
        0,0,1030,1031,1,0,0,0,1031,1034,3,154,77,0,1032,1035,3,150,75,0,
        1033,1035,3,154,77,0,1034,1032,1,0,0,0,1034,1033,1,0,0,0,1035,1036,
        1,0,0,0,1036,1037,3,150,75,0,1037,179,1,0,0,0,1038,1039,5,58,0,0,
        1039,1040,3,154,77,0,1040,1041,3,150,75,0,1041,181,1,0,0,0,1042,
        1043,7,19,0,0,1043,183,1,0,0,0,1044,1045,5,61,0,0,1045,1046,3,192,
        96,0,1046,1047,3,150,75,0,1047,185,1,0,0,0,1048,1050,5,22,0,0,1049,
        1051,3,136,68,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,1058,1,
        0,0,0,1052,1054,5,16,0,0,1053,1055,3,136,68,0,1054,1053,1,0,0,0,
        1054,1055,1,0,0,0,1055,1057,1,0,0,0,1056,1052,1,0,0,0,1057,1060,
        1,0,0,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,
        1058,1,0,0,0,1061,1075,5,23,0,0,1062,1071,5,33,0,0,1063,1068,3,136,
        68,0,1064,1065,5,16,0,0,1065,1067,3,136,68,0,1066,1064,1,0,0,0,1067,
        1070,1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,1072,1,0,0,
        0,1070,1068,1,0,0,0,1071,1063,1,0,0,0,1071,1072,1,0,0,0,1072,1073,
        1,0,0,0,1073,1075,5,34,0,0,1074,1048,1,0,0,0,1074,1062,1,0,0,0,1075,
        187,1,0,0,0,1076,1079,3,134,67,0,1077,1079,3,66,33,0,1078,1076,1,
        0,0,0,1078,1077,1,0,0,0,1079,189,1,0,0,0,1080,1082,7,20,0,0,1081,
        1083,5,119,0,0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,191,1,0,
        0,0,1084,1085,7,21,0,0,1085,193,1,0,0,0,121,197,199,213,217,222,
        229,235,241,245,257,265,270,280,283,289,297,300,310,316,322,331,
        345,348,360,367,370,373,377,382,386,397,399,403,409,419,425,436,
        439,445,448,456,459,465,468,476,479,485,489,500,505,510,518,533,
        535,540,550,568,578,583,588,592,607,612,616,620,629,634,638,654,
        658,669,679,685,689,692,699,719,737,741,746,750,754,759,764,768,
        792,851,853,863,870,872,879,887,891,899,903,905,916,938,942,948,
        952,958,962,968,979,986,1000,1009,1015,1019,1029,1034,1050,1054,
        1058,1068,1071,1074,1078,1082
    ]

class CryptlangParser ( Parser ):

    grammarFileName = "Cryptlang.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'Cryptlang'", "'^'", 
                     "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                     "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'using'", 
                     "'for'", "'struct'", "'constructor'", "'modifier'", 
                     "'function'", "'returns'", "'event'", "'enum'", "'['", 
                     "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", 
                     "'storage'", "'calldata'", "'@require'", "'#'", "'SHA3-256'", 
                     "'SHA2-256'", "'RIPEMD160'", "'BLAKE2F'", "'ECDSA'", 
                     "'RSA'", "'BLS'", "'Schorr'", "'Pedersen'", "'Merkel'", 
                     "'Groth16'", "'PLONK'", "'GM17'", "'with'", "'if'", 
                     "'else'", "'while'", "'assembly'", "'do'", "'return'", 
                     "'throw'", "'emit'", "'var'", "'bool'", "'string'", 
                     "'byte'", "'++'", "'--'", "'new'", "'+'", "'-'", "'after'", 
                     "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", 
                     "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", 
                     "':'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", 
                     "'switch'", "'case'", "'default'", "'->'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'anonymous'", "'break'", "'constant'", 
                     "'continue'", "'external'", "'indexed'", "'internal'", 
                     "'payable'", "'private'", "'public'", "'pure'", "'type'", 
                     "'view'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "NatSpecSingleLine", "NatSpecMultiLine", "Int", "Uint", 
                      "Byte", "Fixed", "Ufixed", "VersionLiteral", "BooleanLiteral", 
                      "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", 
                      "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", 
                      "ConstantKeyword", "ContinueKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "PureKeyword", 
                      "TypeKeyword", "ViewKeyword", "Identifier", "StringLiteral", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_natSpec = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_usingForDeclaration = 14
    RULE_structDefinition = 15
    RULE_constructorDefinition = 16
    RULE_modifierDefinition = 17
    RULE_modifierInvocation = 18
    RULE_functionDefinition = 19
    RULE_returnParameters = 20
    RULE_modifierList = 21
    RULE_eventDefinition = 22
    RULE_enumValue = 23
    RULE_enumDefinition = 24
    RULE_parameterList = 25
    RULE_parameter = 26
    RULE_eventParameterList = 27
    RULE_eventParameter = 28
    RULE_functionTypeParameterList = 29
    RULE_functionTypeParameter = 30
    RULE_variableDeclaration = 31
    RULE_typeName = 32
    RULE_userDefinedTypeName = 33
    RULE_mapping = 34
    RULE_functionTypeName = 35
    RULE_storageLocation = 36
    RULE_stateMutability = 37
    RULE_block = 38
    RULE_statement = 39
    RULE_expressionStatement = 40
    RULE_statementSymbol = 41
    RULE_privateSymbol = 42
    RULE_privateIdentifier = 43
    RULE_privateIdentifierList = 44
    RULE_hashMethod = 45
    RULE_signatureMethod = 46
    RULE_commitmentMethod = 47
    RULE_proofMethod = 48
    RULE_signatureStatement = 49
    RULE_commitmentStatement = 50
    RULE_proofStatement = 51
    RULE_taskStatement = 52
    RULE_ifStatement = 53
    RULE_whileStatement = 54
    RULE_simpleStatement = 55
    RULE_forStatement = 56
    RULE_inlineAssemblyStatement = 57
    RULE_doWhileStatement = 58
    RULE_continueStatement = 59
    RULE_breakStatement = 60
    RULE_returnStatement = 61
    RULE_throwStatement = 62
    RULE_emitStatement = 63
    RULE_variableDeclarationStatement = 64
    RULE_variableDeclarationList = 65
    RULE_identifierList = 66
    RULE_elementaryTypeName = 67
    RULE_expression = 68
    RULE_primaryExpression = 69
    RULE_expressionList = 70
    RULE_nameValueList = 71
    RULE_nameValue = 72
    RULE_functionCallArguments = 73
    RULE_functionCall = 74
    RULE_assemblyBlock = 75
    RULE_assemblyItem = 76
    RULE_assemblyExpression = 77
    RULE_assemblyCall = 78
    RULE_assemblyLocalDefinition = 79
    RULE_assemblyAssignment = 80
    RULE_assemblyIdentifierOrList = 81
    RULE_assemblyIdentifierList = 82
    RULE_assemblyStackAssignment = 83
    RULE_labelDefinition = 84
    RULE_assemblySwitch = 85
    RULE_assemblyCase = 86
    RULE_assemblyFunctionDefinition = 87
    RULE_assemblyFunctionReturns = 88
    RULE_assemblyFor = 89
    RULE_assemblyIf = 90
    RULE_assemblyLiteral = 91
    RULE_subAssembly = 92
    RULE_tupleExpression = 93
    RULE_typeNameExpression = 94
    RULE_numberLiteral = 95
    RULE_identifier = 96

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "natSpec", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "constructorDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mapping", "functionTypeName", "storageLocation", "stateMutability", 
                   "block", "statement", "expressionStatement", "statementSymbol", 
                   "privateSymbol", "privateIdentifier", "privateIdentifierList", 
                   "hashMethod", "signatureMethod", "commitmentMethod", 
                   "proofMethod", "signatureStatement", "commitmentStatement", 
                   "proofStatement", "taskStatement", "ifStatement", "whileStatement", 
                   "simpleStatement", "forStatement", "inlineAssemblyStatement", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "throwStatement", "emitStatement", 
                   "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    NatSpecSingleLine=108
    NatSpecMultiLine=109
    Int=110
    Uint=111
    Byte=112
    Fixed=113
    Ufixed=114
    VersionLiteral=115
    BooleanLiteral=116
    DecimalNumber=117
    HexNumber=118
    NumberUnit=119
    HexLiteral=120
    ReservedKeyword=121
    AnonymousKeyword=122
    BreakKeyword=123
    ConstantKeyword=124
    ContinueKeyword=125
    ExternalKeyword=126
    IndexedKeyword=127
    InternalKeyword=128
    PayableKeyword=129
    PrivateKeyword=130
    PublicKeyword=131
    PureKeyword=132
    TypeKeyword=133
    ViewKeyword=134
    Identifier=135
    StringLiteral=136
    WS=137
    COMMENT=138
    LINE_COMMENT=139

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CryptlangParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = CryptlangParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1839106) != 0) or _la==108 or _la==109:
                self.state = 197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 194
                    self.pragmaDirective()
                    pass
                elif token in [12]:
                    self.state = 195
                    self.importDirective()
                    pass
                elif token in [18, 19, 20, 108, 109]:
                    self.state = 196
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(CryptlangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(CryptlangParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(CryptlangParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = CryptlangParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(CryptlangParser.T__0)
            self.state = 205
            self.pragmaName()
            self.state = 206
            self.pragmaValue()
            self.state = 207
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = CryptlangParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(CryptlangParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(CryptlangParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = CryptlangParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 212
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = CryptlangParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.versionConstraint()
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0) or _la==115:
                self.state = 216
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = CryptlangParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(CryptlangParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(CryptlangParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = CryptlangParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0):
                self.state = 221
                self.versionOperator()


            self.state = 224
            self.match(CryptlangParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = CryptlangParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.identifier()
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 227
                self.match(CryptlangParser.T__10)
                self.state = 228
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = CryptlangParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 231
                self.match(CryptlangParser.T__11)
                self.state = 232
                self.match(CryptlangParser.StringLiteral)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 233
                    self.match(CryptlangParser.T__10)
                    self.state = 234
                    self.identifier()


                self.state = 237
                self.match(CryptlangParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 238
                self.match(CryptlangParser.T__11)
                self.state = 241
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 239
                    self.match(CryptlangParser.T__12)
                    pass
                elif token in [14, 41, 135]:
                    self.state = 240
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 243
                    self.match(CryptlangParser.T__10)
                    self.state = 244
                    self.identifier()


                self.state = 247
                self.match(CryptlangParser.T__13)
                self.state = 248
                self.match(CryptlangParser.StringLiteral)
                self.state = 249
                self.match(CryptlangParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 250
                self.match(CryptlangParser.T__11)
                self.state = 251
                self.match(CryptlangParser.T__14)
                self.state = 252
                self.importDeclaration()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 253
                    self.match(CryptlangParser.T__15)
                    self.state = 254
                    self.importDeclaration()
                    self.state = 259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 260
                self.match(CryptlangParser.T__16)
                self.state = 261
                self.match(CryptlangParser.T__13)
                self.state = 262
                self.match(CryptlangParser.StringLiteral)
                self.state = 263
                self.match(CryptlangParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NatSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NatSpecSingleLine(self):
            return self.getToken(CryptlangParser.NatSpecSingleLine, 0)

        def NatSpecMultiLine(self):
            return self.getToken(CryptlangParser.NatSpecMultiLine, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_natSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatSpec" ):
                listener.enterNatSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatSpec" ):
                listener.exitNatSpec(self)




    def natSpec(self):

        localctx = CryptlangParser.NatSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_natSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            _la = self._input.LA(1)
            if not(_la==108 or _la==109):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ContractPartContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = CryptlangParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108 or _la==109:
                self.state = 269
                self.natSpec()


            self.state = 272
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 273
            self.identifier()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 274
                self.match(CryptlangParser.T__20)
                self.state = 275
                self.inheritanceSpecifier()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 276
                    self.match(CryptlangParser.T__15)
                    self.state = 277
                    self.inheritanceSpecifier()
                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 285
            self.match(CryptlangParser.T__14)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994555716609) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 134217855) != 0):
                self.state = 286
                self.contractPart()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = CryptlangParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.userDefinedTypeName()
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 295
                self.match(CryptlangParser.T__21)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                    self.state = 296
                    self.expressionList()


                self.state = 299
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.StructDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = CryptlangParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 304
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 305
                self.constructorDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 306
                self.modifierDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 307
                self.functionDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 308
                self.eventDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 309
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PublicKeyword)
            else:
                return self.getToken(CryptlangParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PrivateKeyword)
            else:
                return self.getToken(CryptlangParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ConstantKeyword)
            else:
                return self.getToken(CryptlangParser.ConstantKeyword, i)

        def getRuleIndex(self):
            return CryptlangParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = CryptlangParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.typeName(0)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 209) != 0):
                self.state = 313
                _la = self._input.LA(1)
                if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 209) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 319
            self.identifier()
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 320
                self.match(CryptlangParser.T__9)
                self.state = 321
                self.expression(0)


            self.state = 324
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = CryptlangParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(CryptlangParser.T__23)
            self.state = 327
            self.identifier()
            self.state = 328
            self.match(CryptlangParser.T__24)
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 329
                self.match(CryptlangParser.T__12)
                pass
            elif token in [14, 29, 35, 37, 41, 66, 67, 68, 69, 110, 111, 112, 113, 114, 135]:
                self.state = 330
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 333
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = CryptlangParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(CryptlangParser.T__25)
            self.state = 336
            self.identifier()
            self.state = 337
            self.match(CryptlangParser.T__14)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994555293697) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 33554463) != 0):
                self.state = 338
                self.variableDeclaration()
                self.state = 339
                self.match(CryptlangParser.T__1)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994555293697) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 33554463) != 0):
                    self.state = 340
                    self.variableDeclaration()
                    self.state = 341
                    self.match(CryptlangParser.T__1)
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 350
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)




    def constructorDefinition(self):

        localctx = CryptlangParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(CryptlangParser.T__26)
            self.state = 353
            self.parameterList()
            self.state = 354
            self.modifierList()
            self.state = 355
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = CryptlangParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(CryptlangParser.T__27)
            self.state = 358
            self.identifier()
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 359
                self.parameterList()


            self.state = 362
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = CryptlangParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.identifier()
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 365
                self.match(CryptlangParser.T__21)
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                    self.state = 366
                    self.expressionList()


                self.state = 369
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(CryptlangParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = CryptlangParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108 or _la==109:
                self.state = 372
                self.natSpec()


            self.state = 375
            self.match(CryptlangParser.T__28)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==135:
                self.state = 376
                self.identifier()


            self.state = 379
            self.parameterList()
            self.state = 380
            self.modifierList()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 381
                self.returnParameters()


            self.state = 386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 384
                self.match(CryptlangParser.T__1)
                pass
            elif token in [15]:
                self.state = 385
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = CryptlangParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(CryptlangParser.T__29)
            self.state = 389
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ExternalKeyword)
            else:
                return self.getToken(CryptlangParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PublicKeyword)
            else:
                return self.getToken(CryptlangParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PrivateKeyword)
            else:
                return self.getToken(CryptlangParser.PrivateKeyword, i)

        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = CryptlangParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14 or _la==41 or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 3573) != 0):
                self.state = 397
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 41, 135]:
                    self.state = 391
                    self.modifierInvocation()
                    pass
                elif token in [124, 129, 132, 134]:
                    self.state = 392
                    self.stateMutability()
                    pass
                elif token in [126]:
                    self.state = 393
                    self.match(CryptlangParser.ExternalKeyword)
                    pass
                elif token in [131]:
                    self.state = 394
                    self.match(CryptlangParser.PublicKeyword)
                    pass
                elif token in [128]:
                    self.state = 395
                    self.match(CryptlangParser.InternalKeyword)
                    pass
                elif token in [130]:
                    self.state = 396
                    self.match(CryptlangParser.PrivateKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(CryptlangParser.EventParameterListContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def AnonymousKeyword(self):
            return self.getToken(CryptlangParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = CryptlangParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108 or _la==109:
                self.state = 402
                self.natSpec()


            self.state = 405
            self.match(CryptlangParser.T__30)
            self.state = 406
            self.identifier()
            self.state = 407
            self.eventParameterList()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 408
                self.match(CryptlangParser.AnonymousKeyword)


            self.state = 411
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = CryptlangParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.EnumValueContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = CryptlangParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(CryptlangParser.T__31)
            self.state = 416
            self.identifier()
            self.state = 417
            self.match(CryptlangParser.T__14)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==135:
                self.state = 418
                self.enumValue()


            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 421
                self.match(CryptlangParser.T__15)
                self.state = 422
                self.enumValue()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 428
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = CryptlangParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(CryptlangParser.T__21)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994555293697) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 33554463) != 0):
                self.state = 431
                self.parameter()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 432
                    self.match(CryptlangParser.T__15)
                    self.state = 433
                    self.parameter()
                    self.state = 438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 441
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = CryptlangParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.typeName(0)
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 444
                self.storageLocation()


            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==135:
                self.state = 447
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.EventParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = CryptlangParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(CryptlangParser.T__21)
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994555293697) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 33554463) != 0):
                self.state = 451
                self.eventParameter()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 452
                    self.match(CryptlangParser.T__15)
                    self.state = 453
                    self.eventParameter()
                    self.state = 458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 461
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(CryptlangParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = CryptlangParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.typeName(0)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 464
                self.match(CryptlangParser.IndexedKeyword)


            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==135:
                self.state = 467
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = CryptlangParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(CryptlangParser.T__21)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994555293697) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 33554463) != 0):
                self.state = 471
                self.functionTypeParameter()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 472
                    self.match(CryptlangParser.T__15)
                    self.state = 473
                    self.functionTypeParameter()
                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 481
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = CryptlangParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.typeName(0)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0):
                self.state = 484
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = CryptlangParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.typeName(0)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 488
                self.storageLocation()


            self.state = 491
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(CryptlangParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(CryptlangParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CryptlangParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 494
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 495
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 496
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 497
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 498
                self.match(CryptlangParser.T__34)
                self.state = 499
                self.match(CryptlangParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CryptlangParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 502
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 503
                    self.match(CryptlangParser.T__32)
                    self.state = 505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                        self.state = 504
                        self.expression(0)


                    self.state = 507
                    self.match(CryptlangParser.T__33) 
                self.state = 512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = CryptlangParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.identifier()
            self.state = 518
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 514
                    self.match(CryptlangParser.T__35)
                    self.state = 515
                    self.identifier() 
                self.state = 520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = CryptlangParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(CryptlangParser.T__36)
            self.state = 522
            self.match(CryptlangParser.T__21)
            self.state = 523
            self.elementaryTypeName()
            self.state = 524
            self.match(CryptlangParser.T__37)
            self.state = 525
            self.typeName(0)
            self.state = 526
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ExternalKeyword)
            else:
                return self.getToken(CryptlangParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = CryptlangParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(CryptlangParser.T__28)
            self.state = 529
            self.functionTypeParameterList()
            self.state = 535
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 533
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [128]:
                        self.state = 530
                        self.match(CryptlangParser.InternalKeyword)
                        pass
                    elif token in [126]:
                        self.state = 531
                        self.match(CryptlangParser.ExternalKeyword)
                        pass
                    elif token in [124, 129, 132, 134]:
                        self.state = 532
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 537
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 538
                self.match(CryptlangParser.T__29)
                self.state = 539
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = CryptlangParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(CryptlangParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(CryptlangParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(CryptlangParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(CryptlangParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = CryptlangParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            _la = self._input.LA(1)
            if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 1313) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StatementContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StatementContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CryptlangParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(CryptlangParser.T__14)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -864684350422073312) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2988067984016162815) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                self.state = 547
                self.statement()
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 553
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(CryptlangParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(CryptlangParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(CryptlangParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(CryptlangParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(CryptlangParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(CryptlangParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SimpleStatementContext,0)


        def taskStatement(self):
            return self.getTypedRuleContext(CryptlangParser.TaskStatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CryptlangParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statement)
        try:
            self.state = 568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.ifStatement()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self.whileStatement()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 557
                self.forStatement()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 4)
                self.state = 558
                self.block()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 5)
                self.state = 559
                self.inlineAssemblyStatement()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 6)
                self.state = 560
                self.doWhileStatement()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 7)
                self.state = 561
                self.continueStatement()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 8)
                self.state = 562
                self.breakStatement()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 9)
                self.state = 563
                self.returnStatement()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 10)
                self.state = 564
                self.throwStatement()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 11)
                self.state = 565
                self.emitStatement()
                pass
            elif token in [5, 14, 22, 29, 33, 35, 37, 41, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 110, 111, 112, 113, 114, 116, 117, 118, 120, 133, 135, 136]:
                self.enterOuterAlt(localctx, 12)
                self.state = 566
                self.simpleStatement()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 13)
                self.state = 567
                self.taskStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = CryptlangParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.expression(0)
            self.state = 571
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_statementSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementSymbol" ):
                listener.enterStatementSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementSymbol" ):
                listener.exitStatementSymbol(self)




    def statementSymbol(self):

        localctx = CryptlangParser.StatementSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_statementSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(CryptlangParser.T__41)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateSymbol" ):
                listener.enterPrivateSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateSymbol" ):
                listener.exitPrivateSymbol(self)




    def privateSymbol(self):

        localctx = CryptlangParser.PrivateSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_privateSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(CryptlangParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def privateSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.PrivateSymbolContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifier" ):
                listener.enterPrivateIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifier" ):
                listener.exitPrivateIdentifier(self)




    def privateIdentifier(self):

        localctx = CryptlangParser.PrivateIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_privateIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 577
                self.privateSymbol()


            self.state = 580
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privateIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.PrivateIdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.PrivateIdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifierList" ):
                listener.enterPrivateIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifierList" ):
                listener.exitPrivateIdentifierList(self)




    def privateIdentifierList(self):

        localctx = CryptlangParser.PrivateIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_privateIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 10995116294144) != 0) or _la==135:
                        self.state = 582
                        self.privateIdentifier()


                    self.state = 585
                    self.match(CryptlangParser.T__15) 
                self.state = 590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 10995116294144) != 0) or _la==135:
                self.state = 591
                self.privateIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HashMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_hashMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashMethod" ):
                listener.enterHashMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashMethod" ):
                listener.exitHashMethod(self)




    def hashMethod(self):

        localctx = CryptlangParser.HashMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_hashMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 263882790666240) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_signatureMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatureMethod" ):
                listener.enterSignatureMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatureMethod" ):
                listener.exitSignatureMethod(self)




    def signatureMethod(self):

        localctx = CryptlangParser.SignatureMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_signatureMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4222124650659840) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitmentMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_commitmentMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitmentMethod" ):
                listener.enterCommitmentMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitmentMethod" ):
                listener.exitCommitmentMethod(self)




    def commitmentMethod(self):

        localctx = CryptlangParser.CommitmentMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_commitmentMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            _la = self._input.LA(1)
            if not(_la==52 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProofMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_proofMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProofMethod" ):
                listener.enterProofMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProofMethod" ):
                listener.exitProofMethod(self)




    def proofMethod(self):

        localctx = CryptlangParser.ProofMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_proofMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 126100789566373888) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.StatementSymbolContext,0)


        def signatureMethod(self):
            return self.getTypedRuleContext(CryptlangParser.SignatureMethodContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryptlangParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_signatureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatureStatement" ):
                listener.enterSignatureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatureStatement" ):
                listener.exitSignatureStatement(self)




    def signatureStatement(self):

        localctx = CryptlangParser.SignatureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_signatureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.statementSymbol()
            self.state = 603
            self.match(CryptlangParser.T__21)
            self.state = 604
            self.signatureMethod()
            self.state = 605
            self.match(CryptlangParser.T__15)
            self.state = 612
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==135:
                        self.state = 606
                        self.identifier()


                    self.state = 609
                    self.match(CryptlangParser.T__15) 
                self.state = 614
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==135:
                self.state = 615
                self.identifier()


            self.state = 618
            self.match(CryptlangParser.T__15)
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994547396865) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 109053407) != 0):
                self.state = 619
                self.primaryExpression()


            self.state = 622
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.StatementSymbolContext,0)


        def commitmentMethod(self):
            return self.getTypedRuleContext(CryptlangParser.CommitmentMethodContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_commitmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitmentStatement" ):
                listener.enterCommitmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitmentStatement" ):
                listener.exitCommitmentStatement(self)




    def commitmentStatement(self):

        localctx = CryptlangParser.CommitmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_commitmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.statementSymbol()
            self.state = 625
            self.match(CryptlangParser.T__21)
            self.state = 626
            self.commitmentMethod()
            self.state = 627
            self.match(CryptlangParser.T__15)
            self.state = 634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==135:
                        self.state = 628
                        self.identifier()


                    self.state = 631
                    self.match(CryptlangParser.T__15) 
                self.state = 636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==135:
                self.state = 637
                self.identifier()


            self.state = 640
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProofStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.StatementSymbolContext,0)


        def proofMethod(self):
            return self.getTypedRuleContext(CryptlangParser.ProofMethodContext,0)


        def privateIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.PrivateIdentifierListContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryptlangParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_proofStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProofStatement" ):
                listener.enterProofStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProofStatement" ):
                listener.exitProofStatement(self)




    def proofStatement(self):

        localctx = CryptlangParser.ProofStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_proofStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.statementSymbol()
            self.state = 643
            self.match(CryptlangParser.T__21)
            self.state = 644
            self.proofMethod()
            self.state = 645
            self.match(CryptlangParser.T__15)
            self.state = 646
            self.privateIdentifierList()
            self.state = 647
            self.match(CryptlangParser.T__15)
            self.state = 648
            self.primaryExpression()
            self.state = 649
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signatureStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SignatureStatementContext,0)


        def commitmentStatement(self):
            return self.getTypedRuleContext(CryptlangParser.CommitmentStatementContext,0)


        def proofStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ProofStatementContext,0)


        def hashMethod(self):
            return self.getTypedRuleContext(CryptlangParser.HashMethodContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_taskStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTaskStatement" ):
                listener.enterTaskStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTaskStatement" ):
                listener.exitTaskStatement(self)




    def taskStatement(self):

        localctx = CryptlangParser.TaskStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_taskStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 651
                self.signatureStatement()
                pass

            elif la_ == 2:
                self.state = 652
                self.commitmentStatement()
                pass

            elif la_ == 3:
                self.state = 653
                self.proofStatement()
                pass


            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 656
                self.match(CryptlangParser.T__56)
                self.state = 657
                self.hashMethod()


            self.state = 660
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StatementContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StatementContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = CryptlangParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(CryptlangParser.T__57)
            self.state = 663
            self.match(CryptlangParser.T__21)
            self.state = 664
            self.expression(0)
            self.state = 665
            self.match(CryptlangParser.T__22)
            self.state = 666
            self.statement()
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 667
                self.match(CryptlangParser.T__58)
                self.state = 668
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = CryptlangParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(CryptlangParser.T__59)
            self.state = 672
            self.match(CryptlangParser.T__21)
            self.state = 673
            self.expression(0)
            self.state = 674
            self.match(CryptlangParser.T__22)
            self.state = 675
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = CryptlangParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 677
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 678
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = CryptlangParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(CryptlangParser.T__24)
            self.state = 682
            self.match(CryptlangParser.T__21)
            self.state = 685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 22, 29, 33, 35, 37, 41, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 110, 111, 112, 113, 114, 116, 117, 118, 120, 133, 135, 136]:
                self.state = 683
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 684
                self.match(CryptlangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 22, 33, 35, 41, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 110, 111, 112, 113, 114, 116, 117, 118, 120, 133, 135, 136]:
                self.state = 687
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 688
                self.match(CryptlangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                self.state = 691
                self.expression(0)


            self.state = 694
            self.match(CryptlangParser.T__22)
            self.state = 695
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = CryptlangParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(CryptlangParser.T__60)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 698
                self.match(CryptlangParser.StringLiteral)


            self.state = 701
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = CryptlangParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(CryptlangParser.T__61)
            self.state = 704
            self.statement()
            self.state = 705
            self.match(CryptlangParser.T__59)
            self.state = 706
            self.match(CryptlangParser.T__21)
            self.state = 707
            self.expression(0)
            self.state = 708
            self.match(CryptlangParser.T__22)
            self.state = 709
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(CryptlangParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = CryptlangParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(CryptlangParser.ContinueKeyword)
            self.state = 712
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(CryptlangParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = CryptlangParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(CryptlangParser.BreakKeyword)
            self.state = 715
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = CryptlangParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(CryptlangParser.T__62)
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                self.state = 718
                self.expression(0)


            self.state = 721
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = CryptlangParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(CryptlangParser.T__63)
            self.state = 724
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = CryptlangParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(CryptlangParser.T__64)
            self.state = 727
            self.functionCall()
            self.state = 728
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = CryptlangParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 730
                self.match(CryptlangParser.T__65)
                self.state = 731
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 732
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 733
                self.match(CryptlangParser.T__21)
                self.state = 734
                self.variableDeclarationList()
                self.state = 735
                self.match(CryptlangParser.T__22)
                pass


            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 739
                self.match(CryptlangParser.T__9)
                self.state = 740
                self.expression(0)


            self.state = 743
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = CryptlangParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994555293697) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 33554463) != 0):
                self.state = 745
                self.variableDeclaration()


            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 748
                self.match(CryptlangParser.T__15)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 67553994555293697) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 33554463) != 0):
                    self.state = 749
                    self.variableDeclaration()


                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = CryptlangParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(CryptlangParser.T__21)
            self.state = 764
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==135:
                        self.state = 758
                        self.identifier()


                    self.state = 761
                    self.match(CryptlangParser.T__15) 
                self.state = 766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==135:
                self.state = 767
                self.identifier()


            self.state = 770
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(CryptlangParser.Int, 0)

        def Uint(self):
            return self.getToken(CryptlangParser.Uint, 0)

        def Byte(self):
            return self.getToken(CryptlangParser.Byte, 0)

        def Fixed(self):
            return self.getToken(CryptlangParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(CryptlangParser.Ufixed, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = CryptlangParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            _la = self._input.LA(1)
            if not(_la==35 or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 545357767376911) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryptlangParser.PrimaryExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CryptlangParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 775
                self.match(CryptlangParser.T__71)
                self.state = 776
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 777
                self.match(CryptlangParser.T__21)
                self.state = 778
                self.expression(0)
                self.state = 779
                self.match(CryptlangParser.T__22)
                pass

            elif la_ == 3:
                self.state = 781
                _la = self._input.LA(1)
                if not(_la==70 or _la==71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 782
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 783
                _la = self._input.LA(1)
                if not(_la==73 or _la==74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 784
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 785
                _la = self._input.LA(1)
                if not(_la==75 or _la==76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 786
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 787
                self.match(CryptlangParser.T__76)
                self.state = 788
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 789
                self.match(CryptlangParser.T__4)
                self.state = 790
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 791
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 851
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 794
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 795
                        self.match(CryptlangParser.T__77)
                        self.state = 796
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 797
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 798
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==79 or _la==80):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 799
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 800
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 801
                        _la = self._input.LA(1)
                        if not(_la==73 or _la==74):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 802
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 803
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 804
                        _la = self._input.LA(1)
                        if not(_la==81 or _la==82):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 805
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 806
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 807
                        self.match(CryptlangParser.T__82)
                        self.state = 808
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 809
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 810
                        self.match(CryptlangParser.T__3)
                        self.state = 811
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 812
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 813
                        self.match(CryptlangParser.T__83)
                        self.state = 814
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 815
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 816
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 817
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 818
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 819
                        _la = self._input.LA(1)
                        if not(_la==85 or _la==86):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 820
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 821
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 822
                        self.match(CryptlangParser.T__86)
                        self.state = 823
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 824
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 825
                        self.match(CryptlangParser.T__87)
                        self.state = 826
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 827
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 828
                        self.match(CryptlangParser.T__88)
                        self.state = 829
                        self.expression(0)
                        self.state = 830
                        self.match(CryptlangParser.T__89)
                        self.state = 831
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 833
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 834
                        _la = self._input.LA(1)
                        if not(_la==10 or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 1023) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 835
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 836
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 837
                        _la = self._input.LA(1)
                        if not(_la==70 or _la==71):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 838
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 839
                        self.match(CryptlangParser.T__32)
                        self.state = 840
                        self.expression(0)
                        self.state = 841
                        self.match(CryptlangParser.T__33)
                        pass

                    elif la_ == 16:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 843
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 844
                        self.match(CryptlangParser.T__21)
                        self.state = 845
                        self.functionCallArguments()
                        self.state = 846
                        self.match(CryptlangParser.T__22)
                        pass

                    elif la_ == 17:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 848
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 849
                        self.match(CryptlangParser.T__35)
                        self.state = 850
                        self.identifier()
                        pass

             
                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(CryptlangParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.NumberLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(CryptlangParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(CryptlangParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = CryptlangParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_primaryExpression)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 856
                self.match(CryptlangParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 858
                self.match(CryptlangParser.HexLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 859
                self.match(CryptlangParser.StringLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 860
                self.identifier()
                self.state = 863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 861
                    self.match(CryptlangParser.T__32)
                    self.state = 862
                    self.match(CryptlangParser.T__33)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 865
                self.match(CryptlangParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 866
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 867
                self.typeNameExpression()
                self.state = 870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 868
                    self.match(CryptlangParser.T__32)
                    self.state = 869
                    self.match(CryptlangParser.T__33)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = CryptlangParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.expression(0)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 875
                self.match(CryptlangParser.T__15)
                self.state = 876
                self.expression(0)
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.NameValueContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.NameValueContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = CryptlangParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.nameValue()
            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 883
                    self.match(CryptlangParser.T__15)
                    self.state = 884
                    self.nameValue() 
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 890
                self.match(CryptlangParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = CryptlangParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.identifier()
            self.state = 894
            self.match(CryptlangParser.T__89)
            self.state = 895
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(CryptlangParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = CryptlangParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.match(CryptlangParser.T__14)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14 or _la==41 or _la==135:
                    self.state = 898
                    self.nameValueList()


                self.state = 901
                self.match(CryptlangParser.T__16)
                pass
            elif token in [5, 14, 22, 23, 33, 35, 41, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 110, 111, 112, 113, 114, 116, 117, 118, 120, 133, 135, 136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                    self.state = 902
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = CryptlangParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.expression(0)
            self.state = 908
            self.match(CryptlangParser.T__21)
            self.state = 909
            self.functionCallArguments()
            self.state = 910
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = CryptlangParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(CryptlangParser.T__14)
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 36750076783134979) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 51561299981) != 0):
                self.state = 913
                self.assemblyItem()
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 919
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(CryptlangParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(CryptlangParser.ContinueKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(CryptlangParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = CryptlangParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyItem)
        try:
            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 924
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 925
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 926
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 927
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 928
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 929
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 930
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 931
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 932
                self.match(CryptlangParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 933
                self.match(CryptlangParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 934
                self.subAssembly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 935
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 936
                self.match(CryptlangParser.StringLiteral)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 937
                self.match(CryptlangParser.HexLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = CryptlangParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyExpression)
        try:
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 35, 41, 63, 69, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.assemblyCall()
                pass
            elif token in [117, 118, 120, 136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = CryptlangParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.state = 944
                self.match(CryptlangParser.T__62)
                pass
            elif token in [35]:
                self.state = 945
                self.match(CryptlangParser.T__34)
                pass
            elif token in [69]:
                self.state = 946
                self.match(CryptlangParser.T__68)
                pass
            elif token in [14, 41, 135]:
                self.state = 947
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 950
                self.match(CryptlangParser.T__21)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 36591747108700161) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 786443) != 0):
                    self.state = 951
                    self.assemblyExpression()


                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 954
                    self.match(CryptlangParser.T__15)
                    self.state = 955
                    self.assemblyExpression()
                    self.state = 960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 961
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = CryptlangParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(CryptlangParser.T__100)
            self.state = 965
            self.assemblyIdentifierOrList()
            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 966
                self.match(CryptlangParser.T__101)
                self.state = 967
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = CryptlangParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.assemblyIdentifierOrList()
            self.state = 971
            self.match(CryptlangParser.T__101)
            self.state = 972
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = CryptlangParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 41, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.identifier()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(CryptlangParser.T__21)
                self.state = 976
                self.assemblyIdentifierList()
                self.state = 977
                self.match(CryptlangParser.T__22)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = CryptlangParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.identifier()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 982
                self.match(CryptlangParser.T__15)
                self.state = 983
                self.identifier()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = CryptlangParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(CryptlangParser.T__102)
            self.state = 990
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = CryptlangParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.identifier()
            self.state = 993
            self.match(CryptlangParser.T__89)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = CryptlangParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(CryptlangParser.T__103)
            self.state = 996
            self.assemblyExpression()
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==105 or _la==106:
                self.state = 997
                self.assemblyCase()
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = CryptlangParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyCase)
        try:
            self.state = 1009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.match(CryptlangParser.T__104)
                self.state = 1004
                self.assemblyLiteral()
                self.state = 1005
                self.assemblyBlock()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.match(CryptlangParser.T__105)
                self.state = 1008
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = CryptlangParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(CryptlangParser.T__28)
            self.state = 1012
            self.identifier()
            self.state = 1013
            self.match(CryptlangParser.T__21)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==135:
                self.state = 1014
                self.assemblyIdentifierList()


            self.state = 1017
            self.match(CryptlangParser.T__22)
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 1018
                self.assemblyFunctionReturns()


            self.state = 1021
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = CryptlangParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(CryptlangParser.T__106)
            self.state = 1024
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = CryptlangParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(CryptlangParser.T__24)
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1027
                self.assemblyBlock()
                pass
            elif token in [14, 35, 41, 63, 69, 117, 118, 120, 135, 136]:
                self.state = 1028
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1031
            self.assemblyExpression()
            self.state = 1034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1032
                self.assemblyBlock()
                pass
            elif token in [14, 35, 41, 63, 69, 117, 118, 120, 135, 136]:
                self.state = 1033
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1036
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = CryptlangParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(CryptlangParser.T__57)
            self.state = 1039
            self.assemblyExpression()
            self.state = 1040
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def DecimalNumber(self):
            return self.getToken(CryptlangParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(CryptlangParser.HexNumber, 0)

        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = CryptlangParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            _la = self._input.LA(1)
            if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 524299) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = CryptlangParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(CryptlangParser.T__60)
            self.state = 1045
            self.identifier()
            self.state = 1046
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = CryptlangParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.match(CryptlangParser.T__21)

                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                    self.state = 1049
                    self.expression(0)


                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1052
                    self.match(CryptlangParser.T__15)
                    self.state = 1054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                        self.state = 1053
                        self.expression(0)


                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1061
                self.match(CryptlangParser.T__22)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.match(CryptlangParser.T__32)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2241977139232) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26441055624761343) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 13) != 0):
                    self.state = 1063
                    self.expression(0)
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==16:
                        self.state = 1064
                        self.match(CryptlangParser.T__15)
                        self.state = 1065
                        self.expression(0)
                        self.state = 1070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1073
                self.match(CryptlangParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = CryptlangParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_typeNameExpression)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 66, 67, 68, 69, 110, 111, 112, 113, 114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.elementaryTypeName()
                pass
            elif token in [14, 41, 135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(CryptlangParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(CryptlangParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(CryptlangParser.NumberUnit, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = CryptlangParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            _la = self._input.LA(1)
            if not(_la==117 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1081
                self.match(CryptlangParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CryptlangParser.Identifier, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CryptlangParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            _la = self._input.LA(1)
            if not(_la==14 or _la==41 or _la==135):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.typeName_sempred
        self._predicates[68] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         




