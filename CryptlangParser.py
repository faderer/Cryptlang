# Generated from Cryptlang.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,136,1083,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,1,0,1,0,
        5,0,198,8,0,10,0,12,0,201,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,3,1,3,3,3,214,8,3,1,4,1,4,3,4,218,8,4,1,5,1,5,1,6,3,6,223,8,
        6,1,6,1,6,1,7,1,7,1,7,3,7,230,8,7,1,8,1,8,1,8,1,8,3,8,236,8,8,1,
        8,1,8,1,8,1,8,3,8,242,8,8,1,8,1,8,3,8,246,8,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,5,8,256,8,8,10,8,12,8,259,9,8,1,8,1,8,1,8,1,8,1,8,
        3,8,266,8,8,1,9,1,9,1,10,3,10,271,8,10,1,10,1,10,1,10,1,10,1,10,
        1,10,5,10,279,8,10,10,10,12,10,282,9,10,3,10,284,8,10,1,10,1,10,
        5,10,288,8,10,10,10,12,10,291,9,10,1,10,1,10,1,11,1,11,1,11,3,11,
        298,8,11,1,11,3,11,301,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,3,12,311,8,12,1,13,1,13,5,13,315,8,13,10,13,12,13,318,9,13,1,
        13,1,13,1,13,3,13,323,8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,3,
        14,332,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,
        15,344,8,15,10,15,12,15,347,9,15,3,15,349,8,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,361,8,17,1,17,1,17,1,18,1,
        18,1,18,3,18,368,8,18,1,18,3,18,371,8,18,1,19,3,19,374,8,19,1,19,
        1,19,3,19,378,8,19,1,19,1,19,1,19,3,19,383,8,19,1,19,1,19,3,19,387,
        8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,398,8,21,
        10,21,12,21,401,9,21,1,22,3,22,404,8,22,1,22,1,22,1,22,1,22,3,22,
        410,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,420,8,24,1,
        24,1,24,5,24,424,8,24,10,24,12,24,427,9,24,1,24,1,24,1,25,1,25,1,
        25,1,25,5,25,435,8,25,10,25,12,25,438,9,25,3,25,440,8,25,1,25,1,
        25,1,26,1,26,3,26,446,8,26,1,26,3,26,449,8,26,1,27,1,27,1,27,1,27,
        5,27,455,8,27,10,27,12,27,458,9,27,3,27,460,8,27,1,27,1,27,1,28,
        1,28,3,28,466,8,28,1,28,3,28,469,8,28,1,29,1,29,1,29,1,29,5,29,475,
        8,29,10,29,12,29,478,9,29,3,29,480,8,29,1,29,1,29,1,30,1,30,3,30,
        486,8,30,1,31,1,31,3,31,490,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,3,32,501,8,32,1,32,1,32,1,32,3,32,506,8,32,1,32,5,32,
        509,8,32,10,32,12,32,512,9,32,1,33,1,33,1,33,5,33,517,8,33,10,33,
        12,33,520,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,5,35,534,8,35,10,35,12,35,537,9,35,1,35,1,35,3,35,541,
        8,35,1,36,1,36,1,37,1,37,1,38,1,38,5,38,549,8,38,10,38,12,38,552,
        9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,3,39,571,8,39,1,40,1,40,1,40,1,41,1,41,
        1,42,1,42,1,43,3,43,581,8,43,1,43,1,43,1,44,3,44,586,8,44,1,44,5,
        44,589,8,44,10,44,12,44,592,9,44,1,44,3,44,595,8,44,1,45,1,45,1,
        46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,3,49,609,8,49,1,
        49,1,49,1,49,3,49,614,8,49,1,49,1,49,5,49,618,8,49,10,49,12,49,621,
        9,49,1,49,1,49,1,50,1,50,1,50,1,50,3,50,629,8,50,1,50,1,50,3,50,
        633,8,50,1,50,5,50,636,8,50,10,50,12,50,639,9,50,1,50,3,50,642,8,
        50,1,50,1,50,1,51,1,51,3,51,648,8,51,1,51,1,51,1,52,4,52,653,8,52,
        11,52,12,52,654,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
        666,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,3,55,676,8,55,1,
        56,1,56,1,56,1,56,3,56,682,8,56,1,56,1,56,3,56,686,8,56,1,56,3,56,
        689,8,56,1,56,1,56,1,56,1,57,1,57,3,57,696,8,57,1,57,1,57,1,58,1,
        58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,
        61,1,61,3,61,716,8,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,
        63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,734,8,64,1,64,1,64,3,
        64,738,8,64,1,64,1,64,1,65,3,65,743,8,65,1,65,1,65,3,65,747,8,65,
        5,65,749,8,65,10,65,12,65,752,9,65,1,66,1,66,3,66,756,8,66,1,66,
        5,66,759,8,66,10,66,12,66,762,9,66,1,66,3,66,765,8,66,1,66,1,66,
        1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,789,8,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,5,68,848,8,68,10,68,12,68,851,9,68,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,3,69,860,8,69,1,69,1,69,1,69,1,69,1,69,3,69,867,8,
        69,3,69,869,8,69,1,70,1,70,1,70,5,70,874,8,70,10,70,12,70,877,9,
        70,1,71,1,71,1,71,5,71,882,8,71,10,71,12,71,885,9,71,1,71,3,71,888,
        8,71,1,72,1,72,1,72,1,72,1,73,1,73,3,73,896,8,73,1,73,1,73,3,73,
        900,8,73,3,73,902,8,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,5,75,911,
        8,75,10,75,12,75,914,9,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,935,
        8,76,1,77,1,77,3,77,939,8,77,1,78,1,78,1,78,1,78,3,78,945,8,78,1,
        78,1,78,3,78,949,8,78,1,78,1,78,5,78,953,8,78,10,78,12,78,956,9,
        78,1,78,3,78,959,8,78,1,79,1,79,1,79,1,79,3,79,965,8,79,1,80,1,80,
        1,80,1,80,1,81,1,81,1,81,1,81,1,81,3,81,976,8,81,1,82,1,82,1,82,
        5,82,981,8,82,10,82,12,82,984,9,82,1,83,1,83,1,83,1,84,1,84,1,84,
        1,85,1,85,1,85,5,85,995,8,85,10,85,12,85,998,9,85,1,86,1,86,1,86,
        1,86,1,86,1,86,3,86,1006,8,86,1,87,1,87,1,87,1,87,3,87,1012,8,87,
        1,87,1,87,3,87,1016,8,87,1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,89,
        3,89,1026,8,89,1,89,1,89,1,89,3,89,1031,8,89,1,89,1,89,1,90,1,90,
        1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,3,93,1047,8,93,
        1,93,1,93,3,93,1051,8,93,5,93,1053,8,93,10,93,12,93,1056,9,93,1,
        93,1,93,1,93,1,93,1,93,5,93,1063,8,93,10,93,12,93,1066,9,93,3,93,
        1068,8,93,1,93,3,93,1071,8,93,1,94,1,94,3,94,1075,8,94,1,95,1,95,
        3,95,1079,8,95,1,96,1,96,1,96,1,654,2,64,136,97,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,0,22,1,0,
        4,10,1,0,105,106,1,0,18,20,3,0,121,121,125,125,127,128,1,0,39,41,
        4,0,121,121,126,126,129,129,131,131,1,0,44,46,1,0,47,49,1,0,50,51,
        1,0,52,53,3,0,35,35,63,66,107,111,1,0,67,68,1,0,70,71,1,0,72,73,
        2,0,13,13,76,77,1,0,78,79,1,0,6,9,1,0,82,83,2,0,10,10,88,97,3,0,
        114,115,117,117,133,133,1,0,114,115,3,0,14,14,41,41,132,132,1180,
        0,199,1,0,0,0,2,204,1,0,0,0,4,209,1,0,0,0,6,213,1,0,0,0,8,215,1,
        0,0,0,10,219,1,0,0,0,12,222,1,0,0,0,14,226,1,0,0,0,16,265,1,0,0,
        0,18,267,1,0,0,0,20,270,1,0,0,0,22,294,1,0,0,0,24,310,1,0,0,0,26,
        312,1,0,0,0,28,326,1,0,0,0,30,335,1,0,0,0,32,352,1,0,0,0,34,357,
        1,0,0,0,36,364,1,0,0,0,38,373,1,0,0,0,40,388,1,0,0,0,42,399,1,0,
        0,0,44,403,1,0,0,0,46,413,1,0,0,0,48,415,1,0,0,0,50,430,1,0,0,0,
        52,443,1,0,0,0,54,450,1,0,0,0,56,463,1,0,0,0,58,470,1,0,0,0,60,483,
        1,0,0,0,62,487,1,0,0,0,64,500,1,0,0,0,66,513,1,0,0,0,68,521,1,0,
        0,0,70,528,1,0,0,0,72,542,1,0,0,0,74,544,1,0,0,0,76,546,1,0,0,0,
        78,570,1,0,0,0,80,572,1,0,0,0,82,575,1,0,0,0,84,577,1,0,0,0,86,580,
        1,0,0,0,88,590,1,0,0,0,90,596,1,0,0,0,92,598,1,0,0,0,94,600,1,0,
        0,0,96,602,1,0,0,0,98,604,1,0,0,0,100,624,1,0,0,0,102,647,1,0,0,
        0,104,652,1,0,0,0,106,658,1,0,0,0,108,667,1,0,0,0,110,675,1,0,0,
        0,112,677,1,0,0,0,114,693,1,0,0,0,116,699,1,0,0,0,118,707,1,0,0,
        0,120,710,1,0,0,0,122,713,1,0,0,0,124,719,1,0,0,0,126,722,1,0,0,
        0,128,733,1,0,0,0,130,742,1,0,0,0,132,753,1,0,0,0,134,768,1,0,0,
        0,136,788,1,0,0,0,138,868,1,0,0,0,140,870,1,0,0,0,142,878,1,0,0,
        0,144,889,1,0,0,0,146,901,1,0,0,0,148,903,1,0,0,0,150,908,1,0,0,
        0,152,934,1,0,0,0,154,938,1,0,0,0,156,944,1,0,0,0,158,960,1,0,0,
        0,160,966,1,0,0,0,162,975,1,0,0,0,164,977,1,0,0,0,166,985,1,0,0,
        0,168,988,1,0,0,0,170,991,1,0,0,0,172,1005,1,0,0,0,174,1007,1,0,
        0,0,176,1019,1,0,0,0,178,1022,1,0,0,0,180,1034,1,0,0,0,182,1038,
        1,0,0,0,184,1040,1,0,0,0,186,1070,1,0,0,0,188,1074,1,0,0,0,190,1076,
        1,0,0,0,192,1080,1,0,0,0,194,198,3,2,1,0,195,198,3,16,8,0,196,198,
        3,20,10,0,197,194,1,0,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,201,
        1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,199,
        1,0,0,0,202,203,5,0,0,1,203,1,1,0,0,0,204,205,5,1,0,0,205,206,3,
        4,2,0,206,207,3,6,3,0,207,208,5,2,0,0,208,3,1,0,0,0,209,210,5,3,
        0,0,210,5,1,0,0,0,211,214,3,8,4,0,212,214,3,136,68,0,213,211,1,0,
        0,0,213,212,1,0,0,0,214,7,1,0,0,0,215,217,3,12,6,0,216,218,3,12,
        6,0,217,216,1,0,0,0,217,218,1,0,0,0,218,9,1,0,0,0,219,220,7,0,0,
        0,220,11,1,0,0,0,221,223,3,10,5,0,222,221,1,0,0,0,222,223,1,0,0,
        0,223,224,1,0,0,0,224,225,5,112,0,0,225,13,1,0,0,0,226,229,3,192,
        96,0,227,228,5,11,0,0,228,230,3,192,96,0,229,227,1,0,0,0,229,230,
        1,0,0,0,230,15,1,0,0,0,231,232,5,12,0,0,232,235,5,133,0,0,233,234,
        5,11,0,0,234,236,3,192,96,0,235,233,1,0,0,0,235,236,1,0,0,0,236,
        237,1,0,0,0,237,266,5,2,0,0,238,241,5,12,0,0,239,242,5,13,0,0,240,
        242,3,192,96,0,241,239,1,0,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,
        244,5,11,0,0,244,246,3,192,96,0,245,243,1,0,0,0,245,246,1,0,0,0,
        246,247,1,0,0,0,247,248,5,14,0,0,248,249,5,133,0,0,249,266,5,2,0,
        0,250,251,5,12,0,0,251,252,5,15,0,0,252,257,3,14,7,0,253,254,5,16,
        0,0,254,256,3,14,7,0,255,253,1,0,0,0,256,259,1,0,0,0,257,255,1,0,
        0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,5,17,
        0,0,261,262,5,14,0,0,262,263,5,133,0,0,263,264,5,2,0,0,264,266,1,
        0,0,0,265,231,1,0,0,0,265,238,1,0,0,0,265,250,1,0,0,0,266,17,1,0,
        0,0,267,268,7,1,0,0,268,19,1,0,0,0,269,271,3,18,9,0,270,269,1,0,
        0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,7,2,0,0,273,283,3,192,
        96,0,274,275,5,21,0,0,275,280,3,22,11,0,276,277,5,16,0,0,277,279,
        3,22,11,0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,
        1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,283,274,1,0,0,0,283,284,
        1,0,0,0,284,285,1,0,0,0,285,289,5,15,0,0,286,288,3,24,12,0,287,286,
        1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,292,
        1,0,0,0,291,289,1,0,0,0,292,293,5,17,0,0,293,21,1,0,0,0,294,300,
        3,66,33,0,295,297,5,22,0,0,296,298,3,140,70,0,297,296,1,0,0,0,297,
        298,1,0,0,0,298,299,1,0,0,0,299,301,5,23,0,0,300,295,1,0,0,0,300,
        301,1,0,0,0,301,23,1,0,0,0,302,311,3,26,13,0,303,311,3,28,14,0,304,
        311,3,30,15,0,305,311,3,32,16,0,306,311,3,34,17,0,307,311,3,38,19,
        0,308,311,3,44,22,0,309,311,3,48,24,0,310,302,1,0,0,0,310,303,1,
        0,0,0,310,304,1,0,0,0,310,305,1,0,0,0,310,306,1,0,0,0,310,307,1,
        0,0,0,310,308,1,0,0,0,310,309,1,0,0,0,311,25,1,0,0,0,312,316,3,64,
        32,0,313,315,7,3,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,
        0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,322,3,192,
        96,0,320,321,5,10,0,0,321,323,3,136,68,0,322,320,1,0,0,0,322,323,
        1,0,0,0,323,324,1,0,0,0,324,325,5,2,0,0,325,27,1,0,0,0,326,327,5,
        24,0,0,327,328,3,192,96,0,328,331,5,25,0,0,329,332,5,13,0,0,330,
        332,3,64,32,0,331,329,1,0,0,0,331,330,1,0,0,0,332,333,1,0,0,0,333,
        334,5,2,0,0,334,29,1,0,0,0,335,336,5,26,0,0,336,337,3,192,96,0,337,
        348,5,15,0,0,338,339,3,62,31,0,339,345,5,2,0,0,340,341,3,62,31,0,
        341,342,5,2,0,0,342,344,1,0,0,0,343,340,1,0,0,0,344,347,1,0,0,0,
        345,343,1,0,0,0,345,346,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,
        348,338,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,351,5,17,0,0,
        351,31,1,0,0,0,352,353,5,27,0,0,353,354,3,50,25,0,354,355,3,42,21,
        0,355,356,3,76,38,0,356,33,1,0,0,0,357,358,5,28,0,0,358,360,3,192,
        96,0,359,361,3,50,25,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,
        0,0,0,362,363,3,76,38,0,363,35,1,0,0,0,364,370,3,192,96,0,365,367,
        5,22,0,0,366,368,3,140,70,0,367,366,1,0,0,0,367,368,1,0,0,0,368,
        369,1,0,0,0,369,371,5,23,0,0,370,365,1,0,0,0,370,371,1,0,0,0,371,
        37,1,0,0,0,372,374,3,18,9,0,373,372,1,0,0,0,373,374,1,0,0,0,374,
        375,1,0,0,0,375,377,5,29,0,0,376,378,3,192,96,0,377,376,1,0,0,0,
        377,378,1,0,0,0,378,379,1,0,0,0,379,380,3,50,25,0,380,382,3,42,21,
        0,381,383,3,40,20,0,382,381,1,0,0,0,382,383,1,0,0,0,383,386,1,0,
        0,0,384,387,5,2,0,0,385,387,3,76,38,0,386,384,1,0,0,0,386,385,1,
        0,0,0,387,39,1,0,0,0,388,389,5,30,0,0,389,390,3,50,25,0,390,41,1,
        0,0,0,391,398,3,36,18,0,392,398,3,74,37,0,393,398,5,123,0,0,394,
        398,5,128,0,0,395,398,5,125,0,0,396,398,5,127,0,0,397,391,1,0,0,
        0,397,392,1,0,0,0,397,393,1,0,0,0,397,394,1,0,0,0,397,395,1,0,0,
        0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,
        0,400,43,1,0,0,0,401,399,1,0,0,0,402,404,3,18,9,0,403,402,1,0,0,
        0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,31,0,0,406,407,3,192,
        96,0,407,409,3,54,27,0,408,410,5,119,0,0,409,408,1,0,0,0,409,410,
        1,0,0,0,410,411,1,0,0,0,411,412,5,2,0,0,412,45,1,0,0,0,413,414,3,
        192,96,0,414,47,1,0,0,0,415,416,5,32,0,0,416,417,3,192,96,0,417,
        419,5,15,0,0,418,420,3,46,23,0,419,418,1,0,0,0,419,420,1,0,0,0,420,
        425,1,0,0,0,421,422,5,16,0,0,422,424,3,46,23,0,423,421,1,0,0,0,424,
        427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,
        425,1,0,0,0,428,429,5,17,0,0,429,49,1,0,0,0,430,439,5,22,0,0,431,
        436,3,52,26,0,432,433,5,16,0,0,433,435,3,52,26,0,434,432,1,0,0,0,
        435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,440,1,0,0,0,
        438,436,1,0,0,0,439,431,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,
        441,442,5,23,0,0,442,51,1,0,0,0,443,445,3,64,32,0,444,446,3,72,36,
        0,445,444,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,449,3,192,
        96,0,448,447,1,0,0,0,448,449,1,0,0,0,449,53,1,0,0,0,450,459,5,22,
        0,0,451,456,3,56,28,0,452,453,5,16,0,0,453,455,3,56,28,0,454,452,
        1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,460,
        1,0,0,0,458,456,1,0,0,0,459,451,1,0,0,0,459,460,1,0,0,0,460,461,
        1,0,0,0,461,462,5,23,0,0,462,55,1,0,0,0,463,465,3,64,32,0,464,466,
        5,124,0,0,465,464,1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,469,
        3,192,96,0,468,467,1,0,0,0,468,469,1,0,0,0,469,57,1,0,0,0,470,479,
        5,22,0,0,471,476,3,60,30,0,472,473,5,16,0,0,473,475,3,60,30,0,474,
        472,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,
        480,1,0,0,0,478,476,1,0,0,0,479,471,1,0,0,0,479,480,1,0,0,0,480,
        481,1,0,0,0,481,482,5,23,0,0,482,59,1,0,0,0,483,485,3,64,32,0,484,
        486,3,72,36,0,485,484,1,0,0,0,485,486,1,0,0,0,486,61,1,0,0,0,487,
        489,3,64,32,0,488,490,3,72,36,0,489,488,1,0,0,0,489,490,1,0,0,0,
        490,491,1,0,0,0,491,492,3,192,96,0,492,63,1,0,0,0,493,494,6,32,-1,
        0,494,501,3,134,67,0,495,501,3,66,33,0,496,501,3,68,34,0,497,501,
        3,70,35,0,498,499,5,35,0,0,499,501,5,126,0,0,500,493,1,0,0,0,500,
        495,1,0,0,0,500,496,1,0,0,0,500,497,1,0,0,0,500,498,1,0,0,0,501,
        510,1,0,0,0,502,503,10,3,0,0,503,505,5,33,0,0,504,506,3,136,68,0,
        505,504,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,509,5,34,0,0,
        508,502,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,
        511,65,1,0,0,0,512,510,1,0,0,0,513,518,3,192,96,0,514,515,5,36,0,
        0,515,517,3,192,96,0,516,514,1,0,0,0,517,520,1,0,0,0,518,516,1,0,
        0,0,518,519,1,0,0,0,519,67,1,0,0,0,520,518,1,0,0,0,521,522,5,37,
        0,0,522,523,5,22,0,0,523,524,3,134,67,0,524,525,5,38,0,0,525,526,
        3,64,32,0,526,527,5,23,0,0,527,69,1,0,0,0,528,529,5,29,0,0,529,535,
        3,58,29,0,530,534,5,125,0,0,531,534,5,123,0,0,532,534,3,74,37,0,
        533,530,1,0,0,0,533,531,1,0,0,0,533,532,1,0,0,0,534,537,1,0,0,0,
        535,533,1,0,0,0,535,536,1,0,0,0,536,540,1,0,0,0,537,535,1,0,0,0,
        538,539,5,30,0,0,539,541,3,58,29,0,540,538,1,0,0,0,540,541,1,0,0,
        0,541,71,1,0,0,0,542,543,7,4,0,0,543,73,1,0,0,0,544,545,7,5,0,0,
        545,75,1,0,0,0,546,550,5,15,0,0,547,549,3,78,39,0,548,547,1,0,0,
        0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,
        0,552,550,1,0,0,0,553,554,5,17,0,0,554,77,1,0,0,0,555,571,3,102,
        51,0,556,571,3,104,52,0,557,571,3,106,53,0,558,571,3,108,54,0,559,
        571,3,112,56,0,560,571,3,76,38,0,561,571,3,114,57,0,562,571,3,116,
        58,0,563,571,3,118,59,0,564,571,3,120,60,0,565,571,3,122,61,0,566,
        571,3,124,62,0,567,571,3,126,63,0,568,571,3,110,55,0,569,571,3,102,
        51,0,570,555,1,0,0,0,570,556,1,0,0,0,570,557,1,0,0,0,570,558,1,0,
        0,0,570,559,1,0,0,0,570,560,1,0,0,0,570,561,1,0,0,0,570,562,1,0,
        0,0,570,563,1,0,0,0,570,564,1,0,0,0,570,565,1,0,0,0,570,566,1,0,
        0,0,570,567,1,0,0,0,570,568,1,0,0,0,570,569,1,0,0,0,571,79,1,0,0,
        0,572,573,3,136,68,0,573,574,5,2,0,0,574,81,1,0,0,0,575,576,5,42,
        0,0,576,83,1,0,0,0,577,578,5,43,0,0,578,85,1,0,0,0,579,581,3,84,
        42,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,583,3,192,
        96,0,583,87,1,0,0,0,584,586,3,86,43,0,585,584,1,0,0,0,585,586,1,
        0,0,0,586,587,1,0,0,0,587,589,5,16,0,0,588,585,1,0,0,0,589,592,1,
        0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,594,1,0,0,0,592,590,1,
        0,0,0,593,595,3,86,43,0,594,593,1,0,0,0,594,595,1,0,0,0,595,89,1,
        0,0,0,596,597,7,6,0,0,597,91,1,0,0,0,598,599,7,7,0,0,599,93,1,0,
        0,0,600,601,7,8,0,0,601,95,1,0,0,0,602,603,7,9,0,0,603,97,1,0,0,
        0,604,605,3,82,41,0,605,608,3,92,46,0,606,607,5,54,0,0,607,609,3,
        90,45,0,608,606,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,613,
        5,22,0,0,611,612,5,43,0,0,612,614,3,192,96,0,613,611,1,0,0,0,613,
        614,1,0,0,0,614,619,1,0,0,0,615,616,5,16,0,0,616,618,3,192,96,0,
        617,615,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,
        620,622,1,0,0,0,621,619,1,0,0,0,622,623,5,23,0,0,623,99,1,0,0,0,
        624,625,3,82,41,0,625,628,3,94,47,0,626,627,5,54,0,0,627,629,3,90,
        45,0,628,626,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,637,5,22,
        0,0,631,633,3,192,96,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,
        0,0,0,634,636,5,16,0,0,635,632,1,0,0,0,636,639,1,0,0,0,637,635,1,
        0,0,0,637,638,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,640,642,3,
        192,96,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,644,
        5,23,0,0,644,101,1,0,0,0,645,648,3,98,49,0,646,648,3,100,50,0,647,
        645,1,0,0,0,647,646,1,0,0,0,648,649,1,0,0,0,649,650,5,2,0,0,650,
        103,1,0,0,0,651,653,9,0,0,0,652,651,1,0,0,0,653,654,1,0,0,0,654,
        655,1,0,0,0,654,652,1,0,0,0,655,656,1,0,0,0,656,657,5,2,0,0,657,
        105,1,0,0,0,658,659,5,55,0,0,659,660,5,22,0,0,660,661,3,136,68,0,
        661,662,5,23,0,0,662,665,3,78,39,0,663,664,5,56,0,0,664,666,3,78,
        39,0,665,663,1,0,0,0,665,666,1,0,0,0,666,107,1,0,0,0,667,668,5,57,
        0,0,668,669,5,22,0,0,669,670,3,136,68,0,670,671,5,23,0,0,671,672,
        3,78,39,0,672,109,1,0,0,0,673,676,3,128,64,0,674,676,3,80,40,0,675,
        673,1,0,0,0,675,674,1,0,0,0,676,111,1,0,0,0,677,678,5,25,0,0,678,
        681,5,22,0,0,679,682,3,110,55,0,680,682,5,2,0,0,681,679,1,0,0,0,
        681,680,1,0,0,0,682,685,1,0,0,0,683,686,3,80,40,0,684,686,5,2,0,
        0,685,683,1,0,0,0,685,684,1,0,0,0,686,688,1,0,0,0,687,689,3,136,
        68,0,688,687,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,691,5,23,
        0,0,691,692,3,78,39,0,692,113,1,0,0,0,693,695,5,58,0,0,694,696,5,
        133,0,0,695,694,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,698,
        3,150,75,0,698,115,1,0,0,0,699,700,5,59,0,0,700,701,3,78,39,0,701,
        702,5,57,0,0,702,703,5,22,0,0,703,704,3,136,68,0,704,705,5,23,0,
        0,705,706,5,2,0,0,706,117,1,0,0,0,707,708,5,122,0,0,708,709,5,2,
        0,0,709,119,1,0,0,0,710,711,5,120,0,0,711,712,5,2,0,0,712,121,1,
        0,0,0,713,715,5,60,0,0,714,716,3,136,68,0,715,714,1,0,0,0,715,716,
        1,0,0,0,716,717,1,0,0,0,717,718,5,2,0,0,718,123,1,0,0,0,719,720,
        5,61,0,0,720,721,5,2,0,0,721,125,1,0,0,0,722,723,5,62,0,0,723,724,
        3,148,74,0,724,725,5,2,0,0,725,127,1,0,0,0,726,727,5,63,0,0,727,
        734,3,132,66,0,728,734,3,62,31,0,729,730,5,22,0,0,730,731,3,130,
        65,0,731,732,5,23,0,0,732,734,1,0,0,0,733,726,1,0,0,0,733,728,1,
        0,0,0,733,729,1,0,0,0,734,737,1,0,0,0,735,736,5,10,0,0,736,738,3,
        136,68,0,737,735,1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,740,
        5,2,0,0,740,129,1,0,0,0,741,743,3,62,31,0,742,741,1,0,0,0,742,743,
        1,0,0,0,743,750,1,0,0,0,744,746,5,16,0,0,745,747,3,62,31,0,746,745,
        1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,744,1,0,0,0,749,752,
        1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,131,1,0,0,0,752,750,
        1,0,0,0,753,760,5,22,0,0,754,756,3,192,96,0,755,754,1,0,0,0,755,
        756,1,0,0,0,756,757,1,0,0,0,757,759,5,16,0,0,758,755,1,0,0,0,759,
        762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,764,1,0,0,0,762,
        760,1,0,0,0,763,765,3,192,96,0,764,763,1,0,0,0,764,765,1,0,0,0,765,
        766,1,0,0,0,766,767,5,23,0,0,767,133,1,0,0,0,768,769,7,10,0,0,769,
        135,1,0,0,0,770,771,6,68,-1,0,771,772,5,69,0,0,772,789,3,64,32,0,
        773,774,5,22,0,0,774,775,3,136,68,0,775,776,5,23,0,0,776,789,1,0,
        0,0,777,778,7,11,0,0,778,789,3,136,68,19,779,780,7,12,0,0,780,789,
        3,136,68,18,781,782,7,13,0,0,782,789,3,136,68,17,783,784,5,74,0,
        0,784,789,3,136,68,16,785,786,5,5,0,0,786,789,3,136,68,15,787,789,
        3,138,69,0,788,770,1,0,0,0,788,773,1,0,0,0,788,777,1,0,0,0,788,779,
        1,0,0,0,788,781,1,0,0,0,788,783,1,0,0,0,788,785,1,0,0,0,788,787,
        1,0,0,0,789,849,1,0,0,0,790,791,10,14,0,0,791,792,5,75,0,0,792,848,
        3,136,68,15,793,794,10,13,0,0,794,795,7,14,0,0,795,848,3,136,68,
        14,796,797,10,12,0,0,797,798,7,12,0,0,798,848,3,136,68,13,799,800,
        10,11,0,0,800,801,7,15,0,0,801,848,3,136,68,12,802,803,10,10,0,0,
        803,804,5,80,0,0,804,848,3,136,68,11,805,806,10,9,0,0,806,807,5,
        4,0,0,807,848,3,136,68,10,808,809,10,8,0,0,809,810,5,81,0,0,810,
        848,3,136,68,9,811,812,10,7,0,0,812,813,7,16,0,0,813,848,3,136,68,
        8,814,815,10,6,0,0,815,816,7,17,0,0,816,848,3,136,68,7,817,818,10,
        5,0,0,818,819,5,84,0,0,819,848,3,136,68,6,820,821,10,4,0,0,821,822,
        5,85,0,0,822,848,3,136,68,5,823,824,10,3,0,0,824,825,5,86,0,0,825,
        826,3,136,68,0,826,827,5,87,0,0,827,828,3,136,68,4,828,848,1,0,0,
        0,829,830,10,2,0,0,830,831,7,18,0,0,831,848,3,136,68,3,832,833,10,
        25,0,0,833,848,7,11,0,0,834,835,10,23,0,0,835,836,5,33,0,0,836,837,
        3,136,68,0,837,838,5,34,0,0,838,848,1,0,0,0,839,840,10,22,0,0,840,
        841,5,22,0,0,841,842,3,146,73,0,842,843,5,23,0,0,843,848,1,0,0,0,
        844,845,10,21,0,0,845,846,5,36,0,0,846,848,3,192,96,0,847,790,1,
        0,0,0,847,793,1,0,0,0,847,796,1,0,0,0,847,799,1,0,0,0,847,802,1,
        0,0,0,847,805,1,0,0,0,847,808,1,0,0,0,847,811,1,0,0,0,847,814,1,
        0,0,0,847,817,1,0,0,0,847,820,1,0,0,0,847,823,1,0,0,0,847,829,1,
        0,0,0,847,832,1,0,0,0,847,834,1,0,0,0,847,839,1,0,0,0,847,844,1,
        0,0,0,848,851,1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,137,1,
        0,0,0,851,849,1,0,0,0,852,869,5,113,0,0,853,869,3,190,95,0,854,869,
        5,117,0,0,855,869,5,133,0,0,856,859,3,192,96,0,857,858,5,33,0,0,
        858,860,5,34,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,869,1,0,0,0,
        861,869,5,130,0,0,862,869,3,186,93,0,863,866,3,188,94,0,864,865,
        5,33,0,0,865,867,5,34,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,869,
        1,0,0,0,868,852,1,0,0,0,868,853,1,0,0,0,868,854,1,0,0,0,868,855,
        1,0,0,0,868,856,1,0,0,0,868,861,1,0,0,0,868,862,1,0,0,0,868,863,
        1,0,0,0,869,139,1,0,0,0,870,875,3,136,68,0,871,872,5,16,0,0,872,
        874,3,136,68,0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,
        876,1,0,0,0,876,141,1,0,0,0,877,875,1,0,0,0,878,883,3,144,72,0,879,
        880,5,16,0,0,880,882,3,144,72,0,881,879,1,0,0,0,882,885,1,0,0,0,
        883,881,1,0,0,0,883,884,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,
        886,888,5,16,0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,143,1,0,0,0,
        889,890,3,192,96,0,890,891,5,87,0,0,891,892,3,136,68,0,892,145,1,
        0,0,0,893,895,5,15,0,0,894,896,3,142,71,0,895,894,1,0,0,0,895,896,
        1,0,0,0,896,897,1,0,0,0,897,902,5,17,0,0,898,900,3,140,70,0,899,
        898,1,0,0,0,899,900,1,0,0,0,900,902,1,0,0,0,901,893,1,0,0,0,901,
        899,1,0,0,0,902,147,1,0,0,0,903,904,3,136,68,0,904,905,5,22,0,0,
        905,906,3,146,73,0,906,907,5,23,0,0,907,149,1,0,0,0,908,912,5,15,
        0,0,909,911,3,152,76,0,910,909,1,0,0,0,911,914,1,0,0,0,912,910,1,
        0,0,0,912,913,1,0,0,0,913,915,1,0,0,0,914,912,1,0,0,0,915,916,5,
        17,0,0,916,151,1,0,0,0,917,935,3,192,96,0,918,935,3,150,75,0,919,
        935,3,154,77,0,920,935,3,158,79,0,921,935,3,160,80,0,922,935,3,166,
        83,0,923,935,3,168,84,0,924,935,3,170,85,0,925,935,3,174,87,0,926,
        935,3,178,89,0,927,935,3,180,90,0,928,935,5,120,0,0,929,935,5,122,
        0,0,930,935,3,184,92,0,931,935,3,190,95,0,932,935,5,133,0,0,933,
        935,5,117,0,0,934,917,1,0,0,0,934,918,1,0,0,0,934,919,1,0,0,0,934,
        920,1,0,0,0,934,921,1,0,0,0,934,922,1,0,0,0,934,923,1,0,0,0,934,
        924,1,0,0,0,934,925,1,0,0,0,934,926,1,0,0,0,934,927,1,0,0,0,934,
        928,1,0,0,0,934,929,1,0,0,0,934,930,1,0,0,0,934,931,1,0,0,0,934,
        932,1,0,0,0,934,933,1,0,0,0,935,153,1,0,0,0,936,939,3,156,78,0,937,
        939,3,182,91,0,938,936,1,0,0,0,938,937,1,0,0,0,939,155,1,0,0,0,940,
        945,5,60,0,0,941,945,5,35,0,0,942,945,5,66,0,0,943,945,3,192,96,
        0,944,940,1,0,0,0,944,941,1,0,0,0,944,942,1,0,0,0,944,943,1,0,0,
        0,945,958,1,0,0,0,946,948,5,22,0,0,947,949,3,154,77,0,948,947,1,
        0,0,0,948,949,1,0,0,0,949,954,1,0,0,0,950,951,5,16,0,0,951,953,3,
        154,77,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,955,
        1,0,0,0,955,957,1,0,0,0,956,954,1,0,0,0,957,959,5,23,0,0,958,946,
        1,0,0,0,958,959,1,0,0,0,959,157,1,0,0,0,960,961,5,98,0,0,961,964,
        3,162,81,0,962,963,5,99,0,0,963,965,3,154,77,0,964,962,1,0,0,0,964,
        965,1,0,0,0,965,159,1,0,0,0,966,967,3,162,81,0,967,968,5,99,0,0,
        968,969,3,154,77,0,969,161,1,0,0,0,970,976,3,192,96,0,971,972,5,
        22,0,0,972,973,3,164,82,0,973,974,5,23,0,0,974,976,1,0,0,0,975,970,
        1,0,0,0,975,971,1,0,0,0,976,163,1,0,0,0,977,982,3,192,96,0,978,979,
        5,16,0,0,979,981,3,192,96,0,980,978,1,0,0,0,981,984,1,0,0,0,982,
        980,1,0,0,0,982,983,1,0,0,0,983,165,1,0,0,0,984,982,1,0,0,0,985,
        986,5,100,0,0,986,987,3,192,96,0,987,167,1,0,0,0,988,989,3,192,96,
        0,989,990,5,87,0,0,990,169,1,0,0,0,991,992,5,101,0,0,992,996,3,154,
        77,0,993,995,3,172,86,0,994,993,1,0,0,0,995,998,1,0,0,0,996,994,
        1,0,0,0,996,997,1,0,0,0,997,171,1,0,0,0,998,996,1,0,0,0,999,1000,
        5,102,0,0,1000,1001,3,182,91,0,1001,1002,3,150,75,0,1002,1006,1,
        0,0,0,1003,1004,5,103,0,0,1004,1006,3,150,75,0,1005,999,1,0,0,0,
        1005,1003,1,0,0,0,1006,173,1,0,0,0,1007,1008,5,29,0,0,1008,1009,
        3,192,96,0,1009,1011,5,22,0,0,1010,1012,3,164,82,0,1011,1010,1,0,
        0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1015,5,23,0,0,1014,
        1016,3,176,88,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,
        0,0,0,1017,1018,3,150,75,0,1018,175,1,0,0,0,1019,1020,5,104,0,0,
        1020,1021,3,164,82,0,1021,177,1,0,0,0,1022,1025,5,25,0,0,1023,1026,
        3,150,75,0,1024,1026,3,154,77,0,1025,1023,1,0,0,0,1025,1024,1,0,
        0,0,1026,1027,1,0,0,0,1027,1030,3,154,77,0,1028,1031,3,150,75,0,
        1029,1031,3,154,77,0,1030,1028,1,0,0,0,1030,1029,1,0,0,0,1031,1032,
        1,0,0,0,1032,1033,3,150,75,0,1033,179,1,0,0,0,1034,1035,5,55,0,0,
        1035,1036,3,154,77,0,1036,1037,3,150,75,0,1037,181,1,0,0,0,1038,
        1039,7,19,0,0,1039,183,1,0,0,0,1040,1041,5,58,0,0,1041,1042,3,192,
        96,0,1042,1043,3,150,75,0,1043,185,1,0,0,0,1044,1046,5,22,0,0,1045,
        1047,3,136,68,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1054,1,
        0,0,0,1048,1050,5,16,0,0,1049,1051,3,136,68,0,1050,1049,1,0,0,0,
        1050,1051,1,0,0,0,1051,1053,1,0,0,0,1052,1048,1,0,0,0,1053,1056,
        1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,1057,1,0,0,0,1056,
        1054,1,0,0,0,1057,1071,5,23,0,0,1058,1067,5,33,0,0,1059,1064,3,136,
        68,0,1060,1061,5,16,0,0,1061,1063,3,136,68,0,1062,1060,1,0,0,0,1063,
        1066,1,0,0,0,1064,1062,1,0,0,0,1064,1065,1,0,0,0,1065,1068,1,0,0,
        0,1066,1064,1,0,0,0,1067,1059,1,0,0,0,1067,1068,1,0,0,0,1068,1069,
        1,0,0,0,1069,1071,5,34,0,0,1070,1044,1,0,0,0,1070,1058,1,0,0,0,1071,
        187,1,0,0,0,1072,1075,3,134,67,0,1073,1075,3,66,33,0,1074,1072,1,
        0,0,0,1074,1073,1,0,0,0,1075,189,1,0,0,0,1076,1078,7,20,0,0,1077,
        1079,5,116,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,191,1,0,
        0,0,1080,1081,7,21,0,0,1081,193,1,0,0,0,121,197,199,213,217,222,
        229,235,241,245,257,265,270,280,283,289,297,300,310,316,322,331,
        345,348,360,367,370,373,377,382,386,397,399,403,409,419,425,436,
        439,445,448,456,459,465,468,476,479,485,489,500,505,510,518,533,
        535,540,550,570,580,585,590,594,608,613,619,628,632,637,641,647,
        654,665,675,681,685,688,695,715,733,737,742,746,750,755,760,764,
        788,847,849,859,866,868,875,883,887,895,899,901,912,934,938,944,
        948,954,958,964,975,982,996,1005,1011,1015,1025,1030,1046,1050,1054,
        1064,1067,1070,1074,1078
    ]

class CryptlangParser ( Parser ):

    grammarFileName = "Cryptlang.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'Cryptlang'", "'^'", 
                     "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                     "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'using'", 
                     "'for'", "'struct'", "'constructor'", "'modifier'", 
                     "'function'", "'returns'", "'event'", "'enum'", "'['", 
                     "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", 
                     "'storage'", "'calldata'", "'@'", "'#'", "'SHA3'", 
                     "'SHA2'", "'RIPEMD'", "'ECDSA'", "'RSA'", "'BLS'", 
                     "'Pedersen'", "'Merkle'", "'Groth16'", "'PLONK'", "'with'", 
                     "'if'", "'else'", "'while'", "'assembly'", "'do'", 
                     "'return'", "'throw'", "'emit'", "'var'", "'bool'", 
                     "'string'", "'byte'", "'++'", "'--'", "'new'", "'+'", 
                     "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", 
                     "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", 
                     "'&&'", "'||'", "'?'", "':'", "'|='", "'^='", "'&='", 
                     "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", 
                     "'->'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'anonymous'", "'break'", 
                     "'constant'", "'continue'", "'external'", "'indexed'", 
                     "'internal'", "'payable'", "'private'", "'public'", 
                     "'pure'", "'type'", "'view'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "NatSpecSingleLine", "NatSpecMultiLine", 
                      "Int", "Uint", "Byte", "Fixed", "Ufixed", "VersionLiteral", 
                      "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
                      "HexLiteral", "ReservedKeyword", "AnonymousKeyword", 
                      "BreakKeyword", "ConstantKeyword", "ContinueKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "PureKeyword", "TypeKeyword", "ViewKeyword", "Identifier", 
                      "StringLiteral", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_natSpec = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_usingForDeclaration = 14
    RULE_structDefinition = 15
    RULE_constructorDefinition = 16
    RULE_modifierDefinition = 17
    RULE_modifierInvocation = 18
    RULE_functionDefinition = 19
    RULE_returnParameters = 20
    RULE_modifierList = 21
    RULE_eventDefinition = 22
    RULE_enumValue = 23
    RULE_enumDefinition = 24
    RULE_parameterList = 25
    RULE_parameter = 26
    RULE_eventParameterList = 27
    RULE_eventParameter = 28
    RULE_functionTypeParameterList = 29
    RULE_functionTypeParameter = 30
    RULE_variableDeclaration = 31
    RULE_typeName = 32
    RULE_userDefinedTypeName = 33
    RULE_mapping = 34
    RULE_functionTypeName = 35
    RULE_storageLocation = 36
    RULE_stateMutability = 37
    RULE_block = 38
    RULE_statement = 39
    RULE_expressionStatement = 40
    RULE_statementSymbol = 41
    RULE_privateSymbol = 42
    RULE_privateIdentifier = 43
    RULE_privateIdentifierList = 44
    RULE_hashMethod = 45
    RULE_signatureMethod = 46
    RULE_commitmentMethod = 47
    RULE_proofMethod = 48
    RULE_signatureStatement = 49
    RULE_commitmentStatement = 50
    RULE_taskStatement = 51
    RULE_otherStatement = 52
    RULE_ifStatement = 53
    RULE_whileStatement = 54
    RULE_simpleStatement = 55
    RULE_forStatement = 56
    RULE_inlineAssemblyStatement = 57
    RULE_doWhileStatement = 58
    RULE_continueStatement = 59
    RULE_breakStatement = 60
    RULE_returnStatement = 61
    RULE_throwStatement = 62
    RULE_emitStatement = 63
    RULE_variableDeclarationStatement = 64
    RULE_variableDeclarationList = 65
    RULE_identifierList = 66
    RULE_elementaryTypeName = 67
    RULE_expression = 68
    RULE_primaryExpression = 69
    RULE_expressionList = 70
    RULE_nameValueList = 71
    RULE_nameValue = 72
    RULE_functionCallArguments = 73
    RULE_functionCall = 74
    RULE_assemblyBlock = 75
    RULE_assemblyItem = 76
    RULE_assemblyExpression = 77
    RULE_assemblyCall = 78
    RULE_assemblyLocalDefinition = 79
    RULE_assemblyAssignment = 80
    RULE_assemblyIdentifierOrList = 81
    RULE_assemblyIdentifierList = 82
    RULE_assemblyStackAssignment = 83
    RULE_labelDefinition = 84
    RULE_assemblySwitch = 85
    RULE_assemblyCase = 86
    RULE_assemblyFunctionDefinition = 87
    RULE_assemblyFunctionReturns = 88
    RULE_assemblyFor = 89
    RULE_assemblyIf = 90
    RULE_assemblyLiteral = 91
    RULE_subAssembly = 92
    RULE_tupleExpression = 93
    RULE_typeNameExpression = 94
    RULE_numberLiteral = 95
    RULE_identifier = 96

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "natSpec", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "constructorDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mapping", "functionTypeName", "storageLocation", "stateMutability", 
                   "block", "statement", "expressionStatement", "statementSymbol", 
                   "privateSymbol", "privateIdentifier", "privateIdentifierList", 
                   "hashMethod", "signatureMethod", "commitmentMethod", 
                   "proofMethod", "signatureStatement", "commitmentStatement", 
                   "taskStatement", "otherStatement", "ifStatement", "whileStatement", 
                   "simpleStatement", "forStatement", "inlineAssemblyStatement", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "throwStatement", "emitStatement", 
                   "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    NatSpecSingleLine=105
    NatSpecMultiLine=106
    Int=107
    Uint=108
    Byte=109
    Fixed=110
    Ufixed=111
    VersionLiteral=112
    BooleanLiteral=113
    DecimalNumber=114
    HexNumber=115
    NumberUnit=116
    HexLiteral=117
    ReservedKeyword=118
    AnonymousKeyword=119
    BreakKeyword=120
    ConstantKeyword=121
    ContinueKeyword=122
    ExternalKeyword=123
    IndexedKeyword=124
    InternalKeyword=125
    PayableKeyword=126
    PrivateKeyword=127
    PublicKeyword=128
    PureKeyword=129
    TypeKeyword=130
    ViewKeyword=131
    Identifier=132
    StringLiteral=133
    WS=134
    COMMENT=135
    LINE_COMMENT=136

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CryptlangParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = CryptlangParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1839106) != 0) or _la==105 or _la==106:
                self.state = 197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 194
                    self.pragmaDirective()
                    pass
                elif token in [12]:
                    self.state = 195
                    self.importDirective()
                    pass
                elif token in [18, 19, 20, 105, 106]:
                    self.state = 196
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(CryptlangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(CryptlangParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(CryptlangParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = CryptlangParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(CryptlangParser.T__0)
            self.state = 205
            self.pragmaName()
            self.state = 206
            self.pragmaValue()
            self.state = 207
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = CryptlangParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(CryptlangParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(CryptlangParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = CryptlangParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 212
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = CryptlangParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.versionConstraint()
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0) or _la==112:
                self.state = 216
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = CryptlangParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(CryptlangParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(CryptlangParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = CryptlangParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0):
                self.state = 221
                self.versionOperator()


            self.state = 224
            self.match(CryptlangParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = CryptlangParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.identifier()
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 227
                self.match(CryptlangParser.T__10)
                self.state = 228
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = CryptlangParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 231
                self.match(CryptlangParser.T__11)
                self.state = 232
                self.match(CryptlangParser.StringLiteral)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 233
                    self.match(CryptlangParser.T__10)
                    self.state = 234
                    self.identifier()


                self.state = 237
                self.match(CryptlangParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 238
                self.match(CryptlangParser.T__11)
                self.state = 241
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 239
                    self.match(CryptlangParser.T__12)
                    pass
                elif token in [14, 41, 132]:
                    self.state = 240
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 243
                    self.match(CryptlangParser.T__10)
                    self.state = 244
                    self.identifier()


                self.state = 247
                self.match(CryptlangParser.T__13)
                self.state = 248
                self.match(CryptlangParser.StringLiteral)
                self.state = 249
                self.match(CryptlangParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 250
                self.match(CryptlangParser.T__11)
                self.state = 251
                self.match(CryptlangParser.T__14)
                self.state = 252
                self.importDeclaration()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 253
                    self.match(CryptlangParser.T__15)
                    self.state = 254
                    self.importDeclaration()
                    self.state = 259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 260
                self.match(CryptlangParser.T__16)
                self.state = 261
                self.match(CryptlangParser.T__13)
                self.state = 262
                self.match(CryptlangParser.StringLiteral)
                self.state = 263
                self.match(CryptlangParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NatSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NatSpecSingleLine(self):
            return self.getToken(CryptlangParser.NatSpecSingleLine, 0)

        def NatSpecMultiLine(self):
            return self.getToken(CryptlangParser.NatSpecMultiLine, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_natSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatSpec" ):
                listener.enterNatSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatSpec" ):
                listener.exitNatSpec(self)




    def natSpec(self):

        localctx = CryptlangParser.NatSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_natSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            _la = self._input.LA(1)
            if not(_la==105 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ContractPartContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = CryptlangParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105 or _la==106:
                self.state = 269
                self.natSpec()


            self.state = 272
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 273
            self.identifier()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 274
                self.match(CryptlangParser.T__20)
                self.state = 275
                self.inheritanceSpecifier()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 276
                    self.match(CryptlangParser.T__15)
                    self.state = 277
                    self.inheritanceSpecifier()
                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 285
            self.match(CryptlangParser.T__14)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8444249446478849) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 134217855) != 0):
                self.state = 286
                self.contractPart()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = CryptlangParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.userDefinedTypeName()
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 295
                self.match(CryptlangParser.T__21)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                    self.state = 296
                    self.expressionList()


                self.state = 299
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.StructDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = CryptlangParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 304
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 305
                self.constructorDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 306
                self.modifierDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 307
                self.functionDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 308
                self.eventDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 309
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PublicKeyword)
            else:
                return self.getToken(CryptlangParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PrivateKeyword)
            else:
                return self.getToken(CryptlangParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ConstantKeyword)
            else:
                return self.getToken(CryptlangParser.ConstantKeyword, i)

        def getRuleIndex(self):
            return CryptlangParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = CryptlangParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.typeName(0)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 209) != 0):
                self.state = 313
                _la = self._input.LA(1)
                if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 209) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 319
            self.identifier()
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 320
                self.match(CryptlangParser.T__9)
                self.state = 321
                self.expression(0)


            self.state = 324
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = CryptlangParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(CryptlangParser.T__23)
            self.state = 327
            self.identifier()
            self.state = 328
            self.match(CryptlangParser.T__24)
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 329
                self.match(CryptlangParser.T__12)
                pass
            elif token in [14, 29, 35, 37, 41, 63, 64, 65, 66, 107, 108, 109, 110, 111, 132]:
                self.state = 330
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 333
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = CryptlangParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(CryptlangParser.T__25)
            self.state = 336
            self.identifier()
            self.state = 337
            self.match(CryptlangParser.T__14)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8444249446055937) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 33554463) != 0):
                self.state = 338
                self.variableDeclaration()
                self.state = 339
                self.match(CryptlangParser.T__1)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8444249446055937) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 33554463) != 0):
                    self.state = 340
                    self.variableDeclaration()
                    self.state = 341
                    self.match(CryptlangParser.T__1)
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 350
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)




    def constructorDefinition(self):

        localctx = CryptlangParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(CryptlangParser.T__26)
            self.state = 353
            self.parameterList()
            self.state = 354
            self.modifierList()
            self.state = 355
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = CryptlangParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(CryptlangParser.T__27)
            self.state = 358
            self.identifier()
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 359
                self.parameterList()


            self.state = 362
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = CryptlangParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.identifier()
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 365
                self.match(CryptlangParser.T__21)
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                    self.state = 366
                    self.expressionList()


                self.state = 369
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(CryptlangParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(CryptlangParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = CryptlangParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105 or _la==106:
                self.state = 372
                self.natSpec()


            self.state = 375
            self.match(CryptlangParser.T__28)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==132:
                self.state = 376
                self.identifier()


            self.state = 379
            self.parameterList()
            self.state = 380
            self.modifierList()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 381
                self.returnParameters()


            self.state = 386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 384
                self.match(CryptlangParser.T__1)
                pass
            elif token in [15]:
                self.state = 385
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryptlangParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = CryptlangParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(CryptlangParser.T__29)
            self.state = 389
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ExternalKeyword)
            else:
                return self.getToken(CryptlangParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PublicKeyword)
            else:
                return self.getToken(CryptlangParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.PrivateKeyword)
            else:
                return self.getToken(CryptlangParser.PrivateKeyword, i)

        def getRuleIndex(self):
            return CryptlangParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = CryptlangParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14 or _la==41 or ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 3573) != 0):
                self.state = 397
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 41, 132]:
                    self.state = 391
                    self.modifierInvocation()
                    pass
                elif token in [121, 126, 129, 131]:
                    self.state = 392
                    self.stateMutability()
                    pass
                elif token in [123]:
                    self.state = 393
                    self.match(CryptlangParser.ExternalKeyword)
                    pass
                elif token in [128]:
                    self.state = 394
                    self.match(CryptlangParser.PublicKeyword)
                    pass
                elif token in [125]:
                    self.state = 395
                    self.match(CryptlangParser.InternalKeyword)
                    pass
                elif token in [127]:
                    self.state = 396
                    self.match(CryptlangParser.PrivateKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(CryptlangParser.EventParameterListContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryptlangParser.NatSpecContext,0)


        def AnonymousKeyword(self):
            return self.getToken(CryptlangParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = CryptlangParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105 or _la==106:
                self.state = 402
                self.natSpec()


            self.state = 405
            self.match(CryptlangParser.T__30)
            self.state = 406
            self.identifier()
            self.state = 407
            self.eventParameterList()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 408
                self.match(CryptlangParser.AnonymousKeyword)


            self.state = 411
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = CryptlangParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.EnumValueContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = CryptlangParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(CryptlangParser.T__31)
            self.state = 416
            self.identifier()
            self.state = 417
            self.match(CryptlangParser.T__14)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==132:
                self.state = 418
                self.enumValue()


            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 421
                self.match(CryptlangParser.T__15)
                self.state = 422
                self.enumValue()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 428
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = CryptlangParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(CryptlangParser.T__21)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8444249446055937) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 33554463) != 0):
                self.state = 431
                self.parameter()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 432
                    self.match(CryptlangParser.T__15)
                    self.state = 433
                    self.parameter()
                    self.state = 438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 441
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = CryptlangParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.typeName(0)
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 444
                self.storageLocation()


            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==132:
                self.state = 447
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.EventParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = CryptlangParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(CryptlangParser.T__21)
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8444249446055937) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 33554463) != 0):
                self.state = 451
                self.eventParameter()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 452
                    self.match(CryptlangParser.T__15)
                    self.state = 453
                    self.eventParameter()
                    self.state = 458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 461
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(CryptlangParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = CryptlangParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.typeName(0)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 464
                self.match(CryptlangParser.IndexedKeyword)


            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==132:
                self.state = 467
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = CryptlangParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(CryptlangParser.T__21)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8444249446055937) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 33554463) != 0):
                self.state = 471
                self.functionTypeParameter()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 472
                    self.match(CryptlangParser.T__15)
                    self.state = 473
                    self.functionTypeParameter()
                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 481
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = CryptlangParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.typeName(0)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0):
                self.state = 484
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryptlangParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = CryptlangParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.typeName(0)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 488
                self.storageLocation()


            self.state = 491
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(CryptlangParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(CryptlangParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CryptlangParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 494
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 495
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 496
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 497
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 498
                self.match(CryptlangParser.T__34)
                self.state = 499
                self.match(CryptlangParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CryptlangParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 502
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 503
                    self.match(CryptlangParser.T__32)
                    self.state = 505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                        self.state = 504
                        self.expression(0)


                    self.state = 507
                    self.match(CryptlangParser.T__33) 
                self.state = 512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = CryptlangParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.identifier()
            self.state = 518
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 514
                    self.match(CryptlangParser.T__35)
                    self.state = 515
                    self.identifier() 
                self.state = 520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = CryptlangParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(CryptlangParser.T__36)
            self.state = 522
            self.match(CryptlangParser.T__21)
            self.state = 523
            self.elementaryTypeName()
            self.state = 524
            self.match(CryptlangParser.T__37)
            self.state = 525
            self.typeName(0)
            self.state = 526
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.InternalKeyword)
            else:
                return self.getToken(CryptlangParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryptlangParser.ExternalKeyword)
            else:
                return self.getToken(CryptlangParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = CryptlangParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(CryptlangParser.T__28)
            self.state = 529
            self.functionTypeParameterList()
            self.state = 535
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 533
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [125]:
                        self.state = 530
                        self.match(CryptlangParser.InternalKeyword)
                        pass
                    elif token in [123]:
                        self.state = 531
                        self.match(CryptlangParser.ExternalKeyword)
                        pass
                    elif token in [121, 126, 129, 131]:
                        self.state = 532
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 537
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 538
                self.match(CryptlangParser.T__29)
                self.state = 539
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = CryptlangParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(CryptlangParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(CryptlangParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(CryptlangParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(CryptlangParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = CryptlangParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            _la = self._input.LA(1)
            if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 1313) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StatementContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StatementContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CryptlangParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(CryptlangParser.T__14)
            self.state = 550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 547
                    self.statement() 
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 553
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def taskStatement(self):
            return self.getTypedRuleContext(CryptlangParser.TaskStatementContext,0)


        def otherStatement(self):
            return self.getTypedRuleContext(CryptlangParser.OtherStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(CryptlangParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(CryptlangParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(CryptlangParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(CryptlangParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(CryptlangParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(CryptlangParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(CryptlangParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SimpleStatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CryptlangParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statement)
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.taskStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self.otherStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 557
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 558
                self.whileStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 559
                self.forStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 560
                self.block()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 561
                self.inlineAssemblyStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 562
                self.doWhileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 563
                self.continueStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 564
                self.breakStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 565
                self.returnStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 566
                self.throwStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 567
                self.emitStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 568
                self.simpleStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 569
                self.taskStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = CryptlangParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.expression(0)
            self.state = 573
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_statementSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementSymbol" ):
                listener.enterStatementSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementSymbol" ):
                listener.exitStatementSymbol(self)




    def statementSymbol(self):

        localctx = CryptlangParser.StatementSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_statementSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(CryptlangParser.T__41)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateSymbol" ):
                listener.enterPrivateSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateSymbol" ):
                listener.exitPrivateSymbol(self)




    def privateSymbol(self):

        localctx = CryptlangParser.PrivateSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_privateSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(CryptlangParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def privateSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.PrivateSymbolContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifier" ):
                listener.enterPrivateIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifier" ):
                listener.exitPrivateIdentifier(self)




    def privateIdentifier(self):

        localctx = CryptlangParser.PrivateIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_privateIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 579
                self.privateSymbol()


            self.state = 582
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privateIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.PrivateIdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.PrivateIdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_privateIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifierList" ):
                listener.enterPrivateIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifierList" ):
                listener.exitPrivateIdentifierList(self)




    def privateIdentifierList(self):

        localctx = CryptlangParser.PrivateIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_privateIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 10995116294144) != 0) or _la==132:
                        self.state = 584
                        self.privateIdentifier()


                    self.state = 587
                    self.match(CryptlangParser.T__15) 
                self.state = 592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 10995116294144) != 0) or _la==132:
                self.state = 593
                self.privateIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HashMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_hashMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashMethod" ):
                listener.enterHashMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashMethod" ):
                listener.exitHashMethod(self)




    def hashMethod(self):

        localctx = CryptlangParser.HashMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_hashMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 123145302310912) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_signatureMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatureMethod" ):
                listener.enterSignatureMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatureMethod" ):
                listener.exitSignatureMethod(self)




    def signatureMethod(self):

        localctx = CryptlangParser.SignatureMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_signatureMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 985162418487296) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitmentMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_commitmentMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitmentMethod" ):
                listener.enterCommitmentMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitmentMethod" ):
                listener.exitCommitmentMethod(self)




    def commitmentMethod(self):

        localctx = CryptlangParser.CommitmentMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_commitmentMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            _la = self._input.LA(1)
            if not(_la==50 or _la==51):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProofMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_proofMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProofMethod" ):
                listener.enterProofMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProofMethod" ):
                listener.exitProofMethod(self)




    def proofMethod(self):

        localctx = CryptlangParser.ProofMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_proofMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            _la = self._input.LA(1)
            if not(_la==52 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.StatementSymbolContext,0)


        def signatureMethod(self):
            return self.getTypedRuleContext(CryptlangParser.SignatureMethodContext,0)


        def hashMethod(self):
            return self.getTypedRuleContext(CryptlangParser.HashMethodContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_signatureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatureStatement" ):
                listener.enterSignatureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatureStatement" ):
                listener.exitSignatureStatement(self)




    def signatureStatement(self):

        localctx = CryptlangParser.SignatureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_signatureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.statementSymbol()
            self.state = 605
            self.signatureMethod()
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 606
                self.match(CryptlangParser.T__53)
                self.state = 607
                self.hashMethod()


            self.state = 610
            self.match(CryptlangParser.T__21)
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 611
                self.match(CryptlangParser.T__42)
                self.state = 612
                self.identifier()


            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 615
                self.match(CryptlangParser.T__15)
                self.state = 616
                self.identifier()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 622
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryptlangParser.StatementSymbolContext,0)


        def commitmentMethod(self):
            return self.getTypedRuleContext(CryptlangParser.CommitmentMethodContext,0)


        def hashMethod(self):
            return self.getTypedRuleContext(CryptlangParser.HashMethodContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_commitmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitmentStatement" ):
                listener.enterCommitmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitmentStatement" ):
                listener.exitCommitmentStatement(self)




    def commitmentStatement(self):

        localctx = CryptlangParser.CommitmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_commitmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.statementSymbol()
            self.state = 625
            self.commitmentMethod()
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 626
                self.match(CryptlangParser.T__53)
                self.state = 627
                self.hashMethod()


            self.state = 630
            self.match(CryptlangParser.T__21)
            self.state = 637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==132:
                        self.state = 631
                        self.identifier()


                    self.state = 634
                    self.match(CryptlangParser.T__15) 
                self.state = 639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==132:
                self.state = 640
                self.identifier()


            self.state = 643
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signatureStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SignatureStatementContext,0)


        def commitmentStatement(self):
            return self.getTypedRuleContext(CryptlangParser.CommitmentStatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_taskStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTaskStatement" ):
                listener.enterTaskStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTaskStatement" ):
                listener.exitTaskStatement(self)




    def taskStatement(self):

        localctx = CryptlangParser.TaskStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_taskStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 645
                self.signatureStatement()
                pass

            elif la_ == 2:
                self.state = 646
                self.commitmentStatement()
                pass


            self.state = 649
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_otherStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherStatement" ):
                listener.enterOtherStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherStatement" ):
                listener.exitOtherStatement(self)




    def otherStatement(self):

        localctx = CryptlangParser.OtherStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_otherStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 651
                    self.matchWildcard()

                else:
                    raise NoViableAltException(self)
                self.state = 654 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 656
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.StatementContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.StatementContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = CryptlangParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(CryptlangParser.T__54)
            self.state = 659
            self.match(CryptlangParser.T__21)
            self.state = 660
            self.expression(0)
            self.state = 661
            self.match(CryptlangParser.T__22)
            self.state = 662
            self.statement()
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 663
                self.match(CryptlangParser.T__55)
                self.state = 664
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = CryptlangParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(CryptlangParser.T__56)
            self.state = 668
            self.match(CryptlangParser.T__21)
            self.state = 669
            self.expression(0)
            self.state = 670
            self.match(CryptlangParser.T__22)
            self.state = 671
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = CryptlangParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 673
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 674
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(CryptlangParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = CryptlangParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(CryptlangParser.T__24)
            self.state = 678
            self.match(CryptlangParser.T__21)
            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 22, 29, 33, 35, 37, 41, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 107, 108, 109, 110, 111, 113, 114, 115, 117, 130, 132, 133]:
                self.state = 679
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 680
                self.match(CryptlangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 22, 33, 35, 41, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 107, 108, 109, 110, 111, 113, 114, 115, 117, 130, 132, 133]:
                self.state = 683
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 684
                self.match(CryptlangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                self.state = 687
                self.expression(0)


            self.state = 690
            self.match(CryptlangParser.T__22)
            self.state = 691
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = CryptlangParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(CryptlangParser.T__57)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 694
                self.match(CryptlangParser.StringLiteral)


            self.state = 697
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CryptlangParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = CryptlangParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(CryptlangParser.T__58)
            self.state = 700
            self.statement()
            self.state = 701
            self.match(CryptlangParser.T__56)
            self.state = 702
            self.match(CryptlangParser.T__21)
            self.state = 703
            self.expression(0)
            self.state = 704
            self.match(CryptlangParser.T__22)
            self.state = 705
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(CryptlangParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = CryptlangParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(CryptlangParser.ContinueKeyword)
            self.state = 708
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(CryptlangParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = CryptlangParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(CryptlangParser.BreakKeyword)
            self.state = 711
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = CryptlangParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(CryptlangParser.T__59)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                self.state = 714
                self.expression(0)


            self.state = 717
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryptlangParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = CryptlangParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(CryptlangParser.T__60)
            self.state = 720
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = CryptlangParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(CryptlangParser.T__61)
            self.state = 723
            self.functionCall()
            self.state = 724
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(CryptlangParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = CryptlangParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 726
                self.match(CryptlangParser.T__62)
                self.state = 727
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 728
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 729
                self.match(CryptlangParser.T__21)
                self.state = 730
                self.variableDeclarationList()
                self.state = 731
                self.match(CryptlangParser.T__22)
                pass


            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 735
                self.match(CryptlangParser.T__9)
                self.state = 736
                self.expression(0)


            self.state = 739
            self.match(CryptlangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = CryptlangParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8444249446055937) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 33554463) != 0):
                self.state = 741
                self.variableDeclaration()


            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 744
                self.match(CryptlangParser.T__15)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8444249446055937) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 33554463) != 0):
                    self.state = 745
                    self.variableDeclaration()


                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = CryptlangParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(CryptlangParser.T__21)
            self.state = 760
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==132:
                        self.state = 754
                        self.identifier()


                    self.state = 757
                    self.match(CryptlangParser.T__15) 
                self.state = 762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==132:
                self.state = 763
                self.identifier()


            self.state = 766
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(CryptlangParser.Int, 0)

        def Uint(self):
            return self.getToken(CryptlangParser.Uint, 0)

        def Byte(self):
            return self.getToken(CryptlangParser.Byte, 0)

        def Fixed(self):
            return self.getToken(CryptlangParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(CryptlangParser.Ufixed, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = CryptlangParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            _la = self._input.LA(1)
            if not(_la==35 or _la==63 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 272678883688455) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryptlangParser.PrimaryExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CryptlangParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 771
                self.match(CryptlangParser.T__68)
                self.state = 772
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 773
                self.match(CryptlangParser.T__21)
                self.state = 774
                self.expression(0)
                self.state = 775
                self.match(CryptlangParser.T__22)
                pass

            elif la_ == 3:
                self.state = 777
                _la = self._input.LA(1)
                if not(_la==67 or _la==68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 778
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 779
                _la = self._input.LA(1)
                if not(_la==70 or _la==71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 780
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 781
                _la = self._input.LA(1)
                if not(_la==72 or _la==73):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 782
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 783
                self.match(CryptlangParser.T__73)
                self.state = 784
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 785
                self.match(CryptlangParser.T__4)
                self.state = 786
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 787
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 849
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 847
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 790
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 791
                        self.match(CryptlangParser.T__74)
                        self.state = 792
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 793
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 794
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==76 or _la==77):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 795
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 796
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 797
                        _la = self._input.LA(1)
                        if not(_la==70 or _la==71):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 798
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 799
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 800
                        _la = self._input.LA(1)
                        if not(_la==78 or _la==79):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 801
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 802
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 803
                        self.match(CryptlangParser.T__79)
                        self.state = 804
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 805
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 806
                        self.match(CryptlangParser.T__3)
                        self.state = 807
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 808
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 809
                        self.match(CryptlangParser.T__80)
                        self.state = 810
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 811
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 812
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 813
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 814
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 815
                        _la = self._input.LA(1)
                        if not(_la==82 or _la==83):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 816
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 817
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 818
                        self.match(CryptlangParser.T__83)
                        self.state = 819
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 820
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 821
                        self.match(CryptlangParser.T__84)
                        self.state = 822
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 823
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 824
                        self.match(CryptlangParser.T__85)
                        self.state = 825
                        self.expression(0)
                        self.state = 826
                        self.match(CryptlangParser.T__86)
                        self.state = 827
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 829
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 830
                        _la = self._input.LA(1)
                        if not(_la==10 or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 1023) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 831
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 832
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 833
                        _la = self._input.LA(1)
                        if not(_la==67 or _la==68):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 834
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 835
                        self.match(CryptlangParser.T__32)
                        self.state = 836
                        self.expression(0)
                        self.state = 837
                        self.match(CryptlangParser.T__33)
                        pass

                    elif la_ == 16:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 839
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 840
                        self.match(CryptlangParser.T__21)
                        self.state = 841
                        self.functionCallArguments()
                        self.state = 842
                        self.match(CryptlangParser.T__22)
                        pass

                    elif la_ == 17:
                        localctx = CryptlangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 844
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 845
                        self.match(CryptlangParser.T__35)
                        self.state = 846
                        self.identifier()
                        pass

             
                self.state = 851
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(CryptlangParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.NumberLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(CryptlangParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(CryptlangParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(CryptlangParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = CryptlangParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_primaryExpression)
        try:
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.match(CryptlangParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 854
                self.match(CryptlangParser.HexLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 855
                self.match(CryptlangParser.StringLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 856
                self.identifier()
                self.state = 859
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 857
                    self.match(CryptlangParser.T__32)
                    self.state = 858
                    self.match(CryptlangParser.T__33)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 861
                self.match(CryptlangParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 862
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 863
                self.typeNameExpression()
                self.state = 866
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 864
                    self.match(CryptlangParser.T__32)
                    self.state = 865
                    self.match(CryptlangParser.T__33)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = CryptlangParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.expression(0)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 871
                self.match(CryptlangParser.T__15)
                self.state = 872
                self.expression(0)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.NameValueContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.NameValueContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = CryptlangParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.nameValue()
            self.state = 883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 879
                    self.match(CryptlangParser.T__15)
                    self.state = 880
                    self.nameValue() 
                self.state = 885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 886
                self.match(CryptlangParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = CryptlangParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.identifier()
            self.state = 890
            self.match(CryptlangParser.T__86)
            self.state = 891
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(CryptlangParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = CryptlangParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.match(CryptlangParser.T__14)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14 or _la==41 or _la==132:
                    self.state = 894
                    self.nameValueList()


                self.state = 897
                self.match(CryptlangParser.T__16)
                pass
            elif token in [5, 14, 22, 23, 33, 35, 41, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 107, 108, 109, 110, 111, 113, 114, 115, 117, 130, 132, 133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                    self.state = 898
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryptlangParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(CryptlangParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = CryptlangParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.expression(0)
            self.state = 904
            self.match(CryptlangParser.T__21)
            self.state = 905
            self.functionCallArguments()
            self.state = 906
            self.match(CryptlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = CryptlangParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(CryptlangParser.T__14)
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4593759717198083) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 51561299981) != 0):
                self.state = 909
                self.assemblyItem()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 915
            self.match(CryptlangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(CryptlangParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(CryptlangParser.ContinueKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(CryptlangParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = CryptlangParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyItem)
        try:
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 919
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 920
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 921
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 922
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 923
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 924
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 925
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 926
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 927
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 928
                self.match(CryptlangParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 929
                self.match(CryptlangParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 930
                self.subAssembly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 931
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 932
                self.match(CryptlangParser.StringLiteral)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 933
                self.match(CryptlangParser.HexLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = CryptlangParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyExpression)
        try:
            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 35, 41, 60, 66, 132]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.assemblyCall()
                pass
            elif token in [114, 115, 117, 133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = CryptlangParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.state = 940
                self.match(CryptlangParser.T__59)
                pass
            elif token in [35]:
                self.state = 941
                self.match(CryptlangParser.T__34)
                pass
            elif token in [66]:
                self.state = 942
                self.match(CryptlangParser.T__65)
                pass
            elif token in [14, 41, 132]:
                self.state = 943
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 946
                self.match(CryptlangParser.T__21)
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 4573968507863041) != 0) or ((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & 786443) != 0):
                    self.state = 947
                    self.assemblyExpression()


                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 950
                    self.match(CryptlangParser.T__15)
                    self.state = 951
                    self.assemblyExpression()
                    self.state = 956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 957
                self.match(CryptlangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = CryptlangParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(CryptlangParser.T__97)
            self.state = 961
            self.assemblyIdentifierOrList()
            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 962
                self.match(CryptlangParser.T__98)
                self.state = 963
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = CryptlangParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.assemblyIdentifierOrList()
            self.state = 967
            self.match(CryptlangParser.T__98)
            self.state = 968
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = CryptlangParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 41, 132]:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.identifier()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.match(CryptlangParser.T__21)
                self.state = 972
                self.assemblyIdentifierList()
                self.state = 973
                self.match(CryptlangParser.T__22)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = CryptlangParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.identifier()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 978
                self.match(CryptlangParser.T__15)
                self.state = 979
                self.identifier()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = CryptlangParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(CryptlangParser.T__99)
            self.state = 986
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = CryptlangParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.identifier()
            self.state = 989
            self.match(CryptlangParser.T__86)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = CryptlangParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(CryptlangParser.T__100)
            self.state = 992
            self.assemblyExpression()
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==102 or _la==103:
                self.state = 993
                self.assemblyCase()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = CryptlangParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyCase)
        try:
            self.state = 1005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.match(CryptlangParser.T__101)
                self.state = 1000
                self.assemblyLiteral()
                self.state = 1001
                self.assemblyBlock()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.match(CryptlangParser.T__102)
                self.state = 1004
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = CryptlangParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(CryptlangParser.T__28)
            self.state = 1008
            self.identifier()
            self.state = 1009
            self.match(CryptlangParser.T__21)
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==132:
                self.state = 1010
                self.assemblyIdentifierList()


            self.state = 1013
            self.match(CryptlangParser.T__22)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 1014
                self.assemblyFunctionReturns()


            self.state = 1017
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = CryptlangParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(CryptlangParser.T__103)
            self.state = 1020
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = CryptlangParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(CryptlangParser.T__24)
            self.state = 1025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1023
                self.assemblyBlock()
                pass
            elif token in [14, 35, 41, 60, 66, 114, 115, 117, 132, 133]:
                self.state = 1024
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1027
            self.assemblyExpression()
            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1028
                self.assemblyBlock()
                pass
            elif token in [14, 35, 41, 60, 66, 114, 115, 117, 132, 133]:
                self.state = 1029
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1032
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = CryptlangParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(CryptlangParser.T__54)
            self.state = 1035
            self.assemblyExpression()
            self.state = 1036
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CryptlangParser.StringLiteral, 0)

        def DecimalNumber(self):
            return self.getToken(CryptlangParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(CryptlangParser.HexNumber, 0)

        def HexLiteral(self):
            return self.getToken(CryptlangParser.HexLiteral, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = CryptlangParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            _la = self._input.LA(1)
            if not(((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & 524299) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryptlangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryptlangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = CryptlangParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(CryptlangParser.T__57)
            self.state = 1041
            self.identifier()
            self.state = 1042
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryptlangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryptlangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CryptlangParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = CryptlangParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.match(CryptlangParser.T__21)

                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                    self.state = 1045
                    self.expression(0)


                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1048
                    self.match(CryptlangParser.T__15)
                    self.state = 1050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                        self.state = 1049
                        self.expression(0)


                    self.state = 1056
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1057
                self.match(CryptlangParser.T__22)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.match(CryptlangParser.T__32)
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223369794877636576) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 13220527812380671) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 13) != 0):
                    self.state = 1059
                    self.expression(0)
                    self.state = 1064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==16:
                        self.state = 1060
                        self.match(CryptlangParser.T__15)
                        self.state = 1061
                        self.expression(0)
                        self.state = 1066
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1069
                self.match(CryptlangParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryptlangParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return CryptlangParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = CryptlangParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_typeNameExpression)
        try:
            self.state = 1074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 63, 64, 65, 66, 107, 108, 109, 110, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self.elementaryTypeName()
                pass
            elif token in [14, 41, 132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(CryptlangParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(CryptlangParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(CryptlangParser.NumberUnit, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = CryptlangParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1077
                self.match(CryptlangParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CryptlangParser.Identifier, 0)

        def getRuleIndex(self):
            return CryptlangParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CryptlangParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            _la = self._input.LA(1)
            if not(_la==14 or _la==41 or _la==132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.typeName_sempred
        self._predicates[68] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         




