# Generated from Cryplang.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,132,1054,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,1,0,1,0,1,0,5,0,192,8,0,10,0,12,0,195,9,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,208,8,3,1,4,1,4,
        3,4,212,8,4,1,5,1,5,1,6,3,6,217,8,6,1,6,1,6,1,7,1,7,1,7,3,7,224,
        8,7,1,8,1,8,1,8,1,8,3,8,230,8,8,1,8,1,8,1,8,1,8,3,8,236,8,8,1,8,
        1,8,3,8,240,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,250,8,8,10,8,
        12,8,253,9,8,1,8,1,8,1,8,1,8,1,8,3,8,260,8,8,1,9,1,9,1,10,3,10,265,
        8,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,273,8,10,10,10,12,10,276,
        9,10,3,10,278,8,10,1,10,1,10,5,10,282,8,10,10,10,12,10,285,9,10,
        1,10,1,10,1,11,1,11,1,11,3,11,292,8,11,1,11,3,11,295,8,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,305,8,12,1,13,1,13,5,13,309,
        8,13,10,13,12,13,312,9,13,1,13,1,13,1,13,3,13,317,8,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,3,14,326,8,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,5,15,338,8,15,10,15,12,15,341,9,15,3,15,
        343,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,
        355,8,17,1,17,1,17,1,18,1,18,1,18,3,18,362,8,18,1,18,3,18,365,8,
        18,1,19,3,19,368,8,19,1,19,1,19,3,19,372,8,19,1,19,1,19,1,19,3,19,
        377,8,19,1,19,1,19,3,19,381,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,21,1,21,5,21,392,8,21,10,21,12,21,395,9,21,1,22,3,22,398,8,
        22,1,22,1,22,1,22,1,22,3,22,404,8,22,1,22,1,22,1,23,1,23,1,24,1,
        24,1,24,1,24,3,24,414,8,24,1,24,1,24,5,24,418,8,24,10,24,12,24,421,
        9,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,429,8,25,10,25,12,25,432,
        9,25,3,25,434,8,25,1,25,1,25,1,26,1,26,3,26,440,8,26,1,26,3,26,443,
        8,26,1,27,1,27,1,27,1,27,5,27,449,8,27,10,27,12,27,452,9,27,3,27,
        454,8,27,1,27,1,27,1,28,1,28,3,28,460,8,28,1,28,3,28,463,8,28,1,
        29,1,29,1,29,1,29,5,29,469,8,29,10,29,12,29,472,9,29,3,29,474,8,
        29,1,29,1,29,1,30,1,30,3,30,480,8,30,1,31,1,31,3,31,484,8,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,495,8,32,1,32,1,32,
        1,32,3,32,500,8,32,1,32,5,32,503,8,32,10,32,12,32,506,9,32,1,33,
        1,33,1,33,5,33,511,8,33,10,33,12,33,514,9,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,5,35,528,8,35,10,35,12,35,
        531,9,35,1,35,1,35,3,35,535,8,35,1,36,1,36,1,37,1,37,1,38,1,38,5,
        38,543,8,38,10,38,12,38,546,9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,563,8,39,1,40,1,
        40,1,40,1,41,1,41,1,42,1,42,1,43,3,43,573,8,43,1,43,1,43,1,44,3,
        44,578,8,44,1,44,5,44,581,8,44,10,44,12,44,584,9,44,1,44,3,44,587,
        8,44,1,45,1,45,1,46,1,46,1,47,1,47,3,47,595,8,47,1,48,1,48,1,48,
        1,48,1,48,3,48,602,8,48,1,48,5,48,605,8,48,10,48,12,48,608,9,48,
        1,48,3,48,611,8,48,1,48,1,48,3,48,615,8,48,1,48,1,48,1,48,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,3,50,637,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,
        52,3,52,647,8,52,1,53,1,53,1,53,1,53,3,53,653,8,53,1,53,1,53,3,53,
        657,8,53,1,53,3,53,660,8,53,1,53,1,53,1,53,1,54,1,54,3,54,667,8,
        54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,
        56,1,57,1,57,1,57,1,58,1,58,3,58,687,8,58,1,58,1,58,1,59,1,59,1,
        59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,705,
        8,61,1,61,1,61,3,61,709,8,61,1,61,1,61,1,62,3,62,714,8,62,1,62,1,
        62,3,62,718,8,62,5,62,720,8,62,10,62,12,62,723,9,62,1,63,1,63,3,
        63,727,8,63,1,63,5,63,730,8,63,10,63,12,63,733,9,63,1,63,3,63,736,
        8,63,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,760,8,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,5,65,819,8,65,10,65,12,65,822,9,65,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,3,66,831,8,66,1,66,1,66,1,66,1,66,
        1,66,3,66,838,8,66,3,66,840,8,66,1,67,1,67,1,67,5,67,845,8,67,10,
        67,12,67,848,9,67,1,68,1,68,1,68,5,68,853,8,68,10,68,12,68,856,9,
        68,1,68,3,68,859,8,68,1,69,1,69,1,69,1,69,1,70,1,70,3,70,867,8,70,
        1,70,1,70,3,70,871,8,70,3,70,873,8,70,1,71,1,71,1,71,1,71,1,71,1,
        72,1,72,5,72,882,8,72,10,72,12,72,885,9,72,1,72,1,72,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,3,73,906,8,73,1,74,1,74,3,74,910,8,74,1,75,1,75,1,75,1,75,
        3,75,916,8,75,1,75,1,75,3,75,920,8,75,1,75,1,75,5,75,924,8,75,10,
        75,12,75,927,9,75,1,75,3,75,930,8,75,1,76,1,76,1,76,1,76,3,76,936,
        8,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,3,78,947,8,78,
        1,79,1,79,1,79,5,79,952,8,79,10,79,12,79,955,9,79,1,80,1,80,1,80,
        1,81,1,81,1,81,1,82,1,82,1,82,5,82,966,8,82,10,82,12,82,969,9,82,
        1,83,1,83,1,83,1,83,1,83,1,83,3,83,977,8,83,1,84,1,84,1,84,1,84,
        3,84,983,8,84,1,84,1,84,3,84,987,8,84,1,84,1,84,1,85,1,85,1,85,1,
        86,1,86,1,86,3,86,997,8,86,1,86,1,86,1,86,3,86,1002,8,86,1,86,1,
        86,1,87,1,87,1,87,1,87,1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,90,3,
        90,1018,8,90,1,90,1,90,3,90,1022,8,90,5,90,1024,8,90,10,90,12,90,
        1027,9,90,1,90,1,90,1,90,1,90,1,90,5,90,1034,8,90,10,90,12,90,1037,
        9,90,3,90,1039,8,90,1,90,3,90,1042,8,90,1,91,1,91,3,91,1046,8,91,
        1,92,1,92,3,92,1050,8,92,1,93,1,93,1,93,0,2,64,130,94,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,0,20,1,0,4,10,1,
        0,101,102,1,0,18,20,3,0,117,117,121,121,123,124,1,0,39,41,4,0,117,
        117,122,122,125,125,127,127,1,0,44,47,1,0,48,50,3,0,35,35,59,62,
        103,107,1,0,63,64,1,0,66,67,1,0,68,69,2,0,13,13,72,73,1,0,74,75,
        1,0,6,9,1,0,78,79,2,0,10,10,84,93,3,0,110,111,113,113,129,129,1,
        0,110,111,3,0,14,14,41,41,128,128,1148,0,193,1,0,0,0,2,198,1,0,0,
        0,4,203,1,0,0,0,6,207,1,0,0,0,8,209,1,0,0,0,10,213,1,0,0,0,12,216,
        1,0,0,0,14,220,1,0,0,0,16,259,1,0,0,0,18,261,1,0,0,0,20,264,1,0,
        0,0,22,288,1,0,0,0,24,304,1,0,0,0,26,306,1,0,0,0,28,320,1,0,0,0,
        30,329,1,0,0,0,32,346,1,0,0,0,34,351,1,0,0,0,36,358,1,0,0,0,38,367,
        1,0,0,0,40,382,1,0,0,0,42,393,1,0,0,0,44,397,1,0,0,0,46,407,1,0,
        0,0,48,409,1,0,0,0,50,424,1,0,0,0,52,437,1,0,0,0,54,444,1,0,0,0,
        56,457,1,0,0,0,58,464,1,0,0,0,60,477,1,0,0,0,62,481,1,0,0,0,64,494,
        1,0,0,0,66,507,1,0,0,0,68,515,1,0,0,0,70,522,1,0,0,0,72,536,1,0,
        0,0,74,538,1,0,0,0,76,540,1,0,0,0,78,562,1,0,0,0,80,564,1,0,0,0,
        82,567,1,0,0,0,84,569,1,0,0,0,86,572,1,0,0,0,88,582,1,0,0,0,90,588,
        1,0,0,0,92,590,1,0,0,0,94,594,1,0,0,0,96,596,1,0,0,0,98,619,1,0,
        0,0,100,629,1,0,0,0,102,638,1,0,0,0,104,646,1,0,0,0,106,648,1,0,
        0,0,108,664,1,0,0,0,110,670,1,0,0,0,112,678,1,0,0,0,114,681,1,0,
        0,0,116,684,1,0,0,0,118,690,1,0,0,0,120,693,1,0,0,0,122,704,1,0,
        0,0,124,713,1,0,0,0,126,724,1,0,0,0,128,739,1,0,0,0,130,759,1,0,
        0,0,132,839,1,0,0,0,134,841,1,0,0,0,136,849,1,0,0,0,138,860,1,0,
        0,0,140,872,1,0,0,0,142,874,1,0,0,0,144,879,1,0,0,0,146,905,1,0,
        0,0,148,909,1,0,0,0,150,915,1,0,0,0,152,931,1,0,0,0,154,937,1,0,
        0,0,156,946,1,0,0,0,158,948,1,0,0,0,160,956,1,0,0,0,162,959,1,0,
        0,0,164,962,1,0,0,0,166,976,1,0,0,0,168,978,1,0,0,0,170,990,1,0,
        0,0,172,993,1,0,0,0,174,1005,1,0,0,0,176,1009,1,0,0,0,178,1011,1,
        0,0,0,180,1041,1,0,0,0,182,1045,1,0,0,0,184,1047,1,0,0,0,186,1051,
        1,0,0,0,188,192,3,2,1,0,189,192,3,16,8,0,190,192,3,20,10,0,191,188,
        1,0,0,0,191,189,1,0,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,
        1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,
        5,0,0,1,197,1,1,0,0,0,198,199,5,1,0,0,199,200,3,4,2,0,200,201,3,
        6,3,0,201,202,5,2,0,0,202,3,1,0,0,0,203,204,5,3,0,0,204,5,1,0,0,
        0,205,208,3,8,4,0,206,208,3,130,65,0,207,205,1,0,0,0,207,206,1,0,
        0,0,208,7,1,0,0,0,209,211,3,12,6,0,210,212,3,12,6,0,211,210,1,0,
        0,0,211,212,1,0,0,0,212,9,1,0,0,0,213,214,7,0,0,0,214,11,1,0,0,0,
        215,217,3,10,5,0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,
        218,219,5,108,0,0,219,13,1,0,0,0,220,223,3,186,93,0,221,222,5,11,
        0,0,222,224,3,186,93,0,223,221,1,0,0,0,223,224,1,0,0,0,224,15,1,
        0,0,0,225,226,5,12,0,0,226,229,5,129,0,0,227,228,5,11,0,0,228,230,
        3,186,93,0,229,227,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,260,
        5,2,0,0,232,235,5,12,0,0,233,236,5,13,0,0,234,236,3,186,93,0,235,
        233,1,0,0,0,235,234,1,0,0,0,236,239,1,0,0,0,237,238,5,11,0,0,238,
        240,3,186,93,0,239,237,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,
        242,5,14,0,0,242,243,5,129,0,0,243,260,5,2,0,0,244,245,5,12,0,0,
        245,246,5,15,0,0,246,251,3,14,7,0,247,248,5,16,0,0,248,250,3,14,
        7,0,249,247,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,
        0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,5,17,0,0,255,256,5,14,
        0,0,256,257,5,129,0,0,257,258,5,2,0,0,258,260,1,0,0,0,259,225,1,
        0,0,0,259,232,1,0,0,0,259,244,1,0,0,0,260,17,1,0,0,0,261,262,7,1,
        0,0,262,19,1,0,0,0,263,265,3,18,9,0,264,263,1,0,0,0,264,265,1,0,
        0,0,265,266,1,0,0,0,266,267,7,2,0,0,267,277,3,186,93,0,268,269,5,
        21,0,0,269,274,3,22,11,0,270,271,5,16,0,0,271,273,3,22,11,0,272,
        270,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,
        278,1,0,0,0,276,274,1,0,0,0,277,268,1,0,0,0,277,278,1,0,0,0,278,
        279,1,0,0,0,279,283,5,15,0,0,280,282,3,24,12,0,281,280,1,0,0,0,282,
        285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,
        283,1,0,0,0,286,287,5,17,0,0,287,21,1,0,0,0,288,294,3,66,33,0,289,
        291,5,22,0,0,290,292,3,134,67,0,291,290,1,0,0,0,291,292,1,0,0,0,
        292,293,1,0,0,0,293,295,5,23,0,0,294,289,1,0,0,0,294,295,1,0,0,0,
        295,23,1,0,0,0,296,305,3,26,13,0,297,305,3,28,14,0,298,305,3,30,
        15,0,299,305,3,32,16,0,300,305,3,34,17,0,301,305,3,38,19,0,302,305,
        3,44,22,0,303,305,3,48,24,0,304,296,1,0,0,0,304,297,1,0,0,0,304,
        298,1,0,0,0,304,299,1,0,0,0,304,300,1,0,0,0,304,301,1,0,0,0,304,
        302,1,0,0,0,304,303,1,0,0,0,305,25,1,0,0,0,306,310,3,64,32,0,307,
        309,7,3,0,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,
        311,1,0,0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,316,3,186,93,0,314,
        315,5,10,0,0,315,317,3,130,65,0,316,314,1,0,0,0,316,317,1,0,0,0,
        317,318,1,0,0,0,318,319,5,2,0,0,319,27,1,0,0,0,320,321,5,24,0,0,
        321,322,3,186,93,0,322,325,5,25,0,0,323,326,5,13,0,0,324,326,3,64,
        32,0,325,323,1,0,0,0,325,324,1,0,0,0,326,327,1,0,0,0,327,328,5,2,
        0,0,328,29,1,0,0,0,329,330,5,26,0,0,330,331,3,186,93,0,331,342,5,
        15,0,0,332,333,3,62,31,0,333,339,5,2,0,0,334,335,3,62,31,0,335,336,
        5,2,0,0,336,338,1,0,0,0,337,334,1,0,0,0,338,341,1,0,0,0,339,337,
        1,0,0,0,339,340,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,342,332,
        1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,345,5,17,0,0,345,31,
        1,0,0,0,346,347,5,27,0,0,347,348,3,50,25,0,348,349,3,42,21,0,349,
        350,3,76,38,0,350,33,1,0,0,0,351,352,5,28,0,0,352,354,3,186,93,0,
        353,355,3,50,25,0,354,353,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,
        0,356,357,3,76,38,0,357,35,1,0,0,0,358,364,3,186,93,0,359,361,5,
        22,0,0,360,362,3,134,67,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,
        1,0,0,0,363,365,5,23,0,0,364,359,1,0,0,0,364,365,1,0,0,0,365,37,
        1,0,0,0,366,368,3,18,9,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,
        1,0,0,0,369,371,5,29,0,0,370,372,3,186,93,0,371,370,1,0,0,0,371,
        372,1,0,0,0,372,373,1,0,0,0,373,374,3,50,25,0,374,376,3,42,21,0,
        375,377,3,40,20,0,376,375,1,0,0,0,376,377,1,0,0,0,377,380,1,0,0,
        0,378,381,5,2,0,0,379,381,3,76,38,0,380,378,1,0,0,0,380,379,1,0,
        0,0,381,39,1,0,0,0,382,383,5,30,0,0,383,384,3,50,25,0,384,41,1,0,
        0,0,385,392,3,36,18,0,386,392,3,74,37,0,387,392,5,119,0,0,388,392,
        5,124,0,0,389,392,5,121,0,0,390,392,5,123,0,0,391,385,1,0,0,0,391,
        386,1,0,0,0,391,387,1,0,0,0,391,388,1,0,0,0,391,389,1,0,0,0,391,
        390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,
        43,1,0,0,0,395,393,1,0,0,0,396,398,3,18,9,0,397,396,1,0,0,0,397,
        398,1,0,0,0,398,399,1,0,0,0,399,400,5,31,0,0,400,401,3,186,93,0,
        401,403,3,54,27,0,402,404,5,115,0,0,403,402,1,0,0,0,403,404,1,0,
        0,0,404,405,1,0,0,0,405,406,5,2,0,0,406,45,1,0,0,0,407,408,3,186,
        93,0,408,47,1,0,0,0,409,410,5,32,0,0,410,411,3,186,93,0,411,413,
        5,15,0,0,412,414,3,46,23,0,413,412,1,0,0,0,413,414,1,0,0,0,414,419,
        1,0,0,0,415,416,5,16,0,0,416,418,3,46,23,0,417,415,1,0,0,0,418,421,
        1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,419,
        1,0,0,0,422,423,5,17,0,0,423,49,1,0,0,0,424,433,5,22,0,0,425,430,
        3,52,26,0,426,427,5,16,0,0,427,429,3,52,26,0,428,426,1,0,0,0,429,
        432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,434,1,0,0,0,432,
        430,1,0,0,0,433,425,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,
        436,5,23,0,0,436,51,1,0,0,0,437,439,3,64,32,0,438,440,3,72,36,0,
        439,438,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,443,3,186,93,
        0,442,441,1,0,0,0,442,443,1,0,0,0,443,53,1,0,0,0,444,453,5,22,0,
        0,445,450,3,56,28,0,446,447,5,16,0,0,447,449,3,56,28,0,448,446,1,
        0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,454,1,
        0,0,0,452,450,1,0,0,0,453,445,1,0,0,0,453,454,1,0,0,0,454,455,1,
        0,0,0,455,456,5,23,0,0,456,55,1,0,0,0,457,459,3,64,32,0,458,460,
        5,120,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,463,
        3,186,93,0,462,461,1,0,0,0,462,463,1,0,0,0,463,57,1,0,0,0,464,473,
        5,22,0,0,465,470,3,60,30,0,466,467,5,16,0,0,467,469,3,60,30,0,468,
        466,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,
        474,1,0,0,0,472,470,1,0,0,0,473,465,1,0,0,0,473,474,1,0,0,0,474,
        475,1,0,0,0,475,476,5,23,0,0,476,59,1,0,0,0,477,479,3,64,32,0,478,
        480,3,72,36,0,479,478,1,0,0,0,479,480,1,0,0,0,480,61,1,0,0,0,481,
        483,3,64,32,0,482,484,3,72,36,0,483,482,1,0,0,0,483,484,1,0,0,0,
        484,485,1,0,0,0,485,486,3,186,93,0,486,63,1,0,0,0,487,488,6,32,-1,
        0,488,495,3,128,64,0,489,495,3,66,33,0,490,495,3,68,34,0,491,495,
        3,70,35,0,492,493,5,35,0,0,493,495,5,122,0,0,494,487,1,0,0,0,494,
        489,1,0,0,0,494,490,1,0,0,0,494,491,1,0,0,0,494,492,1,0,0,0,495,
        504,1,0,0,0,496,497,10,3,0,0,497,499,5,33,0,0,498,500,3,130,65,0,
        499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,503,5,34,0,0,
        502,496,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,
        505,65,1,0,0,0,506,504,1,0,0,0,507,512,3,186,93,0,508,509,5,36,0,
        0,509,511,3,186,93,0,510,508,1,0,0,0,511,514,1,0,0,0,512,510,1,0,
        0,0,512,513,1,0,0,0,513,67,1,0,0,0,514,512,1,0,0,0,515,516,5,37,
        0,0,516,517,5,22,0,0,517,518,3,128,64,0,518,519,5,38,0,0,519,520,
        3,64,32,0,520,521,5,23,0,0,521,69,1,0,0,0,522,523,5,29,0,0,523,529,
        3,58,29,0,524,528,5,121,0,0,525,528,5,119,0,0,526,528,3,74,37,0,
        527,524,1,0,0,0,527,525,1,0,0,0,527,526,1,0,0,0,528,531,1,0,0,0,
        529,527,1,0,0,0,529,530,1,0,0,0,530,534,1,0,0,0,531,529,1,0,0,0,
        532,533,5,30,0,0,533,535,3,58,29,0,534,532,1,0,0,0,534,535,1,0,0,
        0,535,71,1,0,0,0,536,537,7,4,0,0,537,73,1,0,0,0,538,539,7,5,0,0,
        539,75,1,0,0,0,540,544,5,15,0,0,541,543,3,78,39,0,542,541,1,0,0,
        0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,
        0,546,544,1,0,0,0,547,548,5,17,0,0,548,77,1,0,0,0,549,563,3,100,
        50,0,550,563,3,102,51,0,551,563,3,106,53,0,552,563,3,76,38,0,553,
        563,3,108,54,0,554,563,3,110,55,0,555,563,3,112,56,0,556,563,3,114,
        57,0,557,563,3,116,58,0,558,563,3,118,59,0,559,563,3,120,60,0,560,
        563,3,104,52,0,561,563,3,94,47,0,562,549,1,0,0,0,562,550,1,0,0,0,
        562,551,1,0,0,0,562,552,1,0,0,0,562,553,1,0,0,0,562,554,1,0,0,0,
        562,555,1,0,0,0,562,556,1,0,0,0,562,557,1,0,0,0,562,558,1,0,0,0,
        562,559,1,0,0,0,562,560,1,0,0,0,562,561,1,0,0,0,563,79,1,0,0,0,564,
        565,3,130,65,0,565,566,5,2,0,0,566,81,1,0,0,0,567,568,5,42,0,0,568,
        83,1,0,0,0,569,570,5,43,0,0,570,85,1,0,0,0,571,573,3,84,42,0,572,
        571,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,575,3,186,93,0,575,
        87,1,0,0,0,576,578,3,86,43,0,577,576,1,0,0,0,577,578,1,0,0,0,578,
        579,1,0,0,0,579,581,5,16,0,0,580,577,1,0,0,0,581,584,1,0,0,0,582,
        580,1,0,0,0,582,583,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,585,
        587,3,86,43,0,586,585,1,0,0,0,586,587,1,0,0,0,587,89,1,0,0,0,588,
        589,7,6,0,0,589,91,1,0,0,0,590,591,7,7,0,0,591,93,1,0,0,0,592,595,
        3,96,48,0,593,595,3,98,49,0,594,592,1,0,0,0,594,593,1,0,0,0,595,
        95,1,0,0,0,596,597,3,82,41,0,597,598,5,22,0,0,598,599,3,90,45,0,
        599,606,5,16,0,0,600,602,3,186,93,0,601,600,1,0,0,0,601,602,1,0,
        0,0,602,603,1,0,0,0,603,605,5,16,0,0,604,601,1,0,0,0,605,608,1,0,
        0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,610,1,0,0,0,608,606,1,0,
        0,0,609,611,3,186,93,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,
        0,0,0,612,614,5,16,0,0,613,615,3,132,66,0,614,613,1,0,0,0,614,615,
        1,0,0,0,615,616,1,0,0,0,616,617,5,23,0,0,617,618,5,2,0,0,618,97,
        1,0,0,0,619,620,3,82,41,0,620,621,5,22,0,0,621,622,3,92,46,0,622,
        623,5,16,0,0,623,624,3,88,44,0,624,625,5,16,0,0,625,626,3,132,66,
        0,626,627,5,23,0,0,627,628,5,2,0,0,628,99,1,0,0,0,629,630,5,51,0,
        0,630,631,5,22,0,0,631,632,3,130,65,0,632,633,5,23,0,0,633,636,3,
        78,39,0,634,635,5,52,0,0,635,637,3,78,39,0,636,634,1,0,0,0,636,637,
        1,0,0,0,637,101,1,0,0,0,638,639,5,53,0,0,639,640,5,22,0,0,640,641,
        3,130,65,0,641,642,5,23,0,0,642,643,3,78,39,0,643,103,1,0,0,0,644,
        647,3,122,61,0,645,647,3,80,40,0,646,644,1,0,0,0,646,645,1,0,0,0,
        647,105,1,0,0,0,648,649,5,25,0,0,649,652,5,22,0,0,650,653,3,104,
        52,0,651,653,5,2,0,0,652,650,1,0,0,0,652,651,1,0,0,0,653,656,1,0,
        0,0,654,657,3,80,40,0,655,657,5,2,0,0,656,654,1,0,0,0,656,655,1,
        0,0,0,657,659,1,0,0,0,658,660,3,130,65,0,659,658,1,0,0,0,659,660,
        1,0,0,0,660,661,1,0,0,0,661,662,5,23,0,0,662,663,3,78,39,0,663,107,
        1,0,0,0,664,666,5,54,0,0,665,667,5,129,0,0,666,665,1,0,0,0,666,667,
        1,0,0,0,667,668,1,0,0,0,668,669,3,144,72,0,669,109,1,0,0,0,670,671,
        5,55,0,0,671,672,3,78,39,0,672,673,5,53,0,0,673,674,5,22,0,0,674,
        675,3,130,65,0,675,676,5,23,0,0,676,677,5,2,0,0,677,111,1,0,0,0,
        678,679,5,118,0,0,679,680,5,2,0,0,680,113,1,0,0,0,681,682,5,116,
        0,0,682,683,5,2,0,0,683,115,1,0,0,0,684,686,5,56,0,0,685,687,3,130,
        65,0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,689,5,2,
        0,0,689,117,1,0,0,0,690,691,5,57,0,0,691,692,5,2,0,0,692,119,1,0,
        0,0,693,694,5,58,0,0,694,695,3,142,71,0,695,696,5,2,0,0,696,121,
        1,0,0,0,697,698,5,59,0,0,698,705,3,126,63,0,699,705,3,62,31,0,700,
        701,5,22,0,0,701,702,3,124,62,0,702,703,5,23,0,0,703,705,1,0,0,0,
        704,697,1,0,0,0,704,699,1,0,0,0,704,700,1,0,0,0,705,708,1,0,0,0,
        706,707,5,10,0,0,707,709,3,130,65,0,708,706,1,0,0,0,708,709,1,0,
        0,0,709,710,1,0,0,0,710,711,5,2,0,0,711,123,1,0,0,0,712,714,3,62,
        31,0,713,712,1,0,0,0,713,714,1,0,0,0,714,721,1,0,0,0,715,717,5,16,
        0,0,716,718,3,62,31,0,717,716,1,0,0,0,717,718,1,0,0,0,718,720,1,
        0,0,0,719,715,1,0,0,0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,1,
        0,0,0,722,125,1,0,0,0,723,721,1,0,0,0,724,731,5,22,0,0,725,727,3,
        186,93,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,730,
        5,16,0,0,729,726,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,
        1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,734,736,3,186,93,0,735,734,
        1,0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,737,738,5,23,0,0,738,127,
        1,0,0,0,739,740,7,8,0,0,740,129,1,0,0,0,741,742,6,65,-1,0,742,743,
        5,65,0,0,743,760,3,64,32,0,744,745,5,22,0,0,745,746,3,130,65,0,746,
        747,5,23,0,0,747,760,1,0,0,0,748,749,7,9,0,0,749,760,3,130,65,19,
        750,751,7,10,0,0,751,760,3,130,65,18,752,753,7,11,0,0,753,760,3,
        130,65,17,754,755,5,70,0,0,755,760,3,130,65,16,756,757,5,5,0,0,757,
        760,3,130,65,15,758,760,3,132,66,0,759,741,1,0,0,0,759,744,1,0,0,
        0,759,748,1,0,0,0,759,750,1,0,0,0,759,752,1,0,0,0,759,754,1,0,0,
        0,759,756,1,0,0,0,759,758,1,0,0,0,760,820,1,0,0,0,761,762,10,14,
        0,0,762,763,5,71,0,0,763,819,3,130,65,15,764,765,10,13,0,0,765,766,
        7,12,0,0,766,819,3,130,65,14,767,768,10,12,0,0,768,769,7,10,0,0,
        769,819,3,130,65,13,770,771,10,11,0,0,771,772,7,13,0,0,772,819,3,
        130,65,12,773,774,10,10,0,0,774,775,5,76,0,0,775,819,3,130,65,11,
        776,777,10,9,0,0,777,778,5,4,0,0,778,819,3,130,65,10,779,780,10,
        8,0,0,780,781,5,77,0,0,781,819,3,130,65,9,782,783,10,7,0,0,783,784,
        7,14,0,0,784,819,3,130,65,8,785,786,10,6,0,0,786,787,7,15,0,0,787,
        819,3,130,65,7,788,789,10,5,0,0,789,790,5,80,0,0,790,819,3,130,65,
        6,791,792,10,4,0,0,792,793,5,81,0,0,793,819,3,130,65,5,794,795,10,
        3,0,0,795,796,5,82,0,0,796,797,3,130,65,0,797,798,5,83,0,0,798,799,
        3,130,65,4,799,819,1,0,0,0,800,801,10,2,0,0,801,802,7,16,0,0,802,
        819,3,130,65,3,803,804,10,25,0,0,804,819,7,9,0,0,805,806,10,23,0,
        0,806,807,5,33,0,0,807,808,3,130,65,0,808,809,5,34,0,0,809,819,1,
        0,0,0,810,811,10,22,0,0,811,812,5,22,0,0,812,813,3,140,70,0,813,
        814,5,23,0,0,814,819,1,0,0,0,815,816,10,21,0,0,816,817,5,36,0,0,
        817,819,3,186,93,0,818,761,1,0,0,0,818,764,1,0,0,0,818,767,1,0,0,
        0,818,770,1,0,0,0,818,773,1,0,0,0,818,776,1,0,0,0,818,779,1,0,0,
        0,818,782,1,0,0,0,818,785,1,0,0,0,818,788,1,0,0,0,818,791,1,0,0,
        0,818,794,1,0,0,0,818,800,1,0,0,0,818,803,1,0,0,0,818,805,1,0,0,
        0,818,810,1,0,0,0,818,815,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,
        0,820,821,1,0,0,0,821,131,1,0,0,0,822,820,1,0,0,0,823,840,5,109,
        0,0,824,840,3,184,92,0,825,840,5,113,0,0,826,840,5,129,0,0,827,830,
        3,186,93,0,828,829,5,33,0,0,829,831,5,34,0,0,830,828,1,0,0,0,830,
        831,1,0,0,0,831,840,1,0,0,0,832,840,5,126,0,0,833,840,3,180,90,0,
        834,837,3,182,91,0,835,836,5,33,0,0,836,838,5,34,0,0,837,835,1,0,
        0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,823,1,0,0,0,839,824,1,0,
        0,0,839,825,1,0,0,0,839,826,1,0,0,0,839,827,1,0,0,0,839,832,1,0,
        0,0,839,833,1,0,0,0,839,834,1,0,0,0,840,133,1,0,0,0,841,846,3,130,
        65,0,842,843,5,16,0,0,843,845,3,130,65,0,844,842,1,0,0,0,845,848,
        1,0,0,0,846,844,1,0,0,0,846,847,1,0,0,0,847,135,1,0,0,0,848,846,
        1,0,0,0,849,854,3,138,69,0,850,851,5,16,0,0,851,853,3,138,69,0,852,
        850,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,
        858,1,0,0,0,856,854,1,0,0,0,857,859,5,16,0,0,858,857,1,0,0,0,858,
        859,1,0,0,0,859,137,1,0,0,0,860,861,3,186,93,0,861,862,5,83,0,0,
        862,863,3,130,65,0,863,139,1,0,0,0,864,866,5,15,0,0,865,867,3,136,
        68,0,866,865,1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,873,5,17,
        0,0,869,871,3,134,67,0,870,869,1,0,0,0,870,871,1,0,0,0,871,873,1,
        0,0,0,872,864,1,0,0,0,872,870,1,0,0,0,873,141,1,0,0,0,874,875,3,
        130,65,0,875,876,5,22,0,0,876,877,3,140,70,0,877,878,5,23,0,0,878,
        143,1,0,0,0,879,883,5,15,0,0,880,882,3,146,73,0,881,880,1,0,0,0,
        882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,
        885,883,1,0,0,0,886,887,5,17,0,0,887,145,1,0,0,0,888,906,3,186,93,
        0,889,906,3,144,72,0,890,906,3,148,74,0,891,906,3,152,76,0,892,906,
        3,154,77,0,893,906,3,160,80,0,894,906,3,162,81,0,895,906,3,164,82,
        0,896,906,3,168,84,0,897,906,3,172,86,0,898,906,3,174,87,0,899,906,
        5,116,0,0,900,906,5,118,0,0,901,906,3,178,89,0,902,906,3,184,92,
        0,903,906,5,129,0,0,904,906,5,113,0,0,905,888,1,0,0,0,905,889,1,
        0,0,0,905,890,1,0,0,0,905,891,1,0,0,0,905,892,1,0,0,0,905,893,1,
        0,0,0,905,894,1,0,0,0,905,895,1,0,0,0,905,896,1,0,0,0,905,897,1,
        0,0,0,905,898,1,0,0,0,905,899,1,0,0,0,905,900,1,0,0,0,905,901,1,
        0,0,0,905,902,1,0,0,0,905,903,1,0,0,0,905,904,1,0,0,0,906,147,1,
        0,0,0,907,910,3,150,75,0,908,910,3,176,88,0,909,907,1,0,0,0,909,
        908,1,0,0,0,910,149,1,0,0,0,911,916,5,56,0,0,912,916,5,35,0,0,913,
        916,5,62,0,0,914,916,3,186,93,0,915,911,1,0,0,0,915,912,1,0,0,0,
        915,913,1,0,0,0,915,914,1,0,0,0,916,929,1,0,0,0,917,919,5,22,0,0,
        918,920,3,148,74,0,919,918,1,0,0,0,919,920,1,0,0,0,920,925,1,0,0,
        0,921,922,5,16,0,0,922,924,3,148,74,0,923,921,1,0,0,0,924,927,1,
        0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,925,1,
        0,0,0,928,930,5,23,0,0,929,917,1,0,0,0,929,930,1,0,0,0,930,151,1,
        0,0,0,931,932,5,94,0,0,932,935,3,156,78,0,933,934,5,95,0,0,934,936,
        3,148,74,0,935,933,1,0,0,0,935,936,1,0,0,0,936,153,1,0,0,0,937,938,
        3,156,78,0,938,939,5,95,0,0,939,940,3,148,74,0,940,155,1,0,0,0,941,
        947,3,186,93,0,942,943,5,22,0,0,943,944,3,158,79,0,944,945,5,23,
        0,0,945,947,1,0,0,0,946,941,1,0,0,0,946,942,1,0,0,0,947,157,1,0,
        0,0,948,953,3,186,93,0,949,950,5,16,0,0,950,952,3,186,93,0,951,949,
        1,0,0,0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,159,
        1,0,0,0,955,953,1,0,0,0,956,957,5,96,0,0,957,958,3,186,93,0,958,
        161,1,0,0,0,959,960,3,186,93,0,960,961,5,83,0,0,961,163,1,0,0,0,
        962,963,5,97,0,0,963,967,3,148,74,0,964,966,3,166,83,0,965,964,1,
        0,0,0,966,969,1,0,0,0,967,965,1,0,0,0,967,968,1,0,0,0,968,165,1,
        0,0,0,969,967,1,0,0,0,970,971,5,98,0,0,971,972,3,176,88,0,972,973,
        3,144,72,0,973,977,1,0,0,0,974,975,5,99,0,0,975,977,3,144,72,0,976,
        970,1,0,0,0,976,974,1,0,0,0,977,167,1,0,0,0,978,979,5,29,0,0,979,
        980,3,186,93,0,980,982,5,22,0,0,981,983,3,158,79,0,982,981,1,0,0,
        0,982,983,1,0,0,0,983,984,1,0,0,0,984,986,5,23,0,0,985,987,3,170,
        85,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,3,144,
        72,0,989,169,1,0,0,0,990,991,5,100,0,0,991,992,3,158,79,0,992,171,
        1,0,0,0,993,996,5,25,0,0,994,997,3,144,72,0,995,997,3,148,74,0,996,
        994,1,0,0,0,996,995,1,0,0,0,997,998,1,0,0,0,998,1001,3,148,74,0,
        999,1002,3,144,72,0,1000,1002,3,148,74,0,1001,999,1,0,0,0,1001,1000,
        1,0,0,0,1002,1003,1,0,0,0,1003,1004,3,144,72,0,1004,173,1,0,0,0,
        1005,1006,5,51,0,0,1006,1007,3,148,74,0,1007,1008,3,144,72,0,1008,
        175,1,0,0,0,1009,1010,7,17,0,0,1010,177,1,0,0,0,1011,1012,5,54,0,
        0,1012,1013,3,186,93,0,1013,1014,3,144,72,0,1014,179,1,0,0,0,1015,
        1017,5,22,0,0,1016,1018,3,130,65,0,1017,1016,1,0,0,0,1017,1018,1,
        0,0,0,1018,1025,1,0,0,0,1019,1021,5,16,0,0,1020,1022,3,130,65,0,
        1021,1020,1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,1023,1019,
        1,0,0,0,1024,1027,1,0,0,0,1025,1023,1,0,0,0,1025,1026,1,0,0,0,1026,
        1028,1,0,0,0,1027,1025,1,0,0,0,1028,1042,5,23,0,0,1029,1038,5,33,
        0,0,1030,1035,3,130,65,0,1031,1032,5,16,0,0,1032,1034,3,130,65,0,
        1033,1031,1,0,0,0,1034,1037,1,0,0,0,1035,1033,1,0,0,0,1035,1036,
        1,0,0,0,1036,1039,1,0,0,0,1037,1035,1,0,0,0,1038,1030,1,0,0,0,1038,
        1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,5,34,0,0,1041,1015,1,0,
        0,0,1041,1029,1,0,0,0,1042,181,1,0,0,0,1043,1046,3,128,64,0,1044,
        1046,3,66,33,0,1045,1043,1,0,0,0,1045,1044,1,0,0,0,1046,183,1,0,
        0,0,1047,1049,7,18,0,0,1048,1050,5,112,0,0,1049,1048,1,0,0,0,1049,
        1050,1,0,0,0,1050,185,1,0,0,0,1051,1052,7,19,0,0,1052,187,1,0,0,
        0,117,191,193,207,211,216,223,229,235,239,251,259,264,274,277,283,
        291,294,304,310,316,325,339,342,354,361,364,367,371,376,380,391,
        393,397,403,413,419,430,433,439,442,450,453,459,462,470,473,479,
        483,494,499,504,512,527,529,534,544,562,572,577,582,586,594,601,
        606,610,614,636,646,652,656,659,666,686,704,708,713,717,721,726,
        731,735,759,818,820,830,837,839,846,854,858,866,870,872,883,905,
        909,915,919,925,929,935,946,953,967,976,982,986,996,1001,1017,1021,
        1025,1035,1038,1041,1045,1049
    ]

class CryplangParser ( Parser ):

    grammarFileName = "Cryplang.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'Cryplang'", "'^'", 
                     "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                     "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'using'", 
                     "'for'", "'struct'", "'constructor'", "'modifier'", 
                     "'function'", "'returns'", "'event'", "'enum'", "'['", 
                     "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", 
                     "'storage'", "'calldata'", "'@require'", "'#'", "'ECDSA'", 
                     "'RSA'", "'BLS'", "'Schorr'", "'Groth16'", "'PLONK'", 
                     "'GM17'", "'if'", "'else'", "'while'", "'assembly'", 
                     "'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", 
                     "'string'", "'byte'", "'++'", "'--'", "'new'", "'+'", 
                     "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", 
                     "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", 
                     "'&&'", "'||'", "'?'", "':'", "'|='", "'^='", "'&='", 
                     "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", 
                     "'->'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'anonymous'", "'break'", 
                     "'constant'", "'continue'", "'external'", "'indexed'", 
                     "'internal'", "'payable'", "'private'", "'public'", 
                     "'pure'", "'type'", "'view'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "NatSpecSingleLine", "NatSpecMultiLine", 
                      "Int", "Uint", "Byte", "Fixed", "Ufixed", "VersionLiteral", 
                      "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
                      "HexLiteral", "ReservedKeyword", "AnonymousKeyword", 
                      "BreakKeyword", "ConstantKeyword", "ContinueKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "PureKeyword", "TypeKeyword", "ViewKeyword", "Identifier", 
                      "StringLiteral", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_natSpec = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_usingForDeclaration = 14
    RULE_structDefinition = 15
    RULE_constructorDefinition = 16
    RULE_modifierDefinition = 17
    RULE_modifierInvocation = 18
    RULE_functionDefinition = 19
    RULE_returnParameters = 20
    RULE_modifierList = 21
    RULE_eventDefinition = 22
    RULE_enumValue = 23
    RULE_enumDefinition = 24
    RULE_parameterList = 25
    RULE_parameter = 26
    RULE_eventParameterList = 27
    RULE_eventParameter = 28
    RULE_functionTypeParameterList = 29
    RULE_functionTypeParameter = 30
    RULE_variableDeclaration = 31
    RULE_typeName = 32
    RULE_userDefinedTypeName = 33
    RULE_mapping = 34
    RULE_functionTypeName = 35
    RULE_storageLocation = 36
    RULE_stateMutability = 37
    RULE_block = 38
    RULE_statement = 39
    RULE_expressionStatement = 40
    RULE_statementSymbol = 41
    RULE_privateSymbol = 42
    RULE_privateIdentifier = 43
    RULE_privateIdentifierList = 44
    RULE_signatureMethod = 45
    RULE_proofMethod = 46
    RULE_cryptoStatement = 47
    RULE_signatureStatement = 48
    RULE_proofStatement = 49
    RULE_ifStatement = 50
    RULE_whileStatement = 51
    RULE_simpleStatement = 52
    RULE_forStatement = 53
    RULE_inlineAssemblyStatement = 54
    RULE_doWhileStatement = 55
    RULE_continueStatement = 56
    RULE_breakStatement = 57
    RULE_returnStatement = 58
    RULE_throwStatement = 59
    RULE_emitStatement = 60
    RULE_variableDeclarationStatement = 61
    RULE_variableDeclarationList = 62
    RULE_identifierList = 63
    RULE_elementaryTypeName = 64
    RULE_expression = 65
    RULE_primaryExpression = 66
    RULE_expressionList = 67
    RULE_nameValueList = 68
    RULE_nameValue = 69
    RULE_functionCallArguments = 70
    RULE_functionCall = 71
    RULE_assemblyBlock = 72
    RULE_assemblyItem = 73
    RULE_assemblyExpression = 74
    RULE_assemblyCall = 75
    RULE_assemblyLocalDefinition = 76
    RULE_assemblyAssignment = 77
    RULE_assemblyIdentifierOrList = 78
    RULE_assemblyIdentifierList = 79
    RULE_assemblyStackAssignment = 80
    RULE_labelDefinition = 81
    RULE_assemblySwitch = 82
    RULE_assemblyCase = 83
    RULE_assemblyFunctionDefinition = 84
    RULE_assemblyFunctionReturns = 85
    RULE_assemblyFor = 86
    RULE_assemblyIf = 87
    RULE_assemblyLiteral = 88
    RULE_subAssembly = 89
    RULE_tupleExpression = 90
    RULE_typeNameExpression = 91
    RULE_numberLiteral = 92
    RULE_identifier = 93

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "natSpec", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "constructorDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mapping", "functionTypeName", "storageLocation", "stateMutability", 
                   "block", "statement", "expressionStatement", "statementSymbol", 
                   "privateSymbol", "privateIdentifier", "privateIdentifierList", 
                   "signatureMethod", "proofMethod", "cryptoStatement", 
                   "signatureStatement", "proofStatement", "ifStatement", 
                   "whileStatement", "simpleStatement", "forStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    NatSpecSingleLine=101
    NatSpecMultiLine=102
    Int=103
    Uint=104
    Byte=105
    Fixed=106
    Ufixed=107
    VersionLiteral=108
    BooleanLiteral=109
    DecimalNumber=110
    HexNumber=111
    NumberUnit=112
    HexLiteral=113
    ReservedKeyword=114
    AnonymousKeyword=115
    BreakKeyword=116
    ConstantKeyword=117
    ContinueKeyword=118
    ExternalKeyword=119
    IndexedKeyword=120
    InternalKeyword=121
    PayableKeyword=122
    PrivateKeyword=123
    PublicKeyword=124
    PureKeyword=125
    TypeKeyword=126
    ViewKeyword=127
    Identifier=128
    StringLiteral=129
    WS=130
    COMMENT=131
    LINE_COMMENT=132

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CryplangParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(CryplangParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = CryplangParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1839106) != 0) or _la==101 or _la==102:
                self.state = 191
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 188
                    self.pragmaDirective()
                    pass
                elif token in [12]:
                    self.state = 189
                    self.importDirective()
                    pass
                elif token in [18, 19, 20, 101, 102]:
                    self.state = 190
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 196
            self.match(CryplangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(CryplangParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(CryplangParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = CryplangParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(CryplangParser.T__0)
            self.state = 199
            self.pragmaName()
            self.state = 200
            self.pragmaValue()
            self.state = 201
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryplangParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = CryplangParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.match(CryplangParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(CryplangParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = CryplangParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 205
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(CryplangParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = CryplangParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.versionConstraint()
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0) or _la==108:
                self.state = 210
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryplangParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = CryplangParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(CryplangParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(CryplangParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = CryplangParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0):
                self.state = 215
                self.versionOperator()


            self.state = 218
            self.match(CryplangParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryplangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = CryplangParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.identifier()
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 221
                self.match(CryplangParser.T__10)
                self.state = 222
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CryplangParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryplangParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = CryplangParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 225
                self.match(CryplangParser.T__11)
                self.state = 226
                self.match(CryplangParser.StringLiteral)
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 227
                    self.match(CryplangParser.T__10)
                    self.state = 228
                    self.identifier()


                self.state = 231
                self.match(CryplangParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 232
                self.match(CryplangParser.T__11)
                self.state = 235
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 233
                    self.match(CryplangParser.T__12)
                    pass
                elif token in [14, 41, 128]:
                    self.state = 234
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 237
                    self.match(CryplangParser.T__10)
                    self.state = 238
                    self.identifier()


                self.state = 241
                self.match(CryplangParser.T__13)
                self.state = 242
                self.match(CryplangParser.StringLiteral)
                self.state = 243
                self.match(CryplangParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 244
                self.match(CryplangParser.T__11)
                self.state = 245
                self.match(CryplangParser.T__14)
                self.state = 246
                self.importDeclaration()
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 247
                    self.match(CryplangParser.T__15)
                    self.state = 248
                    self.importDeclaration()
                    self.state = 253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 254
                self.match(CryplangParser.T__16)
                self.state = 255
                self.match(CryplangParser.T__13)
                self.state = 256
                self.match(CryplangParser.StringLiteral)
                self.state = 257
                self.match(CryplangParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NatSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NatSpecSingleLine(self):
            return self.getToken(CryplangParser.NatSpecSingleLine, 0)

        def NatSpecMultiLine(self):
            return self.getToken(CryplangParser.NatSpecMultiLine, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_natSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatSpec" ):
                listener.enterNatSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatSpec" ):
                listener.exitNatSpec(self)




    def natSpec(self):

        localctx = CryplangParser.NatSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_natSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            _la = self._input.LA(1)
            if not(_la==101 or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryplangParser.NatSpecContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(CryplangParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ContractPartContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = CryplangParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101 or _la==102:
                self.state = 263
                self.natSpec()


            self.state = 266
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 267
            self.identifier()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 268
                self.match(CryplangParser.T__20)
                self.state = 269
                self.inheritanceSpecifier()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 270
                    self.match(CryplangParser.T__15)
                    self.state = 271
                    self.inheritanceSpecifier()
                    self.state = 276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 279
            self.match(CryplangParser.T__14)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913662839177216) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 134217855) != 0):
                self.state = 280
                self.contractPart()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.match(CryplangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryplangParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = CryplangParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.userDefinedTypeName()
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 289
                self.match(CryplangParser.T__21)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                    self.state = 290
                    self.expressionList()


                self.state = 293
                self.match(CryplangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(CryplangParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(CryplangParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(CryplangParser.StructDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(CryplangParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(CryplangParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CryplangParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(CryplangParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(CryplangParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = CryplangParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 298
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 299
                self.constructorDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 300
                self.modifierDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 301
                self.functionDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 302
                self.eventDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 303
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.PublicKeyword)
            else:
                return self.getToken(CryplangParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.InternalKeyword)
            else:
                return self.getToken(CryplangParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.PrivateKeyword)
            else:
                return self.getToken(CryplangParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.ConstantKeyword)
            else:
                return self.getToken(CryplangParser.ConstantKeyword, i)

        def getRuleIndex(self):
            return CryplangParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = CryplangParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.typeName(0)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 209) != 0):
                self.state = 307
                _la = self._input.LA(1)
                if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 209) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 313
            self.identifier()
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 314
                self.match(CryplangParser.T__9)
                self.state = 315
                self.expression(0)


            self.state = 318
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = CryplangParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(CryplangParser.T__23)
            self.state = 321
            self.identifier()
            self.state = 322
            self.match(CryplangParser.T__24)
            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 323
                self.match(CryplangParser.T__12)
                pass
            elif token in [14, 29, 35, 37, 41, 59, 60, 61, 62, 103, 104, 105, 106, 107, 128]:
                self.state = 324
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 327
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(CryplangParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = CryplangParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(CryplangParser.T__25)
            self.state = 330
            self.identifier()
            self.state = 331
            self.match(CryplangParser.T__14)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913655910187008) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 33554463) != 0):
                self.state = 332
                self.variableDeclaration()
                self.state = 333
                self.match(CryplangParser.T__1)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913655910187008) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 33554463) != 0):
                    self.state = 334
                    self.variableDeclaration()
                    self.state = 335
                    self.match(CryplangParser.T__1)
                    self.state = 341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 344
            self.match(CryplangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryplangParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(CryplangParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(CryplangParser.BlockContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)




    def constructorDefinition(self):

        localctx = CryplangParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(CryplangParser.T__26)
            self.state = 347
            self.parameterList()
            self.state = 348
            self.modifierList()
            self.state = 349
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(CryplangParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(CryplangParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = CryplangParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(CryplangParser.T__27)
            self.state = 352
            self.identifier()
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 353
                self.parameterList()


            self.state = 356
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = CryplangParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.identifier()
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 359
                self.match(CryplangParser.T__21)
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                    self.state = 360
                    self.expressionList()


                self.state = 363
                self.match(CryplangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryplangParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(CryplangParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(CryplangParser.BlockContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryplangParser.NatSpecContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(CryplangParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = CryplangParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101 or _la==102:
                self.state = 366
                self.natSpec()


            self.state = 369
            self.match(CryplangParser.T__28)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==128:
                self.state = 370
                self.identifier()


            self.state = 373
            self.parameterList()
            self.state = 374
            self.modifierList()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 375
                self.returnParameters()


            self.state = 380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 378
                self.match(CryplangParser.T__1)
                pass
            elif token in [15]:
                self.state = 379
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CryplangParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = CryplangParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(CryplangParser.T__29)
            self.state = 383
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(CryplangParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.ExternalKeyword)
            else:
                return self.getToken(CryplangParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.PublicKeyword)
            else:
                return self.getToken(CryplangParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.InternalKeyword)
            else:
                return self.getToken(CryplangParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.PrivateKeyword)
            else:
                return self.getToken(CryplangParser.PrivateKeyword, i)

        def getRuleIndex(self):
            return CryplangParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = CryplangParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14 or _la==41 or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 3573) != 0):
                self.state = 391
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 41, 128]:
                    self.state = 385
                    self.modifierInvocation()
                    pass
                elif token in [117, 122, 125, 127]:
                    self.state = 386
                    self.stateMutability()
                    pass
                elif token in [119]:
                    self.state = 387
                    self.match(CryplangParser.ExternalKeyword)
                    pass
                elif token in [124]:
                    self.state = 388
                    self.match(CryplangParser.PublicKeyword)
                    pass
                elif token in [121]:
                    self.state = 389
                    self.match(CryplangParser.InternalKeyword)
                    pass
                elif token in [123]:
                    self.state = 390
                    self.match(CryplangParser.PrivateKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(CryplangParser.EventParameterListContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(CryplangParser.NatSpecContext,0)


        def AnonymousKeyword(self):
            return self.getToken(CryplangParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = CryplangParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101 or _la==102:
                self.state = 396
                self.natSpec()


            self.state = 399
            self.match(CryplangParser.T__30)
            self.state = 400
            self.identifier()
            self.state = 401
            self.eventParameterList()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 402
                self.match(CryplangParser.AnonymousKeyword)


            self.state = 405
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = CryplangParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(CryplangParser.EnumValueContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = CryplangParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(CryplangParser.T__31)
            self.state = 410
            self.identifier()
            self.state = 411
            self.match(CryplangParser.T__14)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==128:
                self.state = 412
                self.enumValue()


            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 415
                self.match(CryplangParser.T__15)
                self.state = 416
                self.enumValue()
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 422
            self.match(CryplangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ParameterContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ParameterContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = CryplangParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(CryplangParser.T__21)
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913655910187008) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 33554463) != 0):
                self.state = 425
                self.parameter()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 426
                    self.match(CryplangParser.T__15)
                    self.state = 427
                    self.parameter()
                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 435
            self.match(CryplangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryplangParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = CryplangParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.typeName(0)
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 438
                self.storageLocation()


            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==128:
                self.state = 441
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(CryplangParser.EventParameterContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = CryplangParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(CryplangParser.T__21)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913655910187008) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 33554463) != 0):
                self.state = 445
                self.eventParameter()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 446
                    self.match(CryplangParser.T__15)
                    self.state = 447
                    self.eventParameter()
                    self.state = 452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 455
            self.match(CryplangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(CryplangParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = CryplangParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.typeName(0)
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 458
                self.match(CryplangParser.IndexedKeyword)


            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==128:
                self.state = 461
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(CryplangParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = CryplangParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(CryplangParser.T__21)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913655910187008) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 33554463) != 0):
                self.state = 465
                self.functionTypeParameter()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 466
                    self.match(CryplangParser.T__15)
                    self.state = 467
                    self.functionTypeParameter()
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 475
            self.match(CryplangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryplangParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = CryplangParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.typeName(0)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0):
                self.state = 478
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(CryplangParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = CryplangParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.typeName(0)
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 482
                self.storageLocation()


            self.state = 485
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryplangParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryplangParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(CryplangParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(CryplangParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(CryplangParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CryplangParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 488
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 489
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 490
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 491
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 492
                self.match(CryplangParser.T__34)
                self.state = 493
                self.match(CryplangParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 504
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CryplangParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 496
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 497
                    self.match(CryplangParser.T__32)
                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                        self.state = 498
                        self.expression(0)


                    self.state = 501
                    self.match(CryplangParser.T__33) 
                self.state = 506
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryplangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = CryplangParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.identifier()
            self.state = 512
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 508
                    self.match(CryplangParser.T__35)
                    self.state = 509
                    self.identifier() 
                self.state = 514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryplangParser.ElementaryTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = CryplangParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(CryplangParser.T__36)
            self.state = 516
            self.match(CryplangParser.T__21)
            self.state = 517
            self.elementaryTypeName()
            self.state = 518
            self.match(CryplangParser.T__37)
            self.state = 519
            self.typeName(0)
            self.state = 520
            self.match(CryplangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(CryplangParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.InternalKeyword)
            else:
                return self.getToken(CryplangParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(CryplangParser.ExternalKeyword)
            else:
                return self.getToken(CryplangParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(CryplangParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = CryplangParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(CryplangParser.T__28)
            self.state = 523
            self.functionTypeParameterList()
            self.state = 529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 527
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121]:
                        self.state = 524
                        self.match(CryplangParser.InternalKeyword)
                        pass
                    elif token in [119]:
                        self.state = 525
                        self.match(CryplangParser.ExternalKeyword)
                        pass
                    elif token in [117, 122, 125, 127]:
                        self.state = 526
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 532
                self.match(CryplangParser.T__29)
                self.state = 533
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryplangParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = CryplangParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(CryplangParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(CryplangParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(CryplangParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(CryplangParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = CryplangParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            _la = self._input.LA(1)
            if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 1313) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.StatementContext)
            else:
                return self.getTypedRuleContext(CryplangParser.StatementContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CryplangParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(CryplangParser.T__14)
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -210894418999807) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1874226953771286531) != 0):
                self.state = 541
                self.statement()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 547
            self.match(CryplangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(CryplangParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(CryplangParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(CryplangParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(CryplangParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(CryplangParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(CryplangParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(CryplangParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(CryplangParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(CryplangParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(CryplangParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(CryplangParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(CryplangParser.SimpleStatementContext,0)


        def cryptoStatement(self):
            return self.getTypedRuleContext(CryplangParser.CryptoStatementContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CryplangParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statement)
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.ifStatement()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 550
                self.whileStatement()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 551
                self.forStatement()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 4)
                self.state = 552
                self.block()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 5)
                self.state = 553
                self.inlineAssemblyStatement()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 554
                self.doWhileStatement()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 7)
                self.state = 555
                self.continueStatement()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 8)
                self.state = 556
                self.breakStatement()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 9)
                self.state = 557
                self.returnStatement()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 10)
                self.state = 558
                self.throwStatement()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 11)
                self.state = 559
                self.emitStatement()
                pass
            elif token in [5, 14, 22, 29, 33, 35, 37, 41, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 103, 104, 105, 106, 107, 109, 110, 111, 113, 126, 128, 129]:
                self.enterOuterAlt(localctx, 12)
                self.state = 560
                self.simpleStatement()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 13)
                self.state = 561
                self.cryptoStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = CryplangParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.expression(0)
            self.state = 565
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryplangParser.RULE_statementSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementSymbol" ):
                listener.enterStatementSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementSymbol" ):
                listener.exitStatementSymbol(self)




    def statementSymbol(self):

        localctx = CryplangParser.StatementSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_statementSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(CryplangParser.T__41)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryplangParser.RULE_privateSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateSymbol" ):
                listener.enterPrivateSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateSymbol" ):
                listener.exitPrivateSymbol(self)




    def privateSymbol(self):

        localctx = CryplangParser.PrivateSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_privateSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(CryplangParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def privateSymbol(self):
            return self.getTypedRuleContext(CryplangParser.PrivateSymbolContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_privateIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifier" ):
                listener.enterPrivateIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifier" ):
                listener.exitPrivateIdentifier(self)




    def privateIdentifier(self):

        localctx = CryplangParser.PrivateIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_privateIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 571
                self.privateSymbol()


            self.state = 574
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privateIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.PrivateIdentifierContext)
            else:
                return self.getTypedRuleContext(CryplangParser.PrivateIdentifierContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_privateIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifierList" ):
                listener.enterPrivateIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifierList" ):
                listener.exitPrivateIdentifierList(self)




    def privateIdentifierList(self):

        localctx = CryplangParser.PrivateIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_privateIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 10995116294144) != 0) or _la==128:
                        self.state = 576
                        self.privateIdentifier()


                    self.state = 579
                    self.match(CryplangParser.T__15) 
                self.state = 584
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 10995116294144) != 0) or _la==128:
                self.state = 585
                self.privateIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryplangParser.RULE_signatureMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatureMethod" ):
                listener.enterSignatureMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatureMethod" ):
                listener.exitSignatureMethod(self)




    def signatureMethod(self):

        localctx = CryplangParser.SignatureMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_signatureMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 263882790666240) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProofMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryplangParser.RULE_proofMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProofMethod" ):
                listener.enterProofMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProofMethod" ):
                listener.exitProofMethod(self)




    def proofMethod(self):

        localctx = CryplangParser.ProofMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_proofMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1970324836974592) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CryptoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signatureStatement(self):
            return self.getTypedRuleContext(CryplangParser.SignatureStatementContext,0)


        def proofStatement(self):
            return self.getTypedRuleContext(CryplangParser.ProofStatementContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_cryptoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCryptoStatement" ):
                listener.enterCryptoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCryptoStatement" ):
                listener.exitCryptoStatement(self)




    def cryptoStatement(self):

        localctx = CryplangParser.CryptoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_cryptoStatement)
        try:
            self.state = 594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.signatureStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.proofStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryplangParser.StatementSymbolContext,0)


        def signatureMethod(self):
            return self.getTypedRuleContext(CryplangParser.SignatureMethodContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryplangParser.IdentifierContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryplangParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_signatureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatureStatement" ):
                listener.enterSignatureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatureStatement" ):
                listener.exitSignatureStatement(self)




    def signatureStatement(self):

        localctx = CryplangParser.SignatureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_signatureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.statementSymbol()
            self.state = 597
            self.match(CryplangParser.T__21)
            self.state = 598
            self.signatureMethod()
            self.state = 599
            self.match(CryplangParser.T__15)
            self.state = 606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==128:
                        self.state = 600
                        self.identifier()


                    self.state = 603
                    self.match(CryplangParser.T__15) 
                self.state = 608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==128:
                self.state = 609
                self.identifier()


            self.state = 612
            self.match(CryplangParser.T__15)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913526528491520) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 109053407) != 0):
                self.state = 613
                self.primaryExpression()


            self.state = 616
            self.match(CryplangParser.T__22)
            self.state = 617
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProofStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementSymbol(self):
            return self.getTypedRuleContext(CryplangParser.StatementSymbolContext,0)


        def proofMethod(self):
            return self.getTypedRuleContext(CryplangParser.ProofMethodContext,0)


        def privateIdentifierList(self):
            return self.getTypedRuleContext(CryplangParser.PrivateIdentifierListContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryplangParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_proofStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProofStatement" ):
                listener.enterProofStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProofStatement" ):
                listener.exitProofStatement(self)




    def proofStatement(self):

        localctx = CryplangParser.ProofStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_proofStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.statementSymbol()
            self.state = 620
            self.match(CryplangParser.T__21)
            self.state = 621
            self.proofMethod()
            self.state = 622
            self.match(CryplangParser.T__15)
            self.state = 623
            self.privateIdentifierList()
            self.state = 624
            self.match(CryplangParser.T__15)
            self.state = 625
            self.primaryExpression()
            self.state = 626
            self.match(CryplangParser.T__22)
            self.state = 627
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.StatementContext)
            else:
                return self.getTypedRuleContext(CryplangParser.StatementContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = CryplangParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(CryplangParser.T__50)
            self.state = 630
            self.match(CryplangParser.T__21)
            self.state = 631
            self.expression(0)
            self.state = 632
            self.match(CryplangParser.T__22)
            self.state = 633
            self.statement()
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 634
                self.match(CryplangParser.T__51)
                self.state = 635
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(CryplangParser.StatementContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = CryplangParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(CryplangParser.T__52)
            self.state = 639
            self.match(CryplangParser.T__21)
            self.state = 640
            self.expression(0)
            self.state = 641
            self.match(CryplangParser.T__22)
            self.state = 642
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(CryplangParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = CryplangParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 644
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 645
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CryplangParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(CryplangParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = CryplangParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(CryplangParser.T__24)
            self.state = 649
            self.match(CryplangParser.T__21)
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 22, 29, 33, 35, 37, 41, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 103, 104, 105, 106, 107, 109, 110, 111, 113, 126, 128, 129]:
                self.state = 650
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 651
                self.match(CryplangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 22, 33, 35, 41, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 103, 104, 105, 106, 107, 109, 110, 111, 113, 126, 128, 129]:
                self.state = 654
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 655
                self.match(CryplangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                self.state = 658
                self.expression(0)


            self.state = 661
            self.match(CryplangParser.T__22)
            self.state = 662
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyBlockContext,0)


        def StringLiteral(self):
            return self.getToken(CryplangParser.StringLiteral, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = CryplangParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(CryplangParser.T__53)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 665
                self.match(CryplangParser.StringLiteral)


            self.state = 668
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CryplangParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = CryplangParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(CryplangParser.T__54)
            self.state = 671
            self.statement()
            self.state = 672
            self.match(CryplangParser.T__52)
            self.state = 673
            self.match(CryplangParser.T__21)
            self.state = 674
            self.expression(0)
            self.state = 675
            self.match(CryplangParser.T__22)
            self.state = 676
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(CryplangParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = CryplangParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(CryplangParser.ContinueKeyword)
            self.state = 679
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(CryplangParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = CryplangParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(CryplangParser.BreakKeyword)
            self.state = 682
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = CryplangParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(CryplangParser.T__55)
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                self.state = 685
                self.expression(0)


            self.state = 688
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CryplangParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = CryplangParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(CryplangParser.T__56)
            self.state = 691
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(CryplangParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = CryplangParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(CryplangParser.T__57)
            self.state = 694
            self.functionCall()
            self.state = 695
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(CryplangParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(CryplangParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = CryplangParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 697
                self.match(CryplangParser.T__58)
                self.state = 698
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 699
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 700
                self.match(CryplangParser.T__21)
                self.state = 701
                self.variableDeclarationList()
                self.state = 702
                self.match(CryplangParser.T__22)
                pass


            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 706
                self.match(CryplangParser.T__9)
                self.state = 707
                self.expression(0)


            self.state = 710
            self.match(CryplangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(CryplangParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = CryplangParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913655910187008) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 33554463) != 0):
                self.state = 712
                self.variableDeclaration()


            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 715
                self.match(CryplangParser.T__15)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646913655910187008) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 33554463) != 0):
                    self.state = 716
                    self.variableDeclaration()


                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryplangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = CryplangParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(CryplangParser.T__21)
            self.state = 731
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==41 or _la==128:
                        self.state = 725
                        self.identifier()


                    self.state = 728
                    self.match(CryplangParser.T__15) 
                self.state = 733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==128:
                self.state = 734
                self.identifier()


            self.state = 737
            self.match(CryplangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(CryplangParser.Int, 0)

        def Uint(self):
            return self.getToken(CryplangParser.Uint, 0)

        def Byte(self):
            return self.getToken(CryplangParser.Byte, 0)

        def Fixed(self):
            return self.getToken(CryplangParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(CryplangParser.Ufixed, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = CryplangParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8646911318911090688) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(CryplangParser.PrimaryExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(CryplangParser.FunctionCallArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CryplangParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 742
                self.match(CryplangParser.T__64)
                self.state = 743
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 744
                self.match(CryplangParser.T__21)
                self.state = 745
                self.expression(0)
                self.state = 746
                self.match(CryplangParser.T__22)
                pass

            elif la_ == 3:
                self.state = 748
                _la = self._input.LA(1)
                if not(_la==63 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 749
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 750
                _la = self._input.LA(1)
                if not(_la==66 or _la==67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 751
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 752
                _la = self._input.LA(1)
                if not(_la==68 or _la==69):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 753
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 754
                self.match(CryplangParser.T__69)
                self.state = 755
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 756
                self.match(CryplangParser.T__4)
                self.state = 757
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 758
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 820
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 818
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                    if la_ == 1:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 761
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 762
                        self.match(CryplangParser.T__70)
                        self.state = 763
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 764
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 765
                        _la = self._input.LA(1)
                        if not(((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & 1729382256910270465) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 766
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 767
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 768
                        _la = self._input.LA(1)
                        if not(_la==66 or _la==67):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 769
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 770
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 771
                        _la = self._input.LA(1)
                        if not(_la==74 or _la==75):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 772
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 773
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 774
                        self.match(CryplangParser.T__75)
                        self.state = 775
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 776
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 777
                        self.match(CryplangParser.T__3)
                        self.state = 778
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 779
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 780
                        self.match(CryplangParser.T__76)
                        self.state = 781
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 782
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 783
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 784
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 785
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 786
                        _la = self._input.LA(1)
                        if not(_la==78 or _la==79):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 787
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 788
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 789
                        self.match(CryplangParser.T__79)
                        self.state = 790
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 791
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 792
                        self.match(CryplangParser.T__80)
                        self.state = 793
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 794
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 795
                        self.match(CryplangParser.T__81)
                        self.state = 796
                        self.expression(0)
                        self.state = 797
                        self.match(CryplangParser.T__82)
                        self.state = 798
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 800
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 801
                        _la = self._input.LA(1)
                        if not(_la==10 or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 1023) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 802
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 803
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 804
                        _la = self._input.LA(1)
                        if not(_la==63 or _la==64):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 805
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 806
                        self.match(CryplangParser.T__32)
                        self.state = 807
                        self.expression(0)
                        self.state = 808
                        self.match(CryplangParser.T__33)
                        pass

                    elif la_ == 16:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 810
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 811
                        self.match(CryplangParser.T__21)
                        self.state = 812
                        self.functionCallArguments()
                        self.state = 813
                        self.match(CryplangParser.T__22)
                        pass

                    elif la_ == 17:
                        localctx = CryplangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 815
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 816
                        self.match(CryplangParser.T__35)
                        self.state = 817
                        self.identifier()
                        pass

             
                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(CryplangParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(CryplangParser.NumberLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(CryplangParser.HexLiteral, 0)

        def StringLiteral(self):
            return self.getToken(CryplangParser.StringLiteral, 0)

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(CryplangParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(CryplangParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(CryplangParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = CryplangParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_primaryExpression)
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 823
                self.match(CryplangParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 824
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 825
                self.match(CryplangParser.HexLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 826
                self.match(CryplangParser.StringLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 827
                self.identifier()
                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 828
                    self.match(CryplangParser.T__32)
                    self.state = 829
                    self.match(CryplangParser.T__33)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 832
                self.match(CryplangParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 833
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 834
                self.typeNameExpression()
                self.state = 837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 835
                    self.match(CryplangParser.T__32)
                    self.state = 836
                    self.match(CryplangParser.T__33)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = CryplangParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.expression(0)
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 842
                self.match(CryplangParser.T__15)
                self.state = 843
                self.expression(0)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.NameValueContext)
            else:
                return self.getTypedRuleContext(CryplangParser.NameValueContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = CryplangParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.nameValue()
            self.state = 854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 850
                    self.match(CryplangParser.T__15)
                    self.state = 851
                    self.nameValue() 
                self.state = 856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 857
                self.match(CryplangParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = CryplangParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.identifier()
            self.state = 861
            self.match(CryplangParser.T__82)
            self.state = 862
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(CryplangParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = CryplangParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(CryplangParser.T__14)
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14 or _la==41 or _la==128:
                    self.state = 865
                    self.nameValueList()


                self.state = 868
                self.match(CryplangParser.T__16)
                pass
            elif token in [5, 14, 22, 23, 33, 35, 41, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 103, 104, 105, 106, 107, 109, 110, 111, 113, 126, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                    self.state = 869
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CryplangParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(CryplangParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = CryplangParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.expression(0)
            self.state = 875
            self.match(CryplangParser.T__21)
            self.state = 876
            self.functionCallArguments()
            self.state = 877
            self.match(CryplangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(CryplangParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = CryplangParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(CryplangParser.T__14)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4704012044746145792) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 51561299981) != 0):
                self.state = 880
                self.assemblyItem()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 886
            self.match(CryplangParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(CryplangParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(CryplangParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(CryplangParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(CryplangParser.ContinueKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(CryplangParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(CryplangParser.NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CryplangParser.StringLiteral, 0)

        def HexLiteral(self):
            return self.getToken(CryplangParser.HexLiteral, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = CryplangParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyItem)
        try:
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 890
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 891
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 892
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 893
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 894
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 895
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 896
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 897
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 898
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 899
                self.match(CryplangParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 900
                self.match(CryplangParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 901
                self.subAssembly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 902
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 903
                self.match(CryplangParser.StringLiteral)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 904
                self.match(CryplangParser.HexLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = CryplangParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblyExpression)
        try:
            self.state = 909
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 35, 41, 56, 62, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.assemblyCall()
                pass
            elif token in [110, 111, 113, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(CryplangParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = CryplangParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.state = 911
                self.match(CryplangParser.T__55)
                pass
            elif token in [35]:
                self.state = 912
                self.match(CryplangParser.T__34)
                pass
            elif token in [62]:
                self.state = 913
                self.match(CryplangParser.T__61)
                pass
            elif token in [14, 41, 128]:
                self.state = 914
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 917
                self.match(CryplangParser.T__21)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4683745845848326144) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 786443) != 0):
                    self.state = 918
                    self.assemblyExpression()


                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 921
                    self.match(CryplangParser.T__15)
                    self.state = 922
                    self.assemblyExpression()
                    self.state = 927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 928
                self.match(CryplangParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = CryplangParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(CryplangParser.T__93)
            self.state = 932
            self.assemblyIdentifierOrList()
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 933
                self.match(CryplangParser.T__94)
                self.state = 934
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = CryplangParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.assemblyIdentifierOrList()
            self.state = 938
            self.match(CryplangParser.T__94)
            self.state = 939
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = CryplangParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 41, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 941
                self.identifier()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 942
                self.match(CryplangParser.T__21)
                self.state = 943
                self.assemblyIdentifierList()
                self.state = 944
                self.match(CryplangParser.T__22)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CryplangParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = CryplangParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.identifier()
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 949
                self.match(CryplangParser.T__15)
                self.state = 950
                self.identifier()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = CryplangParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(CryplangParser.T__95)
            self.state = 957
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = CryplangParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.identifier()
            self.state = 960
            self.match(CryplangParser.T__82)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(CryplangParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = CryplangParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(CryplangParser.T__96)
            self.state = 963
            self.assemblyExpression()
            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98 or _la==99:
                self.state = 964
                self.assemblyCase()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = CryplangParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyCase)
        try:
            self.state = 976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.match(CryplangParser.T__97)
                self.state = 971
                self.assemblyLiteral()
                self.state = 972
                self.assemblyBlock()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.match(CryplangParser.T__98)
                self.state = 975
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = CryplangParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(CryplangParser.T__28)
            self.state = 979
            self.identifier()
            self.state = 980
            self.match(CryplangParser.T__21)
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==41 or _la==128:
                self.state = 981
                self.assemblyIdentifierList()


            self.state = 984
            self.match(CryplangParser.T__22)
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 985
                self.assemblyFunctionReturns()


            self.state = 988
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = CryplangParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(CryplangParser.T__99)
            self.state = 991
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(CryplangParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(CryplangParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = CryplangParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(CryplangParser.T__24)
            self.state = 996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 994
                self.assemblyBlock()
                pass
            elif token in [14, 35, 41, 56, 62, 110, 111, 113, 128, 129]:
                self.state = 995
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 998
            self.assemblyExpression()
            self.state = 1001
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 999
                self.assemblyBlock()
                pass
            elif token in [14, 35, 41, 56, 62, 110, 111, 113, 128, 129]:
                self.state = 1000
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1003
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = CryplangParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(CryplangParser.T__50)
            self.state = 1006
            self.assemblyExpression()
            self.state = 1007
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CryplangParser.StringLiteral, 0)

        def DecimalNumber(self):
            return self.getToken(CryplangParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(CryplangParser.HexNumber, 0)

        def HexLiteral(self):
            return self.getToken(CryplangParser.HexLiteral, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = CryplangParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 524299) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CryplangParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(CryplangParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = CryplangParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(CryplangParser.T__53)
            self.state = 1012
            self.identifier()
            self.state = 1013
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CryplangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CryplangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CryplangParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = CryplangParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self.match(CryplangParser.T__21)

                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                    self.state = 1016
                    self.expression(0)


                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1019
                    self.match(CryplangParser.T__15)
                    self.state = 1021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                        self.state = 1020
                        self.expression(0)


                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1028
                self.match(CryplangParser.T__22)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.match(CryplangParser.T__32)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -18014328447696383) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 1873523266329509891) != 0):
                    self.state = 1030
                    self.expression(0)
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==16:
                        self.state = 1031
                        self.match(CryplangParser.T__15)
                        self.state = 1032
                        self.expression(0)
                        self.state = 1037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1040
                self.match(CryplangParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(CryplangParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(CryplangParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return CryplangParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = CryplangParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typeNameExpression)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 59, 60, 61, 62, 103, 104, 105, 106, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.elementaryTypeName()
                pass
            elif token in [14, 41, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(CryplangParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(CryplangParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(CryplangParser.NumberUnit, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = CryplangParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            _la = self._input.LA(1)
            if not(_la==110 or _la==111):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1048
                self.match(CryplangParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CryplangParser.Identifier, 0)

        def getRuleIndex(self):
            return CryplangParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CryplangParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            _la = self._input.LA(1)
            if not(_la==14 or _la==41 or _la==128):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.typeName_sempred
        self._predicates[65] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         




